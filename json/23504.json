{
   "data" : {
      "userid" : {
         "name" : "Joshua Gatcomb",
         "id" : "JGATCOMB"
      },
      "time" : "Re-sort the list as many times as there are keys Loop over the",
      "description" : "Presents hashes in sorted order",
      "communities" : "http://www.perlmonks.org/index.pl?node_id=289360",
      "chapterid" : {
         "name" : "Data_Type_Utilities",
         "id" : "6"
      },
      "similar" : "Tie::IxHash Tie::Hash::Array Tie::SortHash",
      "DSLIP" : "bdphp",
      "modid" : "Tie::Hash::Sorted",
      "enteredon" : "Thu Sep 11 18:58:44 2003 GMT",
      "enteredby" : {
         "name" : "Joshua Gatcomb",
         "id" : "JGATCOMB"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "The name space was chosen because Tie::SortHash already exists. I\n    believe it is descriptive as to what the module does.\n\n    Comparisons to other modules\n    -------------------------------------------------------- Tie::IxHash\n    1. Preserves insertion order 2. Provides two sort routines,\n    SortByKey & SortByValue, using textual compare\n\n    Tie::Hash::Sorted 1. Order is maintained regardless of insertion\n    order 2. Arbitrary sorting, may be changed at any time\n    --------------------------------------------------------\n    Tie::SortHash 1. Uses pseudo hashes (a deprecated perl feature) 2.\n    Uses eval(\"...\") for sorting 3. To generate the sorted list one\n    time: Re-sort the list as many times as there are keys Loop over the\n    hash as many times as there are keys, stopping on match Compare\n    current key against last key (keys^2 + keys)/2 times Slow No support\n    for lexical variables in sorting code Inflexible calling syntax\n\n    Tie::Hash::Sorted 1. Uses no deprecated perl features (tested from\n    5.004_3 .. 5.8.1) 2. Uses a proper code reference 3. To generate the\n    sorted list one time: Potentially re-sort the list one time Add one\n    to an iterator, and lookup the corresponding array element 4.\n    Potentially slow but with opportunities for optimization 5. Supports\n    lexicals, closures, etc 6. flexible/expandable calling syntax\n    --------------------------------------------------------\n    Tie::Hash::Array 1. Sorting is by textual comparison of key name\n\n    Tie::Hash::Sorted 1. Arbitrary sorting, may be changed at any time\n    --------------------------------------------------------\n\n    I believe the module should be included because it provides\n    functionality that the other modules do not, is flexible and\n    expandable, and gives control to the user.\n\n    Joshua Gatcomb JGATCOMB"
   },
   "meta" : {
      "message_id" : "200309111858.h8BIwjuY003443@pause.perl.org",
      "epoch" : 1063306725,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Tie::Hash::Sorted",
      "file" : "23504.txt",
      "type" : "module_submission"
   }
}
