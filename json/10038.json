{
   "data" : {
      "userid" : {
         "name" : "Steven Lembark",
         "id" : "LEMBARK"
      },
      "description" : "N-way parallel execution of queue via forks.",
      "Schedule:" : "seems likely since this runs the jobs N-way parallel. It",
      "communities" : "",
      "chapterid" : {
         "name" : "Operating_System_Interfaces",
         "id" : "4"
      },
      "similar" : "Schedule::At Schedule::Cron Schedule::Load",
      "DSLIP" : "Rdpfp",
      "modid" : "Schedule::Parallel",
      "enteredon" : "Thu Feb  7 00:01:03 2002 GMT",
      "enteredby" : {
         "name" : "Steven Lembark",
         "id" : "LEMBARK"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Schedule:: seems likely since this runs the jobs N-way parallel. It\n    does not perform any significant process control (aside from reaping\n    children). It isn't really a system interface, since the forked\n    process begins life by running a closure rather than exec or system.\n    It was originally developed to simplify database loading and\n    gzip-ing from large directories.\n\n    Main difference between this and others is taking in an array of\n    closures. This simplifies building the queue: Items do not need to\n    be of the same type or package to get executed. Building the queue\n    can reduce to a single map statement in many cases (see test.pl).\n\n    Main differences between this and other scheduling modules is\n    keeping track of N-way execution and a simple interface."
   },
   "meta" : {
      "message_id" : "200202070001.BAA16163@pause.perl.org",
      "epoch" : 1013040063,
      "from" : "upload@p11.speed-link.de",
      "subject" : "Module submission Schedule::Parallel",
      "file" : "10038.txt",
      "type" : "module_submission"
   }
}
