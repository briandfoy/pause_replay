{
   "data" : {
      "userid" : {
         "name" : "Gregory Class",
         "id" : "GCLASS"
      },
      "description" : "Spellcheck- a generic spellchecking module",
      "communities" : "CVS, maillinglist",
      "chapterid" : {
         "name" : "World_Wide_Web_HTML_HTTP_CGI",
         "id" : "15"
      },
      "similar" : "Text::Aspell, Lingua::Ispell",
      "DSLIP" : "RmpOa",
      "modid" : "Spellcheck",
      "enteredon" : "Mon Dec  2 19:40:26 2002 GMT",
      "enteredby" : {
         "name" : "Gregory Class",
         "id" : "GCLASS"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Why I wrote it:\n\n    Roughly a year ago, I wrote an internal tool for our suite of tools\n    and used the Lingua::Ispell interface for spellchecking.\n    Unfortunately, the interface was not very clean and generated\n    several problems when I was using it in Modperl. Developers at my\n    work ended up contributing some fixes to that module but eventually\n    decided it didn't suit all of our needs. Additionally, I ended up\n    having to wrap the module with more code to make it work well for\n    checking text in webpages. As a result of these problems I had with\n    existing modules, I set out to write a newer simpler checker module.\n    Last summer I wrote that easier-to-use module. It works in modperl\n    and is very easy to integrate in tools. I even wrote an inherited\n    module that allows client classes to spellcheck form elements with\n    only one function call. The reason I wrote this module was because\n    there was no existing module that had a minimal or complete enough\n    interface to suit my Spellchecking needs.\n\n    Rationale for Namespace:\n\n    First of all, all this module is designed to do is Spellcheck. It's\n    not designed to be a wrapper for a specific type of command line\n    spellchecker or a specific type of input.\n\n    Secondly, the module is not bound to any one type of command line\n    checker because the method that interfaces an external spellchecker\n    is loosely coupled to the rest of the module. Changing a\n    configuration directive when the object is created could change the\n    command used to check the text.\n\n    Finally, I have written other inherited modules that are designed\n    to be used in specific types of documents, notably Text and HTML so\n    it makes sense for a usage for spellcheck to be Spellcheck::HTML or\n    Spellcheck::TEXT. It'd make sense to do new modules in the namespace\n    that spellcheck XML or POD, or whatever.\n\n    To sum things up, this spellchecker module is written to be\n    extended for different types of input, so it naturally should exist\n    as a new root namespace."
   },
   "meta" : {
      "message_id" : "200212021940.gB2JeRg25939@pause.perl.org",
      "epoch" : 1038858027,
      "from" : "upload@p11.speed-link.de",
      "subject" : "Module submission Spellcheck",
      "file" : "15914.txt",
      "type" : "module_submission"
   }
}
