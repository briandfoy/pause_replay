{
   "data" : {
      "userid" : {
         "name" : "Ton Hospel",
         "id" : "THOSPEL"
      },
      "description" : "Heap of elements ordered by strings",
      "communities" : "modules@perl.org",
      "chapterid" : {
         "name" : "Data_Type_Utilities",
         "id" : "6"
      },
      "similar" : "Heap, Heap::Number",
      "DSLIP" : "RdpOp",
      "modid" : "Heap::String",
      "enteredon" : "Tue May 13 19:05:04 2003 GMT",
      "enteredby" : {
         "name" : "Ton Hospel",
         "id" : "THOSPEL"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Heap::String is meant as a basename for several submodules\n    depending on what kind of element you want to store in the\n    heap(Arrayreference, Hashreference, just the keys).\n\n    All of these will keep the heap ordered by some string value in the\n    element with low values being extracted first.\n\n    The interface is simpler than that of the standard Heap module\n    since you don't have to transform the elements first. It doesn't\n    support general sorting functions though.\n\n    For these reasons it's also substantially faster (about 3 times)\n\n    Here's a simple example if the elements are just the keys:\n\n    use Heap::String;\n\n    my $heap = Heap::String->new; $heap->insert($_) for @array; print\n    $heap->extract_min, \"\\n\" for 1..$heap->count;\n\n    Here's another example sorting a hash based object providing a\n    print method) by some key:\n\n    use Heap::String::Hash;\n\n    my $heap = Heap::String::Hash->new(key_name => \"foo\");\n    $heap->insert($_) for @objects; extract_min->print, \"\\n\" for\n    1..$heap->count;\n\n    Simple, fast."
   },
   "meta" : {
      "message_id" : "200305131905.h4DJ54jM022528@pause.perl.org",
      "epoch" : 1052852704,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission Heap::String",
      "file" : "21082.txt",
      "type" : "module_submission"
   }
}
