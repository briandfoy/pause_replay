{
   "data" : {
      "userid" : {
         "name" : "Daniel Muey",
         "id" : "DMUEY"
      },
      "description" : "Normalize Text String",
      "communities" : "beginners@perl.org",
      "chapterid" : {
         "name" : "Data_Type_Utilities",
         "id" : "6"
      },
      "similar" : "Other Normalization modules I see on CPAN are a different type of\n    normalization.",
      "DSLIP" : "Sdpfp",
      "modid" : "Data::Normalize",
      "enteredon" : "Fri Sep 17 22:46:39 2004 GMT",
      "enteredby" : {
         "name" : "Daniel Muey",
         "id" : "DMUEY"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Indexes, for example, can be more acurate if the data has been\n    \"normalized\" in the sense that strings that can be represented in\n    multiple ways (1 one dr doctor, etc) are consistently modified to be\n    the same.\n\n    So for example if someone serached for \"dr worm\"\n\n    you would use this module to normalize \"dr worm\" into \"doctor worm\"\n    and then do the search on the same data that has been normalixed the\n    same.\n\n    See http://dev.mysql.com/doc/mysql/en/Fulltext_Search.html and the\n    post with \"Tom's fulltext tips: To get MySQL searching well for me I\n    did:\" item #1 for another example.\n\n    This module would give a standard consistent way to normailize\n    data, with a way to expand it by simply giving it a hashref as the\n    argument.\n\n    For example in the database/search example above you could ensure\n    compatibility by doing:\n\n    Assuming $string to be \"Dr. Worm\"\n\n    1) When its added to the database by a perl script (what else of\n    course ;p)\n\n    my $data_to_store = normalize($string); # then INSERT\n    $dbh->quote($data_to_store);\n\n    2) When its searhed for\n\n    my $search_string = normalized($string); use $search_string in\n    query\n\n    3) Now regardless of if the admin or the searcher entered dr worm,\n    Dr. Worm, or Doctor Worm - the record will match\n\n    The same principle would apply to acronyms (and special cases)\n\n    my %norm_map = ( tmbg => 'They Might Be Giants', rtfm => 'Read the\n    Friendly Manual', stfw => 'Search The Friendly Web', );\n\n    my $norm_data = normalized($string,\\%norm_map);\n\n    Plus ways to handle exeptions, say\n\n    etc - where you mean Et Cetera or /etc/ It can be handled easily..."
   },
   "meta" : {
      "message_id" : "200409172246.i8HMkdMk026433@pause.perl.org",
      "epoch" : 1095461199,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Data::Normalize",
      "file" : "34931.txt",
      "type" : "module_submission"
   }
}
