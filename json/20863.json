{
   "data" : {
      "userid" : {
         "name" : "Andrew Chadwick",
         "id" : "ANDREWC"
      },
      "description" : "Apply one or more Algorithm::Diff diffs",
      "communities" : "comp.lang.perl.modules",
      "chapterid" : {
         "name" : "Data_Type_Utilities",
         "id" : "6"
      },
      "similar" : "Algorithm::Diff Algorithm::Merge",
      "DSLIP" : "Rdpfp",
      "modid" : "Algorithm::ApplyDiffs",
      "enteredon" : "Sun May  4 23:02:15 2003 GMT",
      "enteredby" : {
         "name" : "Andrew Chadwick",
         "id" : "ANDREWC"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "* Name\n\n    I was going to call this thing Algorithm::Merge, but the problem\n    space is quite different from merge(1). For example,\n    Alg.::ApplyDiffs doesn't do fuzzing and chunk rejection, but it can\n    handle the appliction of more than one diff sequence at a time, and\n    handle conflicts.\n\n    * Other modules ** Algorithm::Diff\n\n    ApplyDiffs applies the diff sequences generated by diff() in this\n    module. Algorithm::Diff does not contain a routine for applying diff\n    sequences.\n\n    ** Algorithm::Merge\n\n    Features a diff3() and a merge(), which you could argue does the\n    same thing as Diff + ApplyDiffs. However Alg.::Merge::merge() only\n    merges the three-way differences between an original and two\n    descendent revisions. Alg.::ApplyDiffs' routines are not limited in\n    this respect: you can apply the diffs from an original array and one\n    or more descendents together, albeit at the risk of harder-to-solve\n    conflicts appearing.\n\n    Like Alg.::Merge, Alg.::ApplyDiffs has a conflict-resolution\n    callback which can be used to resolve conflicts during application,\n    or just inject conflict markers.\n\n    ---\n\n    Now the fun bit. I plan to work the Alg.::ApplyDiffs code so that\n    it can reduce conflicts. There are even certain cases that can be\n    optimised away cleanly:\n\n    >>>>>> src_diff_x Hello world >>>>>> src_diff_y Hello world <<<<<<\n\n    for example. Currently it spits that out as a conflict, even though\n    it patently isn't: all derived revisions contain the same text at\n    the same point.\n\n    Alg.::ApplyDiffs' diff-based approach lends itself to greater\n    analysis and optimisation.\n\n    ---\n\n    I've contacted the authors of both the other Algorithm:: modules\n    privately by Email to discuss the upload of this module, and had a\n    response from neither. I'm concluding from this that they don't have\n    any problem -- or rather, that they have no explicit objections or\n    wish to incorporate my code into theirs -- with my uploading my\n    module."
   },
   "meta" : {
      "message_id" : "200305042302.h44N2GQh020640@pause.perl.org",
      "epoch" : 1052089336,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission Algorithm::ApplyDiffs",
      "file" : "20863.txt",
      "type" : "module_submission"
   }
}
