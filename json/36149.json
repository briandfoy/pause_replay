{
   "data" : {
      "userid" : {
         "name" : "Eric Mahurin",
         "id" : "EMAHURIN"
      },
      "description" : "1-dimensional solver base class",
      "communities" : "",
      "chapterid" : {
         "name" : "Data_Type_Utilities",
         "id" : "6"
      },
      "similar" : "Math::Brent",
      "DSLIP" : "bdpOp",
      "modid" : "Math::Solver1",
      "enteredon" : "Fri Nov  5 19:05:11 2004 GMT",
      "enteredby" : {
         "name" : "Eric Mahurin",
         "id" : "EMAHURIN"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Currently there are no modules for numerical root finding (one- or\n    multi-dimensional) - at least that I could find.\n\n    For now, I made the following:\n\n    Math::Solver1.pm - 1-d numerical solver/root finder base class\n    Math::Solver1::Bisect - derived class using bisection\n    Math::Solver1::Falsi - derived class using regula-falsi\n    Math::Solver1::Newton - derived class using newton/secant\n\n    There are still many other ways of doing 1-d root finding and they\n    all should fit under this interface.\n\n    In the larger scope, some thought into the following following:\n\n    - 1-D root finding : x where f(x)=0 - N-D root finding : X where\n    F(X)=0 - 1-D optimization : x where g(x)=min (Math::Brent) - N-D\n    optimization : X where g(X)=min (Math::Amoeba) - N-D opt w/\n    constraints : X where g(X)=min, F(X)=0, H(X)>=0 (number of functions\n    in F < number of variables in X)\n\n    x : one variable X : vector of variables f : single function F :\n    vector of functions (typically same number as variables)\n\n    The GSL library has these divisions with the last most complicated\n    optimization w/ constraints."
   },
   "meta" : {
      "message_id" : "200411051905.iA5J5EPc006817@pause.perl.org",
      "epoch" : 1099681514,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Math::Solver1",
      "file" : "36149.txt",
      "type" : "module_submission"
   }
}
