{
   "data" : {
      "userid" : {
         "name" : "Peter H. Li",
         "id" : "PHLI"
      },
      "description" : "OO Interface to Nextbus public transit GPS",
      "communities" : "",
      "chapterid" : {
         "name" : "World_Wide_Web_HTML_HTTP_CGI",
         "id" : "15"
      },
      "similar" : "",
      "DSLIP" : "cdpOr",
      "modid" : "WWW::Nextbus",
      "enteredon" : "Sat Dec  6 07:02:24 2003 GMT",
      "enteredby" : {
         "name" : "Peter H. Li",
         "id" : "PHLI"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "*The Impetus Nextbus provides GPS solutions to public transit\n    agencies. Access to their GPS and stop ETA times data is only\n    available to freelance programmers through their website,\n    www.nextbus.com.\n\n    * The Program WWW::Nextbus would provide two major services: 1)\n    Simple interface for getting the typical train/bus position and stop\n    ETA data from the website given the correct GET arguments. 2) A\n    stroll down the website tree of possible GET arguments for a\n    particular agency, thus supplying the programmer with an object that\n    knows how to make a particular query given information less formal\n    than the actual GET arguments.\n\n    For example, once the object had completed its stroll, it would be\n    able to translate the names of stops like \"Duboce and Fillmore\" into\n    the correct GET argument (which happens to be \"DF\" for the sf-muni\n    agency).\n\n    WWW::Nextbus would probably be a LWP::UserAgent. This would be able\n    to get the pages and stroll through to parse the desired data.\n\n    WWW::Nextbus::Agency is a helper class that implements the\n    suggested stop decoding, etc., once it has been given the results of\n    the GET stroll to store. Alternatively, Agency could be a\n    WWW::Nextbus and get the data itself. Then WWW::Nextbus is basically\n    just a superclass that is not really instantiated directly.\n\n    I have also made WWW::Nextbus::Agency::SFMUNI, which ISA\n    WWW::Nextbus::Agency. This is just a helpful subclass that already\n    knows the GET stroll and other info relevant to the particular\n    agency sf-muni. It is basically just a premade instance of Agency\n    (but when the manual instantiation takes hundreds of lines that\n    could be useful). This would provide an alternative for programmers:\n    either use a hard coded helper subclass for the agency of interest,\n    or instantiate Agency with just the name of the agency you want and\n    send it to out inform itself.\n\n    As people use Agency to build GET trees for other agencies, they\n    could easily make up similar helper subclasses to help other people\n    interested in that agency. I'm only interested in sf-muni for now...\n\n    *The Progress Hope that's clear. Anyway I'm using the Agency and\n    SFMUNI classes already to implement my AIM->Nextbus interface.\n    Putting in the Nextbus superclass with some useful methods and an\n    internal Agency object should be pretty simple, but may be time\n    consuming. And then I have to learn POD. Maybe better to upload\n    Agency first since that's almost done and pretty useful by itself.\n    But should keep the Nextbus namespace open above it.\n\n    *The Namespace I chose WWW because I see a few other similar\n    website specific info grabbers in this root."
   },
   "meta" : {
      "message_id" : "200312060702.hB672O8s015317@pause.perl.org",
      "epoch" : 1070694144,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission WWW::Nextbus",
      "file" : "24897.txt",
      "type" : "module_submission"
   }
}
