{
   "data" : {
      "userid" : {
         "name" : "Yves Orton",
         "id" : "YVES"
      },
      "description" : "Dumps data structures in breadth first order",
      "communities" : "Perlmonks.org",
      "chapterid" : {
         "name" : "Data_Type_Utilities",
         "id" : "6"
      },
      "similar" : "Data::Dumper, Data::Dump, Data::*",
      "DSLIP" : "bdpOp",
      "modid" : "Data::BFDump",
      "enteredon" : "Mon May  6 18:28:20 2002 GMT",
      "enteredby" : {
         "name" : "Yves Orton",
         "id" : "YVES"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "I wrote this module after getting frustrated with Data::Dumper and\n    Data::Dump doing depth first traversals (which for complex and self\n    referential structures is hopelessly confusing and difficult to\n    analyse). In addition I have added features like duping coderefs\n    using B::Deparse. Tested against Data::Dumper and Data::Dump\n    (sortof, Data::Dump has some crippling bugs) Data::BFDump is far\n    more accurate (and much more readable) than either of the above.\n\n    Breadth first order ensures that objects are placed as high up in\n    the data structure as possible (and thus have the shortest paths)\n    this much more closely mirrors the way most programmers think of\n    their data structures.\n\n    Additionally the breadth first nature means that Data::BFDump (moe\n    or less) must do a catalog of the datastructure before it dumps\n    which allows various interesting opportunities, such as predeclaring\n    multiply referenced variables so as minimize the number of post\n    declaration \"fix\" statements that are required.\n\n    A number of other features for development analysis are already\n    implemented or on the drawing board such as - DiffStructs do a deep\n    level diff of two structures using Algorith::Diff - Various\n    indentation options not provided by Data::Dumper\n\n    Ultimately Data::BFDump will support the full interface of\n    Data::Dumper (currently it only supports the more commonly used\n    attributes)"
   },
   "meta" : {
      "message_id" : "200205061828.UAA23742@pause.perl.org",
      "epoch" : 1020709700,
      "from" : "upload@p11.speed-link.de",
      "subject" : "Module submission Data::BFDump",
      "file" : "11555.txt",
      "type" : "module_submission"
   }
}
