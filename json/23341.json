{
   "data" : {
      "userid" : {
         "name" : "Andrew Sterling Hanenkamp",
         "id" : "HANENKAMP"
      },
      "description" : "Mixed positional/named parameter processor",
      "communities" : "",
      "chapterid" : {
         "name" : "Opt_Arg_Param_Proc",
         "id" : "12"
      },
      "similar" : "Getargs::Long Getopt::GetArgs",
      "DSLIP" : "adpfp",
      "modid" : "Getargs::Mixed",
      "enteredon" : "Wed Sep  3 19:37:29 2003 GMT",
      "enteredby" : {
         "name" : "Andrew Sterling Hanenkamp",
         "id" : "HANENKAMP"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Very similar to the modules Getargs::Long and Getopt::GetArgs, but\n    provides a very simple interface, provides no \"type-checking\", and\n    allows for positonal and named parameters to be mixed. It is\n    somewhat inspired by the way in which CGI takes parameters, but can\n    mix parameter types. So, a function using Getargs::Mixed can do:\n\n    foo($x, $y, $z); # or foo($x, -z => $z, -y => $y); # or foo(-z =>\n    $z, -x => $x, -y => $y);\n\n    This style is slightly borrowed from Perl 6 parameter passing\n    ideas, but is, of course, much weaker.\n\n    The namespace made sense since Getargs::Long is already using the\n    Getargs root NS and does something very similar. Getopt::GetArgs\n    seems like a misnomer, so emulating its naming seemed a poor choice."
   },
   "meta" : {
      "message_id" : "200309031937.h83JbURW024241@pause.perl.org",
      "epoch" : 1062617850,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Getargs::Mixed",
      "file" : "23341.txt",
      "type" : "module_submission"
   }
}
