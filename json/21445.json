{
   "data" : {
      "userid" : {
         "name" : "Darren Duncan",
         "id" : "DUNCAND"
      },
      "description" : "Unserialized SQL objects, use like XML DOM",
      "communities" : "modules@perl.org, poop-group@lists.sourceforge.net,\n    dbi-users@perl.org",
      "chapterid" : {
         "name" : "String_Lang_Text_Proc",
         "id" : "11"
      },
      "similar" : "most of the SQL::* modules, some object-to-database mapping tools",
      "DSLIP" : "cdhOg",
      "modid" : "SQL::ObjectModel",
      "enteredon" : "Mon Jun  2 23:31:44 2003 GMT",
      "enteredby" : {
         "name" : "Darren Duncan",
         "id" : "DUNCAND"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "This module manages objects which are equivalent to SQL statements\n    and database schema definitions. This is analagous to how XML DOMs\n    are objects that are equivalent XML strings, and they can be\n    converted back and forth at will.\n\n    But the actual conversion is not handled by this module, but rather\n    by third party extension modules or code of your choice. This is\n    analagous to how Perl hashes or arrays store a list of values which\n    can also be stored in a string with the appropriate encoding.\n\n    These objects are intended to represent all kinds of SQL, both DML\n    and DDL, both ANSI standard and RDBMS vendor extensions. Unlike\n    basically all of the other SQL generating/parsing modules I know\n    about, which are limited to basic DML and only support table\n    definition DML, my module supports arbitrarily complex select\n    statements, with composite keys and unions, and calls to stored\n    functions; my module can also define views and stored procedures and\n    triggers.\n\n    Since said items are just described by my module rather than\n    implemented, other modules can implement the description any way\n    they want, which could mean either generating and executing SQL, or\n    generating Perl code that does the same task, should they want to.\n    My module makes this easy.\n\n    It is intended that SQL::ObjectModel objects can be passed around\n    and used by programs instead of SQL strings, and can be used in all\n    of the same ways (but different syntax).\n\n    The objects don't exactly match an existing SQL dialect, but a new\n    one which is a normalized superset of existing dialects. Normalized\n    means that if other dialects have different ways of saying the same\n    thing, there is only one way to say it in the objects. All\n    functionality that a database can do is representable, when\n    reasonable, even if some other databases don't support the feature.\n    So if you want to use a feature you still can, but that limits which\n    databases you can use. So you define the object the same way no\n    matter which database you are using.\n\n    These modules are especially suited for use with applications or\n    modules that make use of data dictionaries to control what they do.\n    It is common in applications that they interpret their data\n    dictionaries and generate SQL to accomplish some of their work,\n    which means making sure generated SQL is in the right dialect or\n    syntax, and making sure literal values are encoded correctly. By\n    using my module, they can simply copy appropriate individual\n    elements in their data dictionaries to my module, including column\n    names, table names, function names, literal values, and they don't\n    have to do any string parsing or assembling.\n\n    While there is some overlap in functionality, I believe most of the\n    features in my module have never been provided by another CPAN\n    module, and that it would be valuable. This is also being\n    implemented such that many existing CPAN modules could be updated to\n    use the objects rather than SQL strings or other proprietary\n    SQL-representing-structures, if they want to.\n\n    Please let me know if you need clarification, or you want to\n    suggest an alternate module name.\n\n    I chose \"... language text processing ...\" as the category for this\n    module since that is where most of the other SQL::* modules are\n    located. But this module could conceivably go under \"... data types\n    ...\" or \"... database interfaces ...\" instead. I will note, however,\n    that my module doesn't actually talk to any databases itself, and it\n    does not require that someone using it would do so; that is just the\n    common usage.\n\n    Thank you."
   },
   "meta" : {
      "message_id" : "200306022331.h52NVjG8013908@pause.perl.org",
      "epoch" : 1054596705,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission SQL::ObjectModel",
      "file" : "21445.txt",
      "type" : "module_submission"
   }
}
