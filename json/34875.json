{
   "data" : {
      "userid" : {
         "name" : "Darren Duncan",
         "id" : "DUNCAND"
      },
      "description" : "An abstract syntax tree for all types of SQL",
      "communities" : "dbi-dev, dbi-users, poop-group, dbdi-dev, modules@perl.org,\n    victoria-pm, sqlite-users@sqlite.org",
      "chapterid" : {
         "name" : "String_Lang_Text_Proc",
         "id" : "11"
      },
      "similar" : "SQL::Statement SQL::Translator SQL::YASP SQL::Generator SQL::Schema\n    SQL::Abstract SQL::Snippet SQL::Catalog DB::Ent DBIx::Abstract\n    DBIx::AnyDBD DBIx::DBSchema DBIx::Namespace DBIx::SearchBuilder\n    TripleStore",
      "DSLIP" : "cdpOg",
      "modid" : "SQL::SyntaxModel",
      "as" : "domains, sequence generators, tables, views, and routines",
      "enteredon" : "Thu Sep 16 22:19:01 2004 GMT",
      "enteredby" : {
         "name" : "Darren Duncan",
         "id" : "DUNCAND"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "See the existing CPAN module documentation for SQL::SyntaxModel (\n    http://search.cpan.org/dist/SQL-SyntaxModel/lib/SQL/SyntaxModel.pm )\n    for a proper/complete description of what the module is for, unique\n    features, how it is structured, and how to use it. Many details are\n    also in the Pod-only SQL::SyntaxModel::Language . v0.42 is the\n    latest release, and another will be out within days.\n\n    To summarize, SQL::SyntaxModel provides a rigorously structured and\n    atomic abstract syntax tree for all kinds of SQL statements,\n    including queries, data manipulation, schema manipulation,\n    transaction control, privileges, and connections. It is up to date\n    with the official SQL-2003 standard and can/does store complete\n    schema representations in atomic detail, with such schema objects\n    as: domains, sequence generators, tables, views, and routines\n    (procedures, functions, triggers), and also catalog objects like\n    multiple schemas and users. It also manages\n    \"client/app-side-schemas\" as well, namely SQL/objects that isn't\n    stored in a database catalog. SQL::SyntaxModel is designed with\n    multi-dbms/rdbms portability in mind, and can also track multiple\n    instances of the same catalog or application blueprints, such as for\n    when you want to migrate a database from one rdbms product to\n    another, or to manage testing plus production copies of a\n    database-using application.\n\n    SQL::SyntaxModel differs from all of the other solutions on CPAN\n    firstly in that it is a lot more complete and capable than any of\n    them. It does not cop out and require you to provide raw SQL\n    fragmants for commonly used things like where-clauses. It natively\n    supports queries of arbitrary complexity, including those with\n    multi-column keys and subqueries. It is highly normalized, and\n    stores exactly one copy of all identifiers, so you can rename one in\n    just one place and all references to it update automatically. It\n    does not have any built-in SQL parsing/generating functions, leaving\n    that up to external modules that would do it better; it is simply a\n    data structure. Moreover, depending on what database product you use\n    or how your application works, each could just read or write the\n    SQL::SyntaxModel directly rather than needing serialized-SQL to ever\n    exist; it's up to the user. External code could alternately generate\n    Perl code to do the same task as the SQL if they wanted to; it's\n    easy. My module exists in the same space, but is very different from\n    anything that came before.\n\n    SQL::SyntaxModel also has only one external dependency, which is\n    invoked just when throwing invalid-input exceptions, so installation\n    is easy. Said dependency makes SQL::SyntaxModel trivial to localize\n    (only English locale data is bundled). Some other modules have many\n    external dependencies, by contrast.\n\n    If there are any further questions, please write me directly, in\n    addition to replying to the modules@perl.org list."
   },
   "meta" : {
      "message_id" : "200409162219.i8GMJ2iv005340@pause.perl.org",
      "epoch" : 1095373142,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission SQL::SyntaxModel",
      "file" : "34875.txt",
      "type" : "module_submission"
   }
}
