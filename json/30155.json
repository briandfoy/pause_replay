{
   "data" : {
      "userid" : {
         "name" : "Jeremiah Jordan",
         "id" : "JJORDAN"
      },
      "description" : "Specify method typing and argument checking",
      "communities" : "cvs.faeriemud.org",
      "chapterid" : {
         "name" : "Perl_Core_Modules",
         "id" : "2"
      },
      "similar" : "Arguments Params::Validate",
      "DSLIP" : "bdpOp",
      "modid" : "Attribute::Method::Typeable",
      "enteredon" : "Mon Mar 29 00:27:09 2004 GMT",
      "enteredby" : {
         "name" : "Jeremiah Jordan",
         "id" : "JJORDAN"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Well, since the module is based on Damian Conway's\n    Attribute::Handlers, I figure it should be in that heirarchy. The\n    module is primarily for specifying method typing, so that's why I\n    named it Attribute::Method::Typeable. I've looked around, and\n    although there are many modules for argument checking, and a few for\n    method declarations, I find using Attribute::Handlers makes the\n    method declaration simple, clean and self explanatory:\n\n    sub foo :Public (ClassA, ClassB, literal, string) { # stuff }\n\n    sub bar :Private (integer o list) {}\n\n    sub bas :Constructor (HASH) {}\n\n    And it throws exceptions if the method/fuctions are called\n    incorrectly. Anyway, it seems like a very good module for people new\n    to programming or who come to perl from more strongly typed\n    languages."
   },
   "meta" : {
      "message_id" : "200403290027.i2T0R9XZ005214@pause.perl.org",
      "epoch" : 1080520029,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Attribute::Method::Typeable",
      "file" : "30155.txt",
      "type" : "module_submission"
   }
}
