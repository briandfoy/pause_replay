{
   "data" : {
      "userid" : {
         "name" : "Steffen Müller",
         "id" : "SMUELLER"
      },
      "description" : "Design-by-contract: pre- and postconditions",
      "communities" : "",
      "chapterid" : {
         "name" : "Development_Support",
         "id" : "3"
      },
      "similar" : "Carp::Assert Class::Contract",
      "DSLIP" : "Rdpfp",
      "modid" : "Sub::Assert",
      "enteredon" : "Tue May 27 10:25:02 2003 GMT",
      "enteredby" : {
         "name" : "Steffen Müller",
         "id" : "SMUELLER"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Basically, the module's functionality lies somewhere between that\n    of Carp::Assert and Class::Contract in that it replaces subroutines\n    with wrappers that test for pre- and postconditions and\n    (?:die|warn|croak|carp) in case any of them isn't met. Furthermore,\n    it allows to limit the calling context of the subroutine to either\n    scalar, list, novoid, void, or any context.\n\n    Carp::Assert is not directly related to subroutine calls.\n    Class::Contract is - well - an entirely different league. You can't\n    use the assertions functionality of Class::Contract without adopting\n    the whole C::C paradigm. Sub::Assert is aimed at providing useful\n    error messages as early as possible (read: late) regardless of what\n    kind of programming style you prefer. (Well, unless you prefer goto\n    over subroutines.)"
   },
   "meta" : {
      "message_id" : "200305271025.h4RAP2gK010686@pause.perl.org",
      "epoch" : 1054031102,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission Sub::Assert",
      "file" : "21330.txt",
      "type" : "module_submission"
   }
}
