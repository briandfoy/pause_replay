{
   "data" : {
      "userid" : {
         "name" : "David Golden",
         "id" : "DAGOLDEN"
      },
      "description" : "Framework for statistical/bayesian mail sort",
      "communities" : "comp.lang.perl.modules; Mail::Box mailing list",
      "chapterid" : {
         "name" : "Mail_and_Usenet_News",
         "id" : "19"
      },
      "similar" : "Mail::SpamTest::Bayesian AI:Categorizer",
      "DSLIP" : "adpOp",
      "modid" : "Mail::Classifier",
      "enteredon" : "Tue Jan 14 19:53:08 2003 GMT",
      "enteredby" : {
         "name" : "David Golden",
         "id" : "DAGOLDEN"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "The goal of Mail::Classifier is to facilitate rapid creation,\n    testing, and tuning of mail classification algorithms, such as the\n    newly popularized Naive Bayesian methods. Unlike other modules, this\n    module is both more specific around processing mail and more broad\n    by providing utility routines useful for developers of new/hybrid\n    approaches. Primary functionality of the abstract base class is mail\n    box and message handling (leveraging capabilities of Mail::Box),\n    data persistence, optional on-disk or in-memory data table storage,\n    and statistical validation of classifier performance.\n\n    Compared to Mail::SpamTest::Bayesian, Mail::Classifier is more\n    general -- it is not restricted to spam identification nor the\n    Bayesian approach. As a framework, it will support derived classes\n    that can handle any number of categories of mail and which implement\n    any of a number of algorithms or hybrids. (Indeed, one could write\n    Mail::Classifier::SpamTest::Bayesian to use Mail::SpamTest::Bayesian\n    as the implementation behind the scenes.)\n\n    Compared to AI::Categorizer, Mail::Classifier is more specific to\n    the task of processing e-mail, whereas AI::Categorizer is a broader\n    package more \"academic\" in nature and jargon and more useful, in my\n    opinion, for research than for people wanting to hack around with\n    mail sorting because of its higher learning curve. Mail::Classifier\n    is designed to be much simpler to use and extend. Derived classes\n    need only implement the specific methods that are core to an\n    algorithm (parse(), learn(), score(), and a few simple helper\n    methods to manage algorithm-specific data). Included examples\n    demonstrate both a trivial (near-random) method and the \"Paul\n    Graham\" Bayesian approach as a jumping off point for people to\n    develop and test their own ideas and methods."
   },
   "meta" : {
      "message_id" : "200301141953.h0EJr9d19130@pause.perl.org",
      "epoch" : 1042573989,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission Mail::Classifier",
      "file" : "16971.txt",
      "type" : "module_submission"
   }
}
