{
   "data" : {
      "userid" : {
         "name" : "Henning Koch",
         "id" : "HKOCH"
      },
      "description" : "Third millenium syntax for Perl 5 OOP",
      "communities" : "http://www.netalive.org/swsu/",
      "chapterid" : {
         "name" : "Perl_Core_Modules",
         "id" : "2"
      },
      "similar" : "rubyisms",
      "DSLIP" : "bdppa",
      "modid" : "reform",
      "enteredon" : "Mon Sep 13 17:06:40 2004 GMT",
      "enteredby" : {
         "name" : "Henning Koch",
         "id" : "HKOCH"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Hello!\n\n    The PAUSE site has asked me to provide a rationale for the\n    barefaced atrocity of claiming a new rootlevel namespace \"reform\",\n    so here it is:\n\n    reform is a module that facilitates some of the most basic tasks in\n    OOP with Perl. For a detailled list of what reform does please see\n    the synopsis at\n\n    http://www.netalive.org/tinkering/reformed-perl/reform-0.1/html/reform.html\n\n    The rootlevel namespace was chosen because of reform's pragma-ish\n    nature. The module gently changes (reform-ulates!) very basic Perl\n    syntax such as the declaration of subroutine parameters and\n    inheritance. Where necessary it does so through source filtering,\n    which is known to be frowned up by those who believe that Perl shall\n    only be extended by hacking its native syntax (thus 'reform' as in\n    \"to improve the old ways\").\n\n    Should someone decide to use reform in a project, I expect them to\n    use it pragma-style at the top of every package in that project: The\n    use of reform doesn't make a lot of sense on a class-to-class basis\n    in one project, as it provides a basic extension of universal\n    functionality.\n\n    I was also asked to discuss the relation between reform and\n    rubyisms (which with all its similiarity also occupies a rootlevel\n    namespace):\n\n    I began this module as an extension to Simon Cozens' rubyisms, but\n    found Simon's implementation of Ruby's \"super\" lacking.\n    rubyisms::super doesn't allow to pass a custom set of parameters and\n    won't work within constructors. Also - as in Ruby - it doesn't allow\n    to call a base class method other than the one calling \"super\".\n\n    I chose to not simply contribute to rubyisms as\n\n    - Some parts of reform.pm could only be realized through a source\n    filter and rubyisms is supposed to work in unfiltered Perl\n\n    - I didn't want to limit reform's functionality to mimicing that of\n    Ruby\n\n    This being my first submission to CPAN, I assume it is now your\n    turn to gun down my proposal.\n\n    - Henning"
   },
   "meta" : {
      "message_id" : "200409131706.i8DH6lEg010267@pause.perl.org",
      "epoch" : 1095095207,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission reform",
      "file" : "34725.txt",
      "type" : "module_submission"
   }
}
