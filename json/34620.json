{
   "data" : {
      "userid" : {
         "name" : "Charles N. Owens",
         "id" : "CZBSD"
      },
      "description" : "Full featured object-oriented app framework",
      "communities" : "http://sourceforge.net/projects/myco/,\n    tangram-t2-maintainers@hottub.perlfect.com",
      "chapterid" : {
         "name" : "Development_Support",
         "id" : "3"
      },
      "similar" : "we extend Tangram, Class::Tangram and others",
      "DSLIP" : "bmpOa",
      "modid" : "Myco",
      "enteredon" : "Thu Sep  9 12:26:38 2004 GMT",
      "enteredby" : {
         "name" : "Charles N. Owens",
         "id" : "CZBSD"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Note that this module was submitted in Dec-03 but then deleted (I\n    realized it just wasn't ready). My original namespace request:\n\n    http://www.xray.mpe.mpg.de/mailing-lists/modules/2003-12/msg00279.html\n\n    Namespace rationale: This is a broad framework... forming an\n    umbrella over many other modules. Its breadth is only going to\n    expand over time. As such, it can be argued that it is in a category\n    unto itself. Also, a number of key class methods in the API need to\n    be easily accessible... having a short, pithy class name for these\n    methods really makes a big difference in keeping users' code clean.\n\n    Thanks, Charles N. Owens (CZBSD)\n\n    *About the myco framwork:*\n\n    (Also visible at http://www.enc.edu/~owensc/Myco.html)\n\n    Our goal has been to create a rich framework that provides\n    end-to-end support for the object-oriented application developer,\n    freeing them to focus more effectively on application-specific\n    end-user features.\n\n    The Myco framework supports:\n\n    * Object \"lifecycle\" services: o accessors o data validation o\n    persistence o templates (similar to Java interfaces) o metadata\n    (a.k.a. \"introspection\") o role-based access control o logging *\n    Unit testing * Metadata driven user interfaces (a\n    Model-View-Controller implementation, usable in both HTML::Mason and\n    cgi script contexts) * And more... (\"but wait...that's not all\")\n\n    Read on for a glimpse of the Myco API in action.\n\n    All Myco entity classes are subclasses of Myco::Base::Entity. This\n    grants the entity class a rich set of functionality, accessible via\n    a clean consistent interface. Here's some sample code showing a\n    synopsis of how one interfaces with a Myco entity class:\n\n    use Myco::Foo; # a Myco entity class\n\n    # Constructor $obj = Myco::Foo->new; $obj = Myco::Foo->new(attr1 =>\n    value, attr2 => value);\n\n    # Access class metadata (see Myco::Base::Entity::Meta) $meta =\n    Myco::Foo->introspect; $meta = $obj->introspect;\n\n    # Accessors $obj->get_attr1; # get attribute value\n    $obj->set_attr1('value'); # set attribute value\n\n    # Instance methods $id = $obj->save; # update object's state in\n    persistent # storage, create new record if needed; # returns\n    object's Tangram id $obj->destroy; $obj->modify(attr1 => val, attr2\n    => val); $object_id = $obj->id; $obj->is_transient; # returns true\n    if object is in Tangram # transient storage\n\n    ## object retrieval (see class Myco documentation # for full\n    detail)\n\n    $obj = Myco->load($object_id);\n\n    # fetch all objects of given type @objects = Myco->select(ref\n    $obj); # this select() could also include a Tangram filter\n\n    Entity class definition\n\n    package Myco::Foo; use base qw(Myco::Base::Entity);\n\n    # Start building metadata my $metadata =\n    Myco::Base::Entity::Meta->new ( name => __PACKAGE__, tangram => {\n    table => 'Foo' } );\n\n    $metadata->add_attribute(name => 'attr1', type => 'string');\n    $metadata->add_attribute(name => 'attr2', type => 'string', ...);\n\n    # class-specific methods defined ... #\n\n    # Fill in $schema with all added_attributes and discover other\n    metadata $metadata->activate_class;"
   },
   "meta" : {
      "message_id" : "200409091226.i89CQdsO028653@pause.perl.org",
      "epoch" : 1094732799,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Myco",
      "file" : "34620.txt",
      "type" : "module_submission"
   }
}
