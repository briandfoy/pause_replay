{
   "data" : {
      "userid" : {
         "name" : "Joshua ben Jore",
         "id" : "JJORE"
      },
      "description" : "Create methods from components",
      "communities" : "http://www.perlmonks.org/index.pl?node_id=252199,\n    http://www.perlmonks.org/index.pl?node_id=251908",
      "chapterid" : {
         "name" : "Data_Type_Utilities",
         "id" : "6"
      },
      "similar" : "Class::Delegation Hook::WrapSub Hook::PrePostCall Hook::LexWrap",
      "DSLIP" : "Rdpfp",
      "modid" : "Class::CompoundMethods",
      "enteredon" : "Tue Apr 22 21:48:02 2003 GMT",
      "enteredby" : {
         "name" : "Joshua ben Jore",
         "id" : "JJORE"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "The other modules take a method \"wrapper\" approach while the\n    expectation with Class::CompoundMethods is that the method does not\n    exist and must be created from components. This can be accomplished\n    with other modules by either the use of string eval\n    (Class::Delegation), empty stub methods (the other wrappers).\n\n    The Hook:: modules can approximate this module if you apply them to\n    an empty, stub function. This module doesn't require the stub."
   },
   "meta" : {
      "message_id" : "200304222148.h3MLm2fQ027161@pause.perl.org",
      "epoch" : 1051048082,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission Class::CompoundMethods",
      "file" : "20598.txt",
      "type" : "module_submission"
   }
}
