{
   "data" : {
      "userid" : {
         "name" : "Stevan Little",
         "id" : "STEVAN"
      },
      "description" : "A basic Iterator class, built to be extended",
      "communities" : "",
      "chapterid" : {
         "name" : "Control_Flow_Utilities",
         "id" : "20"
      },
      "similar" : "Data::Iter, Class::Iterator, and numerous *::Iterator modules",
      "DSLIP" : "adpOp",
      "modid" : "Iterator",
      "enteredon" : "Thu Mar 18 19:22:41 2004 GMT",
      "enteredby" : {
         "name" : "Stevan Little",
         "id" : "STEVAN"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "I am proposing a new root level namespace called Iterator::.\n\n    There seems to me to be no base class for Iterators, but tons of\n    Iterator classes. I am not proposing to create across the board\n    consistency, but instead a base class, built for extension, which\n    could be used to create interchangeable and consistent iterators.\n    Yes, yes interface polymorphism is what I am getting at. I know some\n    might argue that with 'foreach', 'map', 'grep', and 'each', there\n    already exists iterator like constructs in the perl language itself,\n    so why do we need anything else. But that neglects the needs of more\n    complex structures.\n\n    This is nothing revolutionary for sure, but I think it is something\n    the community could benefit from. I have suggested to place this\n    under \"Control Flow Utilities\", but it could also possibly fit under\n    \"Data and Data-Types\" I think.\n\n    Thank you for your consideration,\n\n    Stevan Litle stevan@iinteractive.com"
   },
   "meta" : {
      "message_id" : "200403181922.i2IJMhSe027110@pause.perl.org",
      "epoch" : 1079637763,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Iterator",
      "file" : "29596.txt",
      "type" : "module_submission"
   }
}
