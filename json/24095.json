{
   "data" : {
      "userid" : {
         "name" : "Earl Cahill",
         "id" : "EARL"
      },
      "description" : "aids in traversing one or more paths",
      "communities" : "",
      "chapterid" : {
         "name" : "World_Wide_Web_HTML_HTTP_CGI",
         "id" : "15"
      },
      "similar" : "CGI::Application",
      "DSLIP" : "bdpOp",
      "modid" : "CGI::Path",
      "enteredon" : "Mon Oct 20 23:15:18 2003 GMT",
      "enteredby" : {
         "name" : "Earl Cahill",
         "id" : "EARL"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "This module came from rewriting the signup process at my work.\n\n    We needed to be able to jump in at various parts of the path, go\n    forwards and backwards, be able to change information along the way,\n    remember everything that users entered, do sometimes complex\n    validation, do third party api validation along the way, work in\n    secure, keep track of entered information for later page prints,\n    etc. Also had to be able to potentially override how each step might\n    act.\n\n    CGI::Path was written to achieve these goals. By default CGI::Path\n    uses Apache::Session for handling session, XML::Simple for\n    validation references, Embperl::Form::Validate for client and server\n    side validation using the xml references, Template Template for\n    displaying results. However each of the above is (hopefully) modular\n    enough to change. Like, using your own conf format instead of xml,\n    or your own validation system, or Embperl for templating.\n\n    The user defines a sequence of steps for their path, .htm files\n    (template toolkit'able files), and .val files which explain the\n    validation needed for each step.\n\n    CGI::Path contains a series of hooks, and using cans, tests to see\n    if the user has written their own methods for their hooks. Such a\n    system means the user only write what he really needs to have\n    different. I have found that many paths can rely on the default\n    methods to gather the data, then a simple method to do something\n    with the data at the end of the path. A simple path where the user\n    enter information for an email, confirms the email and then sends\n    the email, can be handled with just a couple of subs written, along\n    with the htm and val files.\n\n    We have been using this system on our live system for several\n    months. We have received millions of hits and processed hundreds of\n    thousands signups. Using the system I have been able to rather\n    easily maintain a rather complex signup process. Once the series of\n    hooks is understood, it is an easy thing to determine where a new\n    thing would go, add the sub in the appropriate place and have it\n    just start working."
   },
   "meta" : {
      "message_id" : "200310202315.h9KNFJIs017805@pause.perl.org",
      "epoch" : 1066691719,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission CGI::Path",
      "file" : "24095.txt",
      "type" : "module_submission"
   }
}
