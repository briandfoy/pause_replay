{
   "data" : {
      "userid" : {
         "name" : "Randall Hansen",
         "id" : "LEGLESS"
      },
      "description" : "Simple validation of CGI params & runmodes",
      "communities" : "A wiki at: http://sonofhans.net/cgi-validop/kwiki; if there's enough\n    interest I'll setup a mailing list.",
      "chapterid" : {
         "name" : "World_Wide_Web_HTML_HTTP_CGI",
         "id" : "15"
      },
      "similar" : "CGI::AppToolkit CGI::Application CGI::Application::RM\n    Data::FormValidator CGI::Validate Params::Check CGI::Untaint\n    CGI::ArgChecker String::Checker",
      "DSLIP" : "adpOp",
      "modid" : "CGI::ValidOp",
      "enteredon" : "Mon Sep 29 01:37:52 2003 GMT",
      "enteredby" : {
         "name" : "Randall Hansen",
         "id" : "LEGLESS"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "I have a longish page on the module's Wiki\n    (http://sonofhans.net/cgi-validop/kwiki/index.cgi?SimilarModules)\n    that reviews all of the afore-mentioned related modules in some\n    detail. Trying to err on the side of not clogging the list with\n    minutiae, I'll reproduce only my conclusions here:\n\n    It seems to me that no existing modules combine CGI::ValidOp's best\n    features:\n\n    - Easy-to-learn and simple API. - Relation of parameters to\n    run-modes/operations. - Minimal usage is easy and useful; complex\n    usage is easy and powerful. - Robust set of validation criteria\n    (e.g. max/min length, data type, required/optional, custom error\n    messages). - Validation defaults settable on many levels to minimize\n    repetition. - Extensible validation with coderefs or regexes. -\n    Error messages on a per-parameter basis; also available globally.\n\n    Other modules do similar parsing, and perhaps do it better. These\n    are good candidates for subclassing or integration, but don't affect\n    the namespace of CGI::ValidOp or its usefulness as a standalone\n    module.\n\n    The name itself -- ValidOp -- sounds good to me, but I'm open to\n    suggestions.\n\n    CGI::Validate is a good module, and I could perhaps instantiate it\n    individually for each operation/runmode, but see the 'Challenges to\n    integration' section. In a perfect world, CGI::ValidOp could perhaps\n    be CGI::Validate::Op, but this would require many changes in scope\n    and philosophy to both modules. I'll start a conversation with\n    Byron, CGI::Validate's author, so we'll see how it goes."
   },
   "meta" : {
      "message_id" : "200309290137.h8T1bt3a030239@pause.perl.org",
      "epoch" : 1064799475,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission CGI::ValidOp",
      "file" : "23763.txt",
      "type" : "module_submission"
   }
}
