{
   "data" : {
      "userid" : {
         "name" : "Darren Duncan",
         "id" : "DUNCAND"
      },
      "description" : "Refer to user messages in programs by keys",
      "communities" : "modules@perl.org",
      "chapterid" : {
         "name" : "Internationalization_Locale",
         "id" : "13"
      },
      "similar" : "Locale::Maketext, Locale::gettext, Locale::PGetText, DBIx::BabelKit",
      "DSLIP" : "bdpOl",
      "modid" : "Locale::KeyedText",
      "enteredon" : "Wed Jan 21 01:17:47 2004 GMT",
      "enteredby" : {
         "name" : "Darren Duncan",
         "id" : "DUNCAND"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "I have already uploaded this module, fully tested and documented,\n    on CPAN; that should say what it does and how it works.\n\n    A short answer for ways my module is distinct:\n\n    1. My module is quite simple and currently pure perl; the code is\n    only 5K in size (any other weight is the documentation or tests) and\n    has no external dependencies. It knows nothing about word/phrase\n    plurality. 2. All message keys in the lexicon are not meant to be\n    human readable, so if you ever want to change what the user sees,\n    you don't have to change copies in the code too. 3. All variables in\n    lexicon messages are named rather than positional; this means that\n    the code doesn't have to make separate calls for each language when\n    the same variables appear in different orders. 4. My module can\n    handle lexicons based on criteria other than user language; for\n    example, developing user vs end user (eg: the code can spit out many\n    variable values with useful info; the first user type would show\n    them all, the other would show less; the code doesn't have to know).\n    5. Multiple lexicons can be combined from different sources, and one\n    (eg, with a main program) can override parts of another (eg, a\n    library the program uses). 6. There are other differences.\n\n    A slightly longer or different answer:\n\n    One of the main distinctions of my module over similar modules is\n    that text is always looked up by a key which is not meant to be\n    meaningful for a user. Whereas, with the other modules like\n    \"gettext\" it looks like you are supposed to pass in english text and\n    they translate it, which could produce ambiguous results or\n    associations. Or alternately, the other modules require your text\n    data to be stored in a format other than Perl files. Or alternately\n    they have a compiled C component or otherwise have external\n    dependencies; Locale::KeyedText has no external dependencies (it is\n    very simple). There are other differences. Where other solutions\n    take variables, they seem to be positional (like with 'sprintf');\n    whereas, Locale::KeyedText has named variables, which can be used in\n    any order, or not used at all, or used multiple times.\n    Locale::KeyedText is generally a simpler solution than alternatives,\n    and doesn't know about language specific details like encodings or\n    plurality."
   },
   "meta" : {
      "message_id" : "200401210117.i0L1HmPE023898@pause.perl.org",
      "epoch" : 1074647868,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Locale::KeyedText",
      "file" : "25829.txt",
      "type" : "module_submission"
   }
}
