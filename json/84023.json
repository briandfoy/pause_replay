{
   "data" : {
      "userid" : {
         "name" : "Stanisław Klekot",
         "id" : "DOZZIE"
      },
      "description" : "config container for command-line apps",
      "communities" : "comp.lang.perl.modules",
      "chapterid" : {
         "name" : "Opt_Arg_Param_Proc",
         "id" : "12"
      },
      "similar" : "App::Options, AppConfig",
      "DSLIP" : "RdpOp",
      "modid" : "App::Getconf",
      "enteredon" : "Fri Jan  4 00:42:36 2013 GMT",
      "enteredby" : {
         "name" : "Stanisław Klekot",
         "id" : "DOZZIE"
      },
      "locals)" : "it's defined elsewhere and programmer needs to remember not",
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "The module is meant as a config container for command-line\n    applications. Configuration options may be set from command line or\n    configuration file.\n\n    The module provides a way of passing options down the function call\n    stack. Traditional way of doing this is to either use global\n    variable(s) or to pass config container as argument to each\n    function. * global variable has a drawback of introducing name of a\n    variable that is treated differently than most of the others (i.e.\n    locals): it's defined elsewhere and programmer needs to remember not\n    to use the name * passing container as argument is tedious, as\n    programmer needs to pass it to every function, even if it doesn't\n    use options directly\n\n    App::Getconf uses approach similar to Log::Log4perl: it provides a\n    static method that returns option container (actually, a view of the\n    options)."
   },
   "meta" : {
      "message_id" : "201301040042.r040gagb017350@pause.fiz-chemie.de",
      "epoch" : 1357260156,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission App::Getconf",
      "file" : "84023.txt",
      "type" : "module_submission"
   }
}
