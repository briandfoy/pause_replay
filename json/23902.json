{
   "data" : {
      "userid" : {
         "name" : "Eric Wilhelm",
         "id" : "EWILHELM"
      },
      "description" : "Flexible Vector Geometry Composition in Perl",
      "communities" : "module-authorsATperl.org, pythoncadATpython.org,\n    cad-linux-devATfreelists.org, comp.lang.perl.modules",
      "chapterid" : {
         "name" : "Images_Pixmaps_Bitmaps",
         "id" : "18"
      },
      "similar" : "",
      "DSLIP" : "cdpOp",
      "modid" : "CAD::Drawing",
      "enteredon" : "Wed Oct  8 02:06:43 2003 GMT",
      "enteredby" : {
         "name" : "Eric Wilhelm",
         "id" : "EWILHELM"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "There are currently no modules available for loading and\n    manipulating geometric data from dxf and dwg formats. This module\n    does this and much more, providing a quick and consistent interface\n    regardless of source or destination format. It encapsulates what I\n    think is a robust and flexible data structure for 2D geometric data.\n\n    It currently supports loading and saving dwg and dxf formats via\n    the openDWG toolkit. Saving is also possible to Image::Magick\n    formats and to postscript (via PostScript::Simple.) The driving idea\n    behind this module is to unify the interface to multiple\n    file-formats and encapsulate the geometric data in an organized way.\n    Adding support for other file types is just a matter of writing a\n    load or save function for that type and will not change the\n    programming interface.\n\n    Entity selection and tracking is available through the use of hash\n    references which act as addresses. Any manipulation function (move,\n    copy, rotate, clone, mirror, clip, offset, delete) can operate on an\n    entity (point, line, arc, circle, text, polyline) using only the\n    address. This trivializes the writing of programs which deal with\n    multiple drawings and formats and prevents errors and omissions when\n    dealing with multiple entity types. It has been developed for use in\n    batch-processing, but also makes geometric one-liners possible and\n    would work well for prototyping cad software (though it currently\n    has no gui components.)"
   },
   "meta" : {
      "message_id" : "200310080206.h9826idr013081@pause.perl.org",
      "epoch" : 1065578804,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission CAD::Drawing",
      "file" : "23902.txt",
      "type" : "module_submission"
   }
}
