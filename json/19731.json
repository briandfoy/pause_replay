{
   "data" : {
      "Wigitization" : "------------ Thanks to their ability to preprocess",
      "userid" : {
         "name" : "David Wheeler",
         "id" : "DWHEELER"
      },
      "description" : "Execute code before Mason components",
      "communities" : "mason-users@lists.sourceforge.net",
      "chapterid" : {
         "name" : "World_Wide_Web_HTML_HTTP_CGI",
         "id" : "15"
      },
      "similar" : "MasonX::Request::WithApacheSession",
      "DSLIP" : "bmpOp",
      "modid" : "MasonX::ApacheHandler::WithCallbacks",
      "enteredon" : "Mon Mar 24 16:31:02 2003 GMT",
      "enteredby" : {
         "name" : "David Wheeler",
         "id" : "DWHEELER"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "This module allows callbacks to be triggered by form field names\n    (or other Mason arguments) before any Mason components are loaded\n    and executed by Mason. Why would you want to do this? Well, there\n    are a number of reasons. Some I can think of offhand include:\n\n    Stricter separation of logic from presentation:\n    ---------------------------------------------- Most application\n    logic handled in Mason components takes place in <%init> blocks,\n    often in the same component as presentation logic. By moving the\n    application logic into subroutines in Perl modules and then\n    directing Mason to execute those subroutines as callbacks, you\n    obviously benefit from a cleaner separation of application logic and\n    presentation.\n\n    Wigitization: ------------ Thanks to their ability to preprocess\n    arguments, callbacks enable developers to develop easier-to-use,\n    more dynamic widgets that can then be used in any Mason components.\n    For example, a widget that puts many related fields into a form\n    (such as a date selection widget) can have its fields preprocessed\n    by a callback (for example, to properly combine the fields into a\n    unified date field) before the Mason component that responds to the\n    form submission gets the data.\n\n    Shared Memory ------------- Callbacks are just Perl subroutines in\n    modules loaded at server startup time. Thus the memory they consume\n    is all in the parent, and then shared by the Apache children. For\n    code that executes frequently, this can be much less\n    resource-intensive than code in Mason components, since components\n    are loaded separately in each Apache child process (unless they're\n    preloaded via the preloads parameter to the HTML::Mason::Interp\n    constructor).\n\n    Performance ----------- Since callbacks are executed before Mason\n    creates a component stack and executes the components, they have the\n    opportunity to short-circuit the Mason processing by doing something\n    else. A good example is redirection. Often the application logic in\n    callbacks does its thing and then redirects the user to a different\n    page. Executing the redirection in a callback eliminates a lot of\n    extraneous processing that would otherwise be executed before the\n    redirection, creating a snappier response for the user.\n\n    Testing ------- Mason components are not easy to test via a testing\n    framework such as Test::Harness. Subroutines in modules, on the\n    other hand, are fully testable. This means that you can write tests\n    in your application test suite to test your callback subroutines.\n\n    And if those are enough reasons, then just consider this: Callbacks\n    just way cool."
   },
   "meta" : {
      "message_id" : "200303241631.h2OGV2u08601@pause.perl.org",
      "epoch" : 1048523462,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission MasonX::ApacheHandler::WithCallbacks",
      "file" : "19731.txt",
      "type" : "module_submission"
   }
}
