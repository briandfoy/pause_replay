{
   "data" : {
      "userid" : {
         "name" : "Victor Porton",
         "id" : "PORTON"
      },
      "description" : "Advanced database transactions with DBI",
      "communities" : "",
      "chapterid" : {
         "name" : "Database_Interfaces",
         "id" : "7"
      },
      "similar" : "",
      "DSLIP" : "cdphg",
      "modid" : "DBI::Transaction",
      "enteredon" : "Thu Jan 27 19:51:26 2005 GMT",
      "enteredby" : {
         "name" : "Victor Porton",
         "id" : "PORTON"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "It is two packages in one .tar.gz:\n\n    DBI::Transaction - advanced object-oriented support for database\n    transactions. It can do \"subtransactions\" (transactions which are\n    parts of other transactions).\n\n    DBI::Transaction::Repeated - repeat database transaction until\n    success.\n\n    At the first glance it may seem that\n\n    local $dbh->{AutoCommit} = 0;\n\n    is enough for implementing transactions. But for subtle reasons\n    (which I now don't spend time to explain), it is not enough. But\n    instead special OO-style module DBI::Transaction is needed.\n\n    DBI::Transaction is the name for OO class for transactions in DBI.\n    I wrote it, THOROUGHLY thought about the API, made it sophisticated\n    as true OO style requires (Oh, I enumerated in my mind and had\n    thrown away many variants which at first glance may seem better but\n    are broken or not well fit with actual specification of DBI) and\n    implemented it (well, pre-alpha).\n\n    If you don't suffice with my reasoning that it cannot be simple but\n    should be complex as for support of subtransactions which are paarts\n    of other transactions etc., write broken DBI::Transaction::Simple or\n    use broken \"local $dbh->{AutoCommit} = 0;\". (Well, it may be\n    reasonable when you need higher performance than my complex module.)\n\n    Well, who don't want to use my module, can use \"local\n    $dbh->{AutoCommit} = 0;\" and keep his problems.\n\n    This module should be listed at least for the reason that it\n    revolutionarizes DB transactions in Perl programming, including\n    repeated transactions with MySQL / InnoDB :-) Well, I wrote this\n    module for a real work on a Web site. \"local $dbh->{AutoCommit} =\n    0;\" and this module is needed for correct reliable database\n    transactions processing written in modular OO-ish style.\n\n    See more at http://ex-code.com/dbi-transactions/"
   },
   "meta" : {
      "message_id" : "200501271951.j0RJpVHB029690@pause.perl.org",
      "epoch" : 1106855491,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission DBI::Transaction",
      "file" : "37987.txt",
      "type" : "module_submission"
   }
}
