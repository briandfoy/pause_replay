{
   "data" : {
      "userid" : {
         "name" : "Andrew Chadwick",
         "id" : "ANDREWC"
      },
      "description" : "Apply one or more Algorithm::Diff diffs",
      "communities" : "comp.lang.perl.modules",
      "chapterid" : {
         "name" : "Data_Type_Utilities",
         "id" : "6"
      },
      "similar" : "Algorithm::Diff Algorithm::Merge",
      "DSLIP" : "Rdpfp",
      "modid" : "Algorithm::Diff::Apply",
      "respect" : "you can apply the diffs from an original array and one or",
      "enteredon" : "Wed May 21 13:30:44 2003 GMT",
      "enteredby" : {
         "name" : "Andrew Chadwick",
         "id" : "ANDREWC"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "* Name\n\n    This is a resubmission of Algorithm::ApplyDiffs, which I originally\n    submitted on Mon, 5 May 2003. After discussion with Ned Konz, the\n    maintainer of Algorithm::Diff, and Arthur Bergman, I've decided to\n    settle on Algorithm::Diff::Apply as the complete name of this\n    module.\n\n    * Other modules\n\n    ** Algorithm::Diff\n\n    A::D::Apply applies the diff sequences generated by diff() in this\n    module. Algorithm::Diff does not contain a routine for applying diff\n    sequences.\n\n    ** Algorithm::Merge\n\n    Features a diff3() and a merge(), which you could argue does the\n    same thing as A::Diff + A::Diff::Apply. However A::Merge::merge()\n    only merges the three-way differences between an original and two\n    descendent revisions. A::D::Apply's routines are not limited in this\n    respect: you can apply the diffs from an original array and one or\n    more descendents together, albeit at the risk of harder-to-solve\n    conflicts appearing.\n\n    Like Alg.::Merge, Alg.::ApplyDiffs has a conflict-resolution\n    callback which can be used to resolve conflicts during application,\n    or just inject conflict markers.\n\n    * Future\n\n    Now the fun bit. I plan to work the Alg.::ApplyDiffs code so that\n    it can reduce conflicts. There are even certain cases that can be\n    optimised away cleanly:\n\n    >>>>>> src_diff_x Hello world >>>>>> src_diff_y Hello world <<<<<<\n\n    for example. Currently it spits that out as a conflict, even though\n    it patently isn't: all derived revisions contain the same text at\n    the same point.\n\n    A::D::Apply's diff-based approach lends itself to greater analysis\n    and optimisation.\n\n    * Discussion\n\n    I've floated this once on comp.lang.perl.modules, and will make a\n    proper announcement there once it's finalised.\n\n    I've contacted the aothors of both other modules, and Ned Konz has\n    responded. He's happy with my parking A::D::Apply under his\n    namespace.\n\n    So response from anyone else, so I'm concluding from this that they\n    don't have any problem -- or rather, that they have no explicit\n    objections with my uploading this module."
   },
   "meta" : {
      "message_id" : "200305211330.h4LDUi39007307@pause.perl.org",
      "epoch" : 1053523844,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission Algorithm::Diff::Apply",
      "file" : "21260.txt",
      "type" : "module_submission"
   }
}
