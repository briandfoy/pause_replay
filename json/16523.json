{
   "data" : {
      "userid" : {
         "name" : "John M. Dlugosz",
         "id" : "DLUGOSZ"
      },
      "description" : "Improved Exporter with Versioning and Alias",
      "communities" : "perlmonks.org",
      "chapterid" : {
         "name" : "Perl_Core_Modules",
         "id" : "2"
      },
      "similar" : "Exporter",
      "DSLIP" : "Rdphp",
      "modid" : "Exporter::VA",
      "enteredon" : "Mon Dec 30 19:26:13 2002 GMT",
      "enteredby" : {
         "name" : "John M. Dlugosz",
         "id" : "DLUGOSZ"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Exporter::VA.pm is a Perl module that is a replacement for the\n    traditional Exporter module.\n\n    I wanted to rewrite a couple simple modules to make them more\n    capable, and I also wanted to remove the default exports. After all,\n    the new way would be object-oriented. It would still have the\n    function call for compatibility, but we don't want it as a default.\n    I figured playing around with VERSION and Exporter's export_to_level\n    would do the trick, but it was not simple. I did in fact redo two\n    modules, but the compatibility mode stuff stalled me.\n\n    Finally, I realized that the remove-default-exports issue should be\n    a reusable module in itself. After poking around and finding\n    Exporter lacking, I decided to write an exporter from scratch. I\n    called it VA for \"Versioning and Aliasing\", the major features that\n    distinguish it and provide it's reason for being.\n\n    I figued I needed a more general-purpose engine that could export\n    things (not just named things, but generated things) from a module\n    to a possibly-different name. Going from a named item to the same\n    name is simply too restrictive. Generalize it, and anything is\n    possible. That gave the Alias concept. Then I needed to be able to\n    specify different definitions for different versions. I thought\n    about totally different data structures for each version, but\n    realized that they would have a lot in common and I really only want\n    to give the changes. The interface to this was the hardest part of\n    the process.\n\n    The concept is pretty open-ended, and it would not do to have\n    something unruly. Limiting it to versioned names and versioned tags\n    in a single hash prooved to be workable, and the programmatic\n    interface is still available for \"anything else\". It is designed to\n    be extended, treating the derived class user as another potentional\n    customer and providing documentation and a proper interface for this\n    purpose.\n\n    I got some valuable feedback and ideas on the Perl Monks site.\n    Finally, Exporter::VA was the result."
   },
   "meta" : {
      "message_id" : "200212301926.gBUJQDU04038@pause.perl.org",
      "epoch" : 1041276373,
      "from" : "upload@p11.speed-link.de",
      "subject" : "Module submission Exporter::VA",
      "file" : "16523.txt",
      "type" : "module_submission"
   }
}
