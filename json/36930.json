{
   "data" : {
      "userid" : {
         "name" : "Scott McCoy",
         "id" : "TAG"
      },
      "description" : "Boss session for managing Worker threads",
      "communities" : "#poe@magnet",
      "chapterid" : {
         "name" : "Networking_Devices_IPC",
         "id" : "5"
      },
      "similar" : "Thread::Pool",
      "DSLIP" : "bdpOo",
      "modid" : "POE::Component::Pool::Thread",
      "enteredon" : "Wed Dec  8 06:40:55 2004 GMT",
      "enteredby" : {
         "name" : "Scott McCoy",
         "id" : "TAG"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "This is a thread pool managed by a POE Session, it allows POE to\n    maintain control over its thread while communicating to worker\n    threads in a cooperative fasion. Threads are given their jobs\n    through thread-safe queues. Events marking the completion of an\n    assigned task are communicated back to POE via a one way pipe.\n    Results of said task are optionally provided via a seperate thread\n    safe queue. A thread safe semaphore is used to keep track of threads\n    that are currently busy, and an preemptive expansion method is used\n    to keep an optional number of spare threads around, up to an\n    optional maximum number of threads. Any further tasks are placed in\n    an internal queue, and assigned to free threads as thier jobs are\n    completed.\n\n    Thread::Pool does pretty much the same thing in a manner that is\n    not suitable for POE applications. To my knowledge nothing like this\n    currently exists, and I know nothing that accomplishes this task is\n    listed in CPAN."
   },
   "meta" : {
      "message_id" : "200412080640.iB86ewdl024627@pause.perl.org",
      "epoch" : 1102488058,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission POE::Component::Pool::Thread",
      "file" : "36930.txt",
      "type" : "module_submission"
   }
}
