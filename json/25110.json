{
   "data" : {
      "userid" : {
         "name" : "Charles N. Owens",
         "id" : "CZBSD"
      },
      "description" : "Full featured object-oriented app framework",
      "communities" : "http://sourceforge.net/projects/myco/\n    tangram-t2-maintainers@hottub.perlfect.com",
      "chapterid" : {
         "name" : "Development_Support",
         "id" : "3"
      },
      "similar" : "we extend Tangram Class::Tangram and others",
      "DSLIP" : "bdpOp",
      "modid" : "Myco",
      "enteredon" : "Wed Dec 17 17:13:45 2003 GMT",
      "enteredby" : {
         "name" : "Charles N. Owens",
         "id" : "CZBSD"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Our goal has been to create a rich framework that provides\n    end-to-end support for the object-oriented application developer,\n    freeing them to focus more effectively on application-specific\n    end-user features.\n\n    The Myco framework supports:\n\n    * object \"lifecycle\" services: accessors data validation\n    persistence templates (similar to Java interfaces) metadata (a.k.a.\n    \"introspection\") role-based access control logging\n\n    * unit testing * metadata driven user interfaces (a\n    Model-View-Controller implementation, usable in both HTML::Mason and\n    cgi script contexts) * and more... (\"but wait...that's not all\")\n\n    Given the breadth of functionality provided it appears difficult to\n    fit Myco into any existing CPAN module categories/chapters and\n    suggests (to us) that it should stand alone in the Module namespace.\n\n    Read on for a glimpse of the Myco API in action.\n\n    All Myco entity classes are subclasses of Myco::Base::Entity. This\n    grants the entity class a rich set of functionality, accessible via\n    a clean consistent interface. Here's some sample code showing a\n    synopsis of how one interfaces with a Myco entity class:\n\n    use Myco::Foo; # a Myco entity class\n\n    # Constructor $obj = Myco::Foo->new; $obj = Myco::Foo->new(attr1 =>\n    value, attr2 => value);\n\n    # Access class metadata (see Myco::Base::Entity::Meta) $meta =\n    Myco::Foo->introspect; $meta = $obj->introspect;\n\n    # Accessors $obj->get_attr1; # get attribute value\n    $obj->set_attr1('value'); # set attribute value\n\n    # Instance methods $id = $obj->save; # update object's state in\n    persistent # storage, create new record if needed; # returns\n    object's Tangram id $obj->destroy; $obj->modify(attr1 => val, attr2\n    => val); $object_id = $obj->id; $obj->is_transient; # returns true\n    if object is in Tangram # transient storage\n\n    ## object retrieval (see class Myco documentation # for full\n    detail)\n\n    $obj = Myco->load($object_id);\n\n    # fetch all objects of given type @objects = Myco->select(ref\n    $obj); # this select() could also include a Tangram filter"
   },
   "meta" : {
      "message_id" : "200312171713.hBHHDkwZ005206@pause.perl.org",
      "epoch" : 1071681226,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Myco",
      "file" : "25110.txt",
      "type" : "module_submission"
   }
}
