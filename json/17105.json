{
   "data" : {
      "userid" : {
         "name" : "Todd Shoenfelt",
         "id" : "TSHOENFE"
      },
      "description" : "Base Encapsulation Class",
      "communities" : "",
      "chapterid" : {
         "name" : "Data_Type_Utilities",
         "id" : "6"
      },
      "similar" : "",
      "DSLIP" : "bdpOp",
      "modid" : "Class::Capsule",
      "methods" : "new(), to_string(), and equals() as well. Together, the",
      "enteredon" : "Fri Jan 17 05:08:26 2003 GMT",
      "enteredby" : {
         "name" : "Todd Shoenfelt",
         "id" : "TSHOENFE"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Encapsulation is an essential aspect of OO. Since the language\n    doesn't offer access modifiers to protect instance data, I wrote\n    this module, using a technique developed by Damian Conway, to fill\n    that gap.\n\n    This inheritable class enforces instance data encapsulation on\n    child classes and AUTOLOADed accessors. It provides inherited\n    methods: new(), to_string(), and equals() as well. Together, the\n    definition of the object interface is intended to promote object\n    interface consistency.\n\n    I chose the 'Class' namespace since this is essentially an abstract\n    class intended to be inherited by any object class."
   },
   "meta" : {
      "message_id" : "200301170508.h0H58Qa19757@pause.perl.org",
      "epoch" : 1042780106,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission Class::Capsule",
      "file" : "17105.txt",
      "type" : "module_submission"
   }
}
