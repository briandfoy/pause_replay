{
   "data" : {
      "userid" : {
         "name" : "Tim Maher",
         "id" : "YUMPY"
      },
      "description" : "Preprocessor for Magicpoint presentations",
      "communities" : "SPUG, Seattle Perl Users Group",
      "chapterid" : {
         "name" : "String_Lang_Text_Proc",
         "id" : "11"
      },
      "similar" : "POE::Preprocessor",
      "DSLIP" : "bdpfp",
      "modid" : "MGP::Preprocessor",
      "enteredon" : "Tue May 13 23:36:55 2003 GMT",
      "enteredby" : {
         "name" : "Tim Maher",
         "id" : "YUMPY"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Magicpoint, aka MGP after its file extension, provides a very basic\n    platform for creating and delivering X11-based presentations. In\n    doing so, it defines a small command language, which deals with\n    fonts, colors, line-centering and filling, point sizes, and little\n    else.\n\n    But unlike the markup notations used in HTML or POD, there's no\n    easy way to say embolden or italicize a word. Unlike troff, or\n    include there's no way to say include another file at this point\n    (although it *has* a %include directive, it's not for arbitrary\n    use). Nor is there a general way to run an arbitrary series of\n    commands and reap their output that works the way I want.\n\n    Moreover, there's no way to define a particular heading style, and\n    have it applied every time you refer to it. There's no way to say\n    \"whenever I tell you to slurp in a source-code file, expand its\n    tabs, and render all its comments in a particular color and a\n    particular font\"\n\n    There's no easy way to say \"I want half-spacing for a while\", or\n    \"skip the next 10 lines, and then start processing again. Or to say\n    \"show page numbers at the top of each line\".\n\n    Or any way to say \"let me leave the %pause directives in my file,\n    but ignore them this time so I can proofread the pages in one\n    glance\". Nor is there any way to say \"this is a table, render it as\n    one\".\n\n    Don't get me wrong, I'm very fond of Magicpoint. Especially because\n    it's driven by a text file, that can easily be preprocessed. And if\n    there was ever an application in dire need of a macro facility and\n    preprocessor, this is the Mother of All Such applications.\n\n    So what I've done is write a set of functions that can be used to\n    implement a custom preprocessor that provides the features whose\n    absence I lamented above (except the tables, which are still under\n    development).\n\n    This is all done behind the back of Magicpoint, which simply\n    interprets and renders a *.mgp file as always.\n\n    Some of the functions process new \"directives\", such as code% and\n    include% (yep, mine have trailing %s, not leading ones, like MGP\n    itself). Others provide support for the creation and application of\n    macros, allowing the user to associate any angle-bracketed symbol\n    with a series of native mgp-requests. For example,\n\n    It's time to <BIG_AND_BOLD>Make Money Fast<REGULAR>, you gullible\n    pauper.\n\n    Or given an \"undo\" definition for BIG_AND_BOLD as <REGULAR>, the\n    following is equivalent:\n\n    It's time to <BIG_AND_BOLD Make Money Fast>, you gullible pauper.\n\n    So that's what and idea of what I've got, and I think lots of\n    people are going to want to use it.\n\n    But I'm not sure what Namespace this module belongs in. It does\n    have its own \"markup language\" (more troff-ish than anything else),\n    so perhaps it belongs alongside HTML:: or PDF:: or XML:: at the root\n    level.\n\n    But it's such a wimpy markup language that it seems unlikely to\n    become a standard, as HTML:: and even RTF:: have. But then again,\n    one could say the same for POD, which definitely *has* caught on.\n    Who knows, with the addition of this preprocessor, the MGP\n    application might really corner the market, leading to a host of\n    other MGP-related tools. Or not! 8-}\n\n    Or perhaps it belongs in an application-extensions namespace, such\n    as Applications::MGP::Preprocessor, next to\n    Applications::StarOfficeImpress::Preprocessor, etc. But on that\n    basis, people would be led to look for PDF::Whatever under\n    Applications::Acrobat::PDF::Whatever, and fail to find it.\n\n    And given my recent experience in tempting the Carpal Tunnel\n    Syndrome gods via Shell::POSIX::Select, I'm currently down on\n    three-part names. So my vote is for MGP::Preprocess. It's not\n    taxonomically ideal, perhaps, but it parallels the precedents\n    offered by all those modules under RTF::, HTML::, PDF::, and I think\n    people will easily find it there.\n\n    What do you folks think? (and *Simon*, please be nice 8-} )"
   },
   "meta" : {
      "message_id" : "200305132336.h4DNatIu026974@pause.perl.org",
      "epoch" : 1052869015,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission MGP::Preprocessor",
      "file" : "21086.txt",
      "type" : "module_submission"
   }
}
