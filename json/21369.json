{
   "data" : {
      "userid" : {
         "name" : "Miko O'Sullivan",
         "id" : "MIKO"
      },
      "description" : "Handy routines for displaying values",
      "communities" : "",
      "chapterid" : {
         "name" : "Development_Support",
         "id" : "3"
      },
      "similar" : "",
      "DSLIP" : "Rdpfp",
      "modid" : "Debug::ShowStuff",
      "enteredon" : "Wed May 28 18:40:18 2003 GMT",
      "enteredby" : {
         "name" : "Miko O'Sullivan",
         "id" : "MIKO"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "NAME\n\n    Debug::ShowStuff - A collection of handy debugging routines for\n    displaying the values of variables with a minimum of coding.\n\n    SYNOPSIS\n\n    use Debug::ShowStuff ':all'; # display values of a hash or hash\n    reference showhash %hash; showhash $hashref; # display values of an\n    array or array reference showarr @arr; showarr $arrref; # show all\n    nested structures showref $reference # show all the params received\n    through CGI showcgi(); # A particularly fancy utility: display\n    STDERR # at top of web page my $warnings = showstderr;\n\n    DESCRIPTION\n\n    \"Debug::ShowStuff\" grew dynamically from my needs in debugging\n    code. I found myself doing the same tasks over and over...\n    displaying the keys and values in a hash, displaying the elements in\n    an array, displaying the output of STDERR in a web page, etc.\n    \"Debug::ShowStuff\" began as two or three of my favorite routines and\n    grew as I added to that collection. Finally I decided to publish\n    these tools in the hope that others will find them useful.\n\n    \"Debug::ShowStuff\" is intended for debugging, not for production\n    work. I would discourage anyone from using \"Debug::ShowStuff\" in\n    ready-for-primetime code. \"Debug::ShowStuff\" is only for\n    quick-n-dirty displays of variable values in order to debug your\n    code.\n\n    These functions display values that I personally like them\n    displayed, but your preferences may be different. I encourage you to\n    modify \"Debug::ShowStuff\" to suit your own needs.\n\n    TEXT MODE and WEB MODE\n\n    The functions in \"Debug::ShowStuff\" are designed to output either\n    in plain text mode (like if you're running the script from a command\n    prompt, or in web mode (like for a CGI). If the script appears to be\n    running in a CGI or other web mode (see the \"inweb\" function) then\n    values are output using HTML, with special HTML characters escaped\n    for proper display. Othewise the values are output as they are.\n\n    Generally you won't need to bother telling the routines\n    \"Debug::ShowStuff\" which way to display stuff... it figures it out\n    on its own.\n\n    DYNAMIC OUTPUT and RETURN\n\n    The functions that start with \"show\" dynamically either output to\n    STDOUT or STDERR, or return a string to a variable, depending on the\n    context in which the functions are called. For example, if you call\n    showhash in a void context:\n\n    showhash %myhash;\n\n    then the contents of %myhash are output to STDOUT. On the other\n    hand, if the function is called in scalar context:\n\n    my $var = showhash(%myhash);\n\n    then the same string that would have been output to STDOUT is\n    instead returned and stored in $var. If the function is called in\n    list context:\n\n    my @arr = showhash(%myhash);\n\n    then the array is assigned a single element that consists of the\n    entire string that should be output."
   },
   "meta" : {
      "message_id" : "200305281840.h4SIeLpN009689@pause.perl.org",
      "epoch" : 1054147221,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission Debug::ShowStuff",
      "file" : "21369.txt",
      "type" : "module_submission"
   }
}
