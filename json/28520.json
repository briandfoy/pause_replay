{
   "data" : {
      "userid" : {
         "name" : "Steffen Müller",
         "id" : "SMUELLER"
      },
      "description" : "Perl extension dealing with mathematic seque",
      "communities" : "",
      "chapterid" : {
         "name" : "Data_Type_Utilities",
         "id" : "6"
      },
      "similar" : "Math::Symbolic",
      "DSLIP" : "RdpOp",
      "modid" : "Math::Sequence",
      "enteredon" : "Sat Feb 14 13:07:56 2004 GMT",
      "enteredby" : {
         "name" : "Steffen Müller",
         "id" : "SMUELLER"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Math::Sequence defines a class for simple mathematic sequences with\n    a recursive definition such as \"x_(n+1) = 1 / (x_n + 1)\".\n\n    Math::Sequence uses Math::Symbolic to parse and modify the\n    recursive sequence definitions.\n\n    Each Math::Sequence object is an iterator to iterate over the\n    elements of the sequence starting at the first element (which was\n    specified by the starting element, the second argument to the new()\n    constructor). It offers facilities to cache all calculated elements\n    and access any element directly.\n\n    I am planning to write/release a more flexible module to deal with\n    mathematically more complex sequences that can, for example access\n    all previous sequence elements symbolically and defined any number\n    of fixed (starting) elements. That module will extend (isa)\n    Math::Sequence and will probably be called\n    Math::Sequence::[Something]. Suggestions welcome."
   },
   "meta" : {
      "message_id" : "200402141307.i1ED7ven023332@pause.perl.org",
      "epoch" : 1076764077,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Math::Sequence",
      "file" : "28520.txt",
      "type" : "module_submission"
   }
}
