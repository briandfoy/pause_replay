{
   "data" : {
      "userid" : {
         "name" : "Steffen Goeldner",
         "id" : "SGOELDNER"
      },
      "description" : "Deferred evaluation / partial application",
      "communities" : "module-authors@perl.org",
      "chapterid" : {
         "name" : "Development_Support",
         "id" : "3"
      },
      "similar" : "Sub::Curry Attribute::Curried Perl6::Currying overload",
      "DSLIP" : "bdphp",
      "modid" : "Sub::DeferredPartial",
      "enteredon" : "Mon Jul 19 07:30:41 2004 GMT",
      "enteredby" : {
         "name" : "Steffen Goeldner",
         "id" : "SGOELDNER"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "An instance of this class behaves like a sub (or, more precisely:\n    subroutine reference), but it supports partial application and the\n    evaluation of operators applied to such function objects is deferred\n    too. That means, evaluation has to be forced explicitly (which makes\n    it easier to add introspection capabilities).\n\n    Objects that represent deferred (delayed, suspended) expressions\n    are known as suspensions or thunks in various programming circles.\n    Don't confuse with the same terms in the context of threads!\n\n    If you merely need currying, you may consider modules like\n    Sub::Curry, Attribute::Curried or Perl6::Currying.\n\n    The deferred evaluation strategy allows to write down expressions\n    in a natural way - without the need for a wrapper function. This is\n    the chief difference to the *::Curry modules mentioned above.\n    Partial application aside, what comes closest is the Symbolic\n    calculator example in the overload module."
   },
   "meta" : {
      "message_id" : "200407190730.i6J7Uf8G018998@pause.perl.org",
      "epoch" : 1090222241,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Sub::DeferredPartial",
      "file" : "33605.txt",
      "type" : "module_submission"
   }
}
