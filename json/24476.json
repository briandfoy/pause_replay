{
   "data" : {
      "Approach" : "-------- The approach is not that unique. I take over the",
      "userid" : {
         "name" : "Ronan Oger",
         "id" : "RONAN"
      },
      "description" : "Provide SVG output to GD",
      "communities" : "svg-developers@yahoogroups.com,",
      "chapterid" : {
         "name" : "Images_Pixmaps_Bitmaps",
         "id" : "18"
      },
      "similar" : "",
      "DSLIP" : "bmphp",
      "to" : "use GD::Graph::lines; #order is important. #This MUST be behind",
      "modid" : "SVG::GD",
      "enteredon" : "Tue Nov 11 15:17:49 2003 GMT",
      "enteredby" : {
         "name" : "Ronan Oger",
         "id" : "RONAN"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Module Rationale: ---------------- I have recieved numerous queries\n    about generating SVG output from GD and other raster-drawing\n    systems. Because a number of applications use GD, this is the first\n    try to do this. As well, there have been been user queries on some\n    lists/newsgroups including comp.lang.perl.modules\n\n    SVG::GD enables the generation of GD drawings that are generated\n    from SVG-compatible files PLUS shape primitives.\n\n    (For example, there is not yet any support for certain methods that\n    act at a raster level such as \"fill\" or require the server to have a\n    spatial model of the canvas such as \"fillToBorders\").\n\n    Namespace rationale: ------------------- I am overwriting the\n    GD::Image namespace with the SVG::GD::Image namespace, and therefore\n    need to use SVG::GD rather than GD::SVG\n\n    Approach: -------- The approach is not that unique. I take over the\n    GD::Image namespace, open a new SVG drawing using the SVG.pm module,\n    and map GD,pm methods to SVG.pm. A unique thing about the module is\n    that it requires very little change to the existing code of an\n    application using GD. For example, for an existing app using\n    GD::Graph::lines, you change:\n\n    use GD::Graph::lines;\n\n    to: use GD::Graph::lines; #order is important. #This MUST be behind\n    the GD-invoking point to work use SVG::GD;\n\n    The module currently provides shape primitive support quite well,\n    and has been tested against a number of other modules which invoke\n    GD.\n\n    Everything works fairly well. Sample output of the module can be\n    found here:\n\n    http://www.roaps.com/2003/11/11/\n\n    (You need to have svg support, and you need to drill down to the\n    actual SVG images to see the SVG results)."
   },
   "meta" : {
      "message_id" : "200311111517.hABFHoxB008099@pause.perl.org",
      "epoch" : 1068563870,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission SVG::GD",
      "file" : "24476.txt",
      "type" : "module_submission"
   }
}
