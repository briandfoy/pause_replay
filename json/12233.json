{
   "data" : {
      "userid" : {
         "name" : "Sam Vilain",
         "id" : "SAMV"
      },
      "description" : "POD paragraphs to variables or closures",
      "program" : "message",
      "communities" : "modules@perl.org",
      "chapterid" : {
         "name" : "Perl_Core_Modules",
         "id" : "2"
      },
      "similar" : "Pod::Select, Pod::Parser, Pod::Tests, Pod::Usage",
      "DSLIP" : "bdphp",
      "modid" : "Pod::Constants",
      "enteredon" : "Mon Jun 17 19:41:38 2002 GMT",
      "enteredby" : {
         "name" : "Sam Vilain",
         "id" : "SAMV"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Pod::Constants builds on Pod::Parser to allow you to extract pieces\n    of your POD and slam them straight into locally scoped variables\n    with one `use' statement.\n\n    I am finding this useful for keeping documentation up to date with\n    values used by the program. For example, version numbers are set in\n    one place in most of my modules - the manual page.\n\n    The most innovative feature of my approach is the way that headings\n    in the POD effectively become `hooks' that you can attach closures\n    to, and then quickly ($constant) = m/`(.*)'/ your documentation into\n    code.\n\n    In testing I've built a system similar to Pod::Usage that builds a\n    complete `--help' screen, and defines a standard way of printing\n    debugging messages so that program messages are always printed in\n    the GNU recommended format:\n\n    program: message\n\n    I will be releasing this functionality in an upcoming version of\n    the module."
   },
   "meta" : {
      "message_id" : "200206171941.g5HJfe413335@pause.perl.org",
      "epoch" : 1024342900,
      "from" : "upload@p11.speed-link.de",
      "subject" : "Module submission Pod::Constants",
      "file" : "12233.txt",
      "type" : "module_submission"
   }
}
