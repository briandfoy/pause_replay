{
   "data" : {
      "userid" : {
         "name" : "Otakar Smrž",
         "id" : "SMRZ"
      },
      "description" : "Intuitive, yet efficient mappings for Encode",
      "communities" : "comp.lang.perl.moderated",
      "chapterid" : {
         "name" : "String_Lang_Text_Proc",
         "id" : "11"
      },
      "similar" : "",
      "DSLIP" : "bdpOp",
      "modid" : "Encode::Mapper",
      "enteredon" : "Mon Aug  4 14:26:15 2003 GMT",
      "enteredby" : {
         "name" : "Otakar Smrž",
         "id" : "SMRZ"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "The module finds direct application in Encode::Arabic and\n    Encode::Korean [submitting soon], providing an object-oriented\n    programming interface to convert data consistently, follow the\n    engine's computation, dump the engine using Data::Dumper etc.\n\n    It is designed to make easy what Encode::Encoding proposes, i.e.\n    define 'encode' and 'decode' methods to be used for data\n    conversions. It requires Encode in some of its methods.\n\n    The module's core is an algoritm which, from the rules given by the\n    user, builds a finite-state transducer, i.e. an engine performing\n    greedy search in the input stream and producing output data and side\n    effects relevant to the results of the search. Transducers may be\n    linked one with another, thus forming multi-level devices suitable\n    for nontrivial encoding/decoding tasks.\n\n    The compilation algorithm, and the search algorithm itself, were\n    inspired by Aho-Corasick and Boyer-Moore algorithms, and by the\n    studies of finite automata with the restart operation. The engine is\n    implemented in the classical sense, using hashes for the transition\n    function for instance. We expect to improve this to Perl code\n    evaluation, if the speed-up is significant.\n\n    It is to explore the way Perl's regular expressions would cope with\n    the task, i.e. verify our initial doubts which prevented us from\n    trying. Since Encode::Mapper's functionality is much richer than\n    pure search, simulating it completely might be resource-expensive\n    and non-elegant. Therefore, experiment reports are welcome."
   },
   "meta" : {
      "message_id" : "200308041426.h74EQFRb028747@pause.perl.org",
      "epoch" : 1060007175,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Encode::Mapper",
      "file" : "22693.txt",
      "type" : "module_submission"
   }
}
