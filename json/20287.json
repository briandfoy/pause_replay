{
   "data" : {
      "userid" : {
         "name" : "Ivor Williams",
         "id" : "IVORW"
      },
      "description" : "Locking and thread safety for variables",
      "communities" : "Perl monks, london.pm list, #london.pm, Private email with Elisabeth\n    Mattijsen (ELISABETH@cpan.org)",
      "chapterid" : {
         "name" : "Data_Type_Utilities",
         "id" : "6"
      },
      "similar" : "Threads::Shared, Thread::Barrier, Thread::Tie",
      "DSLIP" : "idprp",
      "modid" : "Tie::Atomic",
      "enteredon" : "Tue Apr  8 17:30:50 2003 GMT",
      "enteredby" : {
         "name" : "Ivor Williams",
         "id" : "IVORW"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "When faced with a problem of interference between Tk callbacks, I\n    realised that perl variables are not intrinsically re-entrant.\n\n    I have seen discussion to the effect that Perl 5 is not thread\n    safe, but I had assumed that this was only of relevance when using\n    threads inside Perl. In fact, the problem exists with any form of\n    parallelism as I discovered with Tk callbacks.\n\n    The underlying issues may well be sorted out in Perl 6, but how\n    many people are prepared to wait that long?\n\n    My proposed module is a tie wrapper which can be used anywhere that\n    code needs to be re-entrant, including signal handlers.\n\n    Besides implicit atomicity of all operations on the variable,\n    including for example, push, pop, shift and unshift on arrays, there\n    are lock and unlock methods provided to the underlying object, so\n    that the programmer can hold their own locks if they need to."
   },
   "meta" : {
      "message_id" : "200304081730.h38HUok9006332@pause.perl.org",
      "epoch" : 1049823050,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission Tie::Atomic",
      "file" : "20287.txt",
      "type" : "module_submission"
   }
}
