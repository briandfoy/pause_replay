{
   "data" : {
      "userid" : {
         "name" : "Byron Darrah",
         "id" : "BDARRAH"
      },
      "description" : "Execute loops in parallel",
      "communities" : "module-authors@perl.org",
      "chapterid" : {
         "name" : "Operating_System_Interfaces",
         "id" : "4"
      },
      "similar" : "Proc::Swarm Proc::Queue",
      "DSLIP" : "bdpfp",
      "modid" : "Proc::ParallelLoop",
      "enteredon" : "Thu Mar 13 00:53:23 2003 GMT",
      "enteredby" : {
         "name" : "Byron Darrah",
         "id" : "BDARRAH"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "This module takes an approach to parallel worker processes based on\n    the classic programming construct, \"pardo\". Instead of explicitly\n    setting up and interacting with a queue object, coders can write a\n    more natural-looking loop that somewhat resembles \"for\" or \"foreach\"\n    which just happens to execute the loop body in a very controlled,\n    parallel fashion.\n\n    All exit statuses, standard output, and error output from\n    parallelized work is automatically serialized to further strengthen\n    the semantic resemblence to normal loops. This should be a benefit\n    to developers seeking alternatives for simplifying the readability\n    of code and program output, and in updating existing code to take\n    advantage of parallel worker processes."
   },
   "meta" : {
      "message_id" : "200303130053.h2D0rNm10208@pause.perl.org",
      "epoch" : 1047516803,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission Proc::ParallelLoop",
      "file" : "19413.txt",
      "type" : "module_submission"
   }
}
