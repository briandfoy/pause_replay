{
   "data" : {
      "userid" : {
         "name" : "Sagar R. Shah",
         "id" : "SRSHAH"
      },
      "description" : "Environment Variable Hash for TT2",
      "communities" : "none - trivial (but very useful imho) module.",
      "chapterid" : {
         "name" : "String_Lang_Text_Proc",
         "id" : "11"
      },
      "similar" : "no similar Template Toolkit plugins known. Env has a similar name\n    for standard perl, but does something quite different.",
      "DSLIP" : "RdpOp",
      "modid" : "Template::Plugin::EnvHash",
      "enteredon" : "Sun Sep 14 10:46:42 2003 GMT",
      "enteredby" : {
         "name" : "Sagar R. Shah",
         "id" : "SRSHAH"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "NAME Template::Plugin::EnvHash - Environment Variable Hash for TT2\n\n    SYNOPSIS [% USE env = EnvHash %] [% env.SOME_ENV_VAR %]\n\n    DESCRIPTION This is a trivial Template::Toolkit plugin to allow any\n    template writer to suck environment variables into their template. I\n    wrote it because i was sick of passing %ENV as one of the contents\n    of the vars hash that i pass to the process method of Template.\n\n    NAMING I've named this module EnvHash rather than Env because most\n    Template::Plugin::X modules are wrappers around module X. Whereas\n    this is *not* a wrapper around Perl's Env module. This is because\n    the purpose of that module is to export environment variables into a\n    package. I did not want to export environment variables into my\n    template as environment variables as most environment variables tend\n    to have capitalised names (by popular convention) and this might\n    cause confusion with the tt2 style of using capitalised words for\n    its control structure syntax.\n\n    Of course someone else might come along and not care about this, so\n    i leave Template::Plugin::Env free for such a person.\n\n    USING ENVIRONMENT VARIABLES IN TEMPLATES As well as this being a\n    useful module for sucking in standard environment variables it also\n    allows you to configure template via the environment.\n\n    Some might say using the environment variables to configure your\n    template is dangerous, and in an *uncontrolled environment* i would\n    agree. However if you have a *controlled* environment it can be\n    incredibly useful. Say for example you quickly want to fire your\n    usual apache server, but on a different port (perhaps because u want\n    to test two sets of changes simultaneous, or perhaps just because\n    someone else is using that port). Then using an environment variable\n    to pass the port number can be quick dirty and useful.\n\n    Config files are generally better in the long run for most things,\n    but as i say it can be useful in a *controlled* environment.\n\n    INSTALLATION This module uses Module::Build for its installation.\n    To install this module type the following:\n\n    perl Build.PL ./Build ./Build test ./Build install\n\n    If you do not have Module::Build type:\n\n    perl Makefile.PL\n\n    to fetch it. Or use CPAN or CPANPLUS and fetch it \"manually\".\n\n    BUGS None known at time of writing. To report a bug or request an\n    enhancement use CPAN's excellent Request Tracker:\n\n    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Template-Plugin-EnvHash>\n\n    AUTHOR Sagar R. Shah\n\n    COPYRIGHT Copyright 2003, Sagar R. Shah, All rights reserved\n\n    This program is free software; you can redistribute it and/or\n    modify it under the same terms as Perl itself.\n\n    The full text of the license can be found in the LICENSE file\n    included with this module."
   },
   "meta" : {
      "message_id" : "200309141046.h8EAkifX010325@pause.perl.org",
      "epoch" : 1063536404,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Template::Plugin::EnvHash",
      "file" : "23546.txt",
      "type" : "module_submission"
   }
}
