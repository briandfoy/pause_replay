{
   "data" : {
      "userid" : {
         "name" : "William G. Davis",
         "id" : "WGDAVIS"
      },
      "description" : "The Perl Gopher/Gopher+ client API.",
      "communities" : "",
      "chapterid" : {
         "name" : "Networking_Devices_IPC",
         "id" : "5"
      },
      "similar" : "LWP::Protocol::gopher",
      "DSLIP" : "adphg",
      "modid" : "Net::Gopher",
      "enteredon" : "Sun Jul  6 06:40:21 2003 GMT",
      "enteredby" : {
         "name" : "William G. Davis",
         "id" : "WGDAVIS"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Back in the heyday of the Gopher protocol, much Gopher software was\n    written for Perl. Unfortunately, that was in the pre-95 era and,\n    more specifically, in the pre-Perl 5 era. Thus, much of this code is\n    undocumented, inefficient, archaic, and not even technically in the\n    form of a module (most are *.pl files meant to be require()'ed).\n    Furthermore, almost none of the code actually supports Gopher+, the\n    enhancements to the Gopher protocol.\n\n    The more recent versions of the libwww-perl (the ones that support\n    HTTP 1.1) do at least (partially) support the Gopher protocol. But\n    there are problems with it; as far as Gopher goes, LWP is extremely\n    primitive.\n\n    First, LWP doesn't support Gopher+, only Gopher.\n\n    Second, it converts Gopher menus and gopher search types to HTML\n    (Netscape, Mozilla, and IE do this as well). While I understand that\n    LWP is a Web library is this conversion is intended to help those\n    writing web clients who happen upon a gopher:// URL, it makes it\n    extremely difficult to work with for those who intend only to\n    communicate with Gopher servers since Gopherspace is an almost\n    entirely HTML-free realm and this conversion then requires the user\n    to use an HTML parser.\n\n    Third, LWP doesn't provide any way to make sure that a file\n    downloaded was completely downloaded (checking for the period on a\n    line by itself).\n\n    Fourth, LWP only enables communication with Gopher servers via URL;\n    you give LWP a gopher:// URL and it does the rest. While this again\n    may be helpful for people writing WWW clients, this is not method of\n    communication described in RFC 1436 : The Internet Gopher Protocol\n    (which in fact doesn't even once mention URIs or URLs), and it's\n    extremely limiting.\n\n    What I am in the process of doing with Net::Gopher is creating a\n    modern, object-oriented, Gopher/Gopher+ client API for Perl that\n    will enable Perl hackers to easily communicate with both Gopher as\n    well as Gopher+ servers from their Perl scripts.\n\n    So far, Net::Gopher's interface mimics that of other Net::* modules\n    such as Net::FTP and Net::SMTP, and should be far more familiar and\n    comfortable than LWP to those used to the Gopher protocol and early\n    pre-Web gopher clients. Net::Gopher corrects all of the problems\n    which I enumerated above, and provides a wealth of new functionality\n    including a Gopher menu parser to parse gopher menus and return the\n    item type, selector, host, and port of each item in the form of a\n    data structure."
   },
   "meta" : {
      "message_id" : "200307060640.h666eOgb000884@pause.perl.org",
      "epoch" : 1057473624,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission Net::Gopher",
      "file" : "22258.txt",
      "type" : "module_submission"
   }
}
