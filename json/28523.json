{
   "data" : {
      "userid" : {
         "name" : "Dmitry Karasik",
         "id" : "KARASIK"
      },
      "description" : "Asynchronous IPC IO events object framework",
      "communities" : "",
      "chapterid" : {
         "name" : "File_Handle_Input_Output",
         "id" : "21"
      },
      "similar" : "IO::Select IO::Event POE Event",
      "DSLIP" : "bdpOp",
      "modid" : "IO::Events",
      "enteredon" : "Sat Feb 14 22:12:20 2004 GMT",
      "enteredby" : {
         "name" : "Dmitry Karasik",
         "id" : "KARASIK"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "This is IO::Events, the module for using asynchronous IO in a\n    event-driven loop around select(). The module contains predefined\n    classes for standard IPC tasks, such as communicating with children\n    and co-processes in read, write, and bidirectional fashion.\n\n    Traditionally such tasks are solved with select() or IO::Select (\n    IO::Multiplex, IO::Nonblocking, Event, POE, IO::Event lie very close\n    ), and this module provides another high-level insight to the same\n    functionality. See an example of encapsulation of standard line\n    calculator 'bc' in a co-process in IO::Events/SYNOPSIS section.\n\n    The module doesn't use any third party event loop modules such as\n    Event or POE and is focused on IPC pipe IO, although sockets can be\n    used straighforwardly."
   },
   "meta" : {
      "message_id" : "200402142212.i1EMCNOL029407@pause.perl.org",
      "epoch" : 1076796743,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission IO::Events",
      "file" : "28523.txt",
      "type" : "module_submission"
   }
}
