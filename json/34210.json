{
   "data" : {
      "userid" : {
         "name" : "Andrew William Gibbs",
         "id" : "AWGIBBS"
      },
      "description" : "Persistent Relational Objects (in) Perl",
      "communities" : "PerlMonks",
      "chapterid" : {
         "name" : "Database_Interfaces",
         "id" : "7"
      },
      "similar" : "presumably all of the RDBMS-OO mappers on\n    http://poop.sourceforge.net/",
      "DSLIP" : "bdpOo",
      "modid" : "PROP",
      "enteredon" : "Wed Aug 18 19:11:38 2004 GMT",
      "enteredby" : {
         "name" : "Andrew William Gibbs",
         "id" : "AWGIBBS"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "The purpose of this module is to provide a robust and extensible\n    framework for object and relational persistence in a way that is\n    compatible with any SQL capable RDBMS, and that fails gracefully and\n    intelligently. It is implemented in the form of object oriented Perl\n    code that lives on top of the Perl DBI, and uses artful sub-classing\n    to obtain functionality for different DBDs. While it is true that\n    other modules have attempted to provide such functionality, this\n    module goes to great pains to invent a better wheel, since as of yet\n    nobody has created one that is entirely satisfactory.\n\n    One of the things at which this module excels is encouraging good\n    table structure. It insists on proper table normalization, employs\n    surrogate primary keys, and externalizes linkage information, making\n    sure that there are solid boundaries between the tables that\n    represent objects and the ones that represent relationships.\n\n    Another strong selling point is the efficiency of the underlying\n    engine. While many existing modules perform \"lazy loading\", i.e.\n    loading objects and then separately loading relatives for each one\n    with its own query, this module provides a rich structure for\n    executing large queries in batches, assembling fragments of streams\n    into objects and their relatives. This has a dramatic effect on\n    holding down the number of queries made to the database, as the\n    total number of queries grows with respect to the number of\n    different relationships being loaded, as opposed to the number of\n    objects being loaded. For example, if you load 100 objects along\n    with their relatives for each of three different relationships, then\n    the engine issues a total of four queries. If you instead load 1000\n    objects and the relatives for each of three different relationships,\n    there are still only four queries. Furthermore, the engine scales\n    well, as it operates by handing you back an iterator, and performing\n    large queries in multiple reasonably sized blocks, assembling the\n    results behind the scenes, unbeknownst to the user who just sees a\n    constant stream of objects.\n\n    Perhaps the feature with the widest appeal is the intensive\n    exception handling this module does in an attempt to facilitate\n    debugging. Object oriented exceptions are used, and are propagated\n    throughout all levels of the module so when problems crop up,\n    instead of a cryptic error message from the bowels of the engine,\n    one receives an in depth retrace of the stack at the time of the\n    crash, and contextual information that is appended at every level\n    during exception re-throwing. The result is that errors can be\n    diagnosed with extreme rapidity. Also of note is the callback\n    function framework that allows users to specify restrictions on the\n    values that various fields accept. On top of all this, there is a\n    special debugging mode that may be engaged during development that,\n    while sucking up extra CPU cycles, allows for much more stringent\n    error catching.\n\n    At this point the module is extremely mature. It has been developed\n    over the past couple months in the course of my duties as an\n    employee at the US Department of Commerce's National Institute of\n    Standards and Technology. It has approval from management to be\n    released to the public domain, and is sufficiently generalized that\n    it suits their purposes while being widely applicable to the\n    programming problems of anyone attempting to deploy a system that\n    uses persistent objects and relationships.\n\n    If this module were to be placed under some other namespace, then I\n    suppose DBIx::PROP would do. However, I think people have a lot of\n    pre-conceptions about how DBIx::* modules work, and thus to avoid\n    the prejudice it would be nice for it to have its own name space.\n    The querying engine for this module is in particular quite robust\n    and flexible, surpassing what is offered by most other modules and\n    doing so in a clean object oriented fashion."
   },
   "meta" : {
      "message_id" : "200408181911.i7IJBgBd015606@pause.perl.org",
      "epoch" : 1092856302,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission PROP",
      "file" : "34210.txt",
      "type" : "module_submission"
   }
}
