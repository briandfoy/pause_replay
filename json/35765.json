{
   "data" : {
      "userid" : {
         "name" : "Mark Nielsen",
         "id" : "NIELSEN"
      },
      "description" : "Debug or set multiple inheritance",
      "communities" : "linuxgzette.net",
      "chapterid" : {
         "name" : "Data_Type_Utilities",
         "id" : "6"
      },
      "similar" : "Class::Inspector",
      "DSLIP" : "bnpOp",
      "modid" : "Class::Inheritance",
      "enteredon" : "Tue Oct 19 02:48:20 2004 GMT",
      "enteredby" : {
         "name" : "Mark Nielsen",
         "id" : "NIELSEN"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "The goal of this new class is to find out everything regarding\n    parents or children of your class. I found some similar modules\n    under Class which sort of do similar things, but not exactly what I\n    want. I am specifically dealing with multiple inheritance. The only\n    module that is in the same ballpark is Inspector. However, I don't\n    think I want to merge my stuff with Inspector since what I am doing\n    is specifically targeting multiple inheritance.\n\n    Anyways, I don't see anything that I can easily incorporate my\n    stuff into or I don't want to incorporate it into another module\n    because I think \"Class::Inheritance\" would be an obvious place for\n    people to find a module describing inheritance of a class. It is\n    also heavily targeted towards multiple inheritnace and not general\n    information about a class.\n\n    I think inspector is good for general stuff about a class, but I\n    think 99% of the people don't need to analyze multiple inheritance\n    issues of their class. Inspector seems to have started on the\n    children, but not the parents. There are also a lot of features I\n    want to add to Inheritance that go beyond just analyzing the class\n    (like print out text, html, xml, graphic files of the tree). Thus, I\n    would like to have \"Class::Inheritance\" so that people who need a\n    module addressing multiple inheritance can easily find it. I also\n    plan to build a lot of stuff into it that go beyond\n    Class::Inspector. In time, I would like Class::Inspector to actually\n    use Class::Inheritance for inheritnace related issues.\n    Class::Inheritance might actually inherit methods from\n    Class::Inspector to get general information. We will see.\n\n    For a look at a first rough draft,\n    http://www.tcu-inc.com/Articles/38/Mysql_Part1.html and\n    http://www.tcu-inc.com/Articles/38/Inheritance.pm"
   },
   "meta" : {
      "message_id" : "200410190248.i9J2mS4R005292@pause.perl.org",
      "epoch" : 1098154109,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Class::Inheritance",
      "file" : "35765.txt",
      "type" : "module_submission"
   }
}
