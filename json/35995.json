{
   "data" : {
      "userid" : {
         "name" : "Paul Shields",
         "id" : "SHIELDS"
      },
      "description" : "lexical heuristic reduces alphabet of chars",
      "communities" : "",
      "chapterid" : {
         "name" : "String_Lang_Text_Proc",
         "id" : "11"
      },
      "similar" : "",
      "DSLIP" : "cdpOp",
      "modid" : "Regexp::Compost",
      "enteredon" : "Fri Oct 29 12:40:09 2004 GMT",
      "enteredby" : {
         "name" : "Paul Shields",
         "id" : "SHIELDS"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Define an operator called 'compost', that selectively removes\n    information from a text, turning it into a list of regular\n    expressions for matching the text and other similar texts.\n\n    Composting is a heuristic lexical process that reduces the alphabet\n    of characters, i.e.: removes all instances of a given character code\n    at once. The questions with composting are of course, \"what do I\n    remove?\", and \"when do I stop?\" and so there are several strategies."
   },
   "meta" : {
      "message_id" : "200410291240.i9TCeAUU027967@pause.perl.org",
      "epoch" : 1099053610,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Regexp::Compost",
      "file" : "35995.txt",
      "type" : "module_submission"
   }
}
