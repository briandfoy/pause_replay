{
   "data" : {
      "userid" : {
         "name" : "Ken Williams",
         "id" : "KWILLIAMS"
      },
      "description" : "Build and install Perl modules",
      "communities" : "#perl, module-authors@perl.org, makemaker@perl.org",
      "chapterid" : {
         "name" : "Development_Support",
         "id" : "3"
      },
      "similar" : "ExtUtils::MakeMaker",
      "DSLIP" : "bdpOp",
      "modid" : "Module::Build",
      "enteredon" : "Thu Jun 27 07:39:11 2002 GMT",
      "enteredby" : {
         "name" : "Ken Williams",
         "id" : "KWILLIAMS"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "From the docs:\n\n    =head1 MOTIVATIONS\n\n    There are several reasons I wanted to start over, and not just fix\n    what I didn't like about MakeMaker:\n\n    =over 4\n\n    =item *\n\n    I don't like the core idea of MakeMaker, namely that C<make> should\n    be involved in the build process. Here are my reasons:\n\n    =over 4\n\n    =item +\n\n    When a person is installing a Perl module, what can you assume\n    about their environment? Can you assume they have C<make>? No, but\n    you can assume they have some version of Perl.\n\n    =item +\n\n    When a person is writing a Perl module for intended distribution,\n    can you assume that they know how to build a Makefile, so they can\n    customize their build process? No, but you can assume they know\n    Perl, and could customize that way.\n\n    =back\n\n    For years, these things have been a barrier to people getting the\n    build/install process to do what they want.\n\n    =item *\n\n    There are several architectural decisions in MakeMaker that make it\n    very difficult to customize its behavior. For instance, when using\n    MakeMaker you do C<use MakeMaker>, but the object created in\n    C<WriteMakefile()> is actually blessed into a package name that's\n    created on the fly, so you can't simply subclass\n    C<ExtUtils::MakeMaker>. There is a workaround C<MY> package that\n    lets you override certain MakeMaker methods, but only certain\n    explicitly predefined (by MakeMaker) methods can be overridden.\n    Also, the method of customization is very crude: you have to modify\n    a string containing the Makefile text for the particular target.\n\n    =item *\n\n    It is risky to make major changes to MakeMaker, since it does so\n    many things, is so important, and generally works. C<Module::Build>\n    is an entirely seperate package so that I can work on it all I want,\n    without worrying about backward compatibility.\n\n    =item *\n\n    Finally, Perl is said to be a language for system administration.\n    Could it really be the case that Perl isn't up to the task of\n    building and installing software? Even if that software is a bunch\n    of stupid little C<.pm> files that just need to be copied from one\n    place to another? Are you getting riled up yet??\n\n    =back\n\n    Please contact me if you have any questions or ideas."
   },
   "meta" : {
      "message_id" : "200206270739.g5R7dCA08452@pause.perl.org",
      "epoch" : 1025163552,
      "from" : "upload@p11.speed-link.de",
      "subject" : "Module submission Module::Build",
      "file" : "12367.txt",
      "type" : "module_submission"
   }
}
