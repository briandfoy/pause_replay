{
   "data" : {
      "userid" : {
         "name" : "Darren Duncan",
         "id" : "DUNCAND"
      },
      "Note" : "Aside from adding requested features, this module is",
      "description" : "Refer to user messages in programs by keys",
      "communities" : "modules@perl.org mainly (eg: 2003.05.29-30)",
      "chapterid" : {
         "name" : "Internationalization_Locale",
         "id" : "13"
      },
      "similar" : "Locale::Maketext Locale::gettext Locale::PGetText DBIx::BabelKit",
      "DSLIP" : "RdpOl",
      "modid" : "Locale::KeyedText",
      "enteredon" : "Sat Sep 18 03:29:27 2004 GMT",
      "enteredby" : {
         "name" : "Darren Duncan",
         "id" : "DUNCAND"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "See the existing CPAN module documentation for Locale::KeyedText (\n    http://search.cpan.org/dist/Locale-KeyedText/lib/Locale/KeyedText.pm\n    ) for a proper/complete description of what the module is for,\n    unique features, how it is structured, and how to use it.\n\n    To summarize, Locale::KeyedText makes it simple to separate\n    program-associated text that users see (such as prompts or errors)\n    into separate files, which allows them to easily be edited and\n    distributed separately from the main program file, or for alternate\n    languages to be easily substituted, or for multiple language\n    versions to be maintained at once. The text can be edited by a\n    non-programmer, and programmers don't need to have reams of text\n    filling up their program code.\n\n    Code that uses Locale::KeyedText internally works with simple\n    machine-readable Message objects that are thrown as exceptions\n    (hence this requires Perl 5.006 and above); calling code can catch\n    these objects and easily examine them and it can choose to recover\n    from an error if it wants; each object contains a key and a hash of\n    variables that can either be used by the program or interpolated\n    into the user message. It is also easy for a library and a program\n    using it to have overlapping user-text files; if they simply both\n    define messages for the same keys, then the program can override\n    what text is used when displaying for the user; if the same library\n    is used with a different program that doesn't do this, then only the\n    library's own text is available to show. Regardless, the using\n    program itself has control as to when and how any text is output.\n\n    One of the main distinctions of this approach over similar modules\n    is that text is always looked up by a key which is not meant to be\n    meaningful for a user. Whereas, with the other modules like\n    \"gettext\" it looks like you are supposed to pass in english text and\n    they translate it, which could produce ambiguous results or\n    associations. Or alternately, the other modules require your text\n    data to be stored in a format other than Perl files. Or alternately\n    they have a compiled C component or otherwise have external\n    dependencies; Locale::KeyedText has no external dependencies (it is\n    very simple). There are other differences. Where other solutions\n    take variables, they seem to be positional (like with 'sprintf');\n    whereas, Locale::KeyedText has named variables, which can be used in\n    any order, or not used at all, or used multiple times.\n    Locale::KeyedText is generally a simpler solution than alternatives,\n    and doesn't know about language specific details like encodings or\n    plurality.\n\n    The module name comes from its focus on looking up messages by\n    machine-readable keys, or that otherwise said keys are used by\n    programs to recover. It is under Locale because a primary use is to\n    support multiple langauges easily.\n\n    The design principles espoused in this module were inspired by one\n    of the Mac OS X ways of doing things, where each program comes with\n    a set of separate Locale files, one per supported language, and\n    upgrading a program to support more languages simply means adding\n    more files.\n\n    To see practical examples of this module in use, see my dependent\n    \"SQL::SyntaxModel\" and \"Rosetta\", plus their \"en.pm\" files, plus\n    their t/*.t test scripts.\n\n    Note: Aside from adding requested features, this module is\n    \"complete\"; what you see now is a very stable form."
   },
   "meta" : {
      "message_id" : "200409180329.i8I3TSVW031724@pause.perl.org",
      "epoch" : 1095478168,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Locale::KeyedText",
      "file" : "34976.txt",
      "type" : "module_submission"
   }
}
