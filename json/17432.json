{
   "data" : {
      "userid" : {
         "name" : "Arthur Corliss",
         "id" : "CORLISS"
      },
      "description" : "Base class aggregating several OO aspects",
      "communities" : "mailinglists",
      "chapterid" : {
         "name" : "Data_Type_Utilities",
         "id" : "6"
      },
      "similar" : "Class::Accessor, Class::Container, POE, etc.",
      "DSLIP" : "bdpOg",
      "modid" : "Class:Aggregate",
      "enteredon" : "Tue Jan 28 01:10:25 2003 GMT",
      "enteredby" : {
         "name" : "Arthur Corliss",
         "id" : "CORLISS"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Okay, this is the last time I'm going to bother you with this\n    request, I just haven't heard a response to my last rationale(s).\n\n    I'm choosing the name Class::Aggregate since this module aggregates\n    three class aspects, in contrast to most of the Class::* modules,\n    which concentrate on specific traits. This module provides\n    facilities for property accessors, containers, and rudimentary\n    events.\n\n    The reason why this exists as a separate module/code base is that\n    it chooses a different method of implementation than the existing\n    modules, and its feature focus is also different as well.\n\n    Syntactically, this module is meant to be used strictly as an\n    ancestor of a custom subclass. Properties are defined as an array of\n    write and read accessor method references, or a single unifed\n    accessor method (a generic accessor that can serve in any of these\n    capacities is provided as part of the class). The container property\n    is implemented with a focus on controlled destruction of contained\n    objects, rather than on a consistent interface.\n\n    The event system is based on psuedo boolean properties combined\n    into a state flag register. All accesses/modifications of a flag can\n    trigger execution of an optional associated event handler. This\n    system is much smaller and simpler to implement than POE, and,\n    accordingly, the dependencies are much smaller (read: nothing\n    outside of core Perl), as are the capabilities (using POE for what\n    this class intends is much akin to using a twenty pound sledge where\n    I only need a sixteen ounce ballpeen).\n\n    For these reasons, I hope to persuade you that this module deserves\n    a place on CPAN. Adding it to CPAN would also increase my code\n    reuse, since my other OO CPAN modules will be making use of this\n    code in the near future, and I'm hoping I won't have to include this\n    module within the namespace of each of those modules."
   },
   "meta" : {
      "message_id" : "200301280110.h0S1AQT06320@pause.perl.org",
      "epoch" : 1043716226,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission Class:Aggregate",
      "file" : "17432.txt",
      "type" : "module_submission"
   }
}
