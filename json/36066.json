{
   "data" : {
      "userid" : {
         "name" : "Dominique Dumont",
         "id" : "DDUMONT"
      },
      "description" : "creates methods with introspection",
      "communities" : "",
      "chapterid" : {
         "name" : "Data_Type_Utilities",
         "id" : "6"
      },
      "similar" : "Class::MethodMaker Class::MakeMethods",
      "DSLIP" : "cdpOp",
      "modid" : "Class::MakeIntrospecMethods",
      "enteredon" : "Tue Nov  2 15:03:04 2004 GMT",
      "enteredby" : {
         "name" : "Dominique Dumont",
         "id" : "DDUMONT"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Like Class::MethodMaker, this module provide an easy way to create\n    accessors methods.\n\n    On top of usual method creation, this module may add introspection\n    methods. So the user may query an object for a list of methods\n    created by Class-MakeIntrospecMethods. The list of methods may be\n    organized in several catalogs at user's choice.\n\n    This module can also be used to create a tree where each node or\n    leaf is an object. So this module also provides methods to navigate\n    up the tree of objects with a special \"parent\" method.\n\n    Thus, this module provides special methods to enable the user to\n    navigate up or down a tree (or directed graph) using introspection\n    (to go down) and the \"parent\" method to go up.\n\n    This modules does not provide most of the fancy methods of\n    Class::MethodMaker. Only scalar, array and hash accessors (with\n    their tied and objects variants) are provided.\n\n    Originally, the introspection and \"parent\" functionalities were\n    implemented in Class::MethodMaker. Unfortunately, they were not\n    accepted by Class::MethodMaker's author since they did not fit his\n    own vision of his module (fair enough).\n\n    I've also looked at Class::MakeMethod, but this module is way too\n    complex to add these navigations possibility. Furthermore, the code\n    generation trick used by Class::MakeMethod (and Class::MethodMaker >\n    v2.x) make programs very hard to debug, so I'd rather avoid them.\n\n    I'm open to other suggestion regarding this module's name.\n\n    Cheers"
   },
   "meta" : {
      "message_id" : "200411021503.iA2F3INa027810@pause.perl.org",
      "epoch" : 1099407799,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Class::MakeIntrospecMethods",
      "file" : "36066.txt",
      "type" : "module_submission"
   }
}
