{
   "data" : {
      "userid" : {
         "name" : "Eric J. Roode",
         "id" : "ROODE"
      },
      "description" : "Simple interface to fork() system call.",
      "communities" : "news::comp.lang.perl.modules, RPI lily",
      "chapterid" : {
         "name" : "Operating_System_Interfaces",
         "id" : "4"
      },
      "similar" : "Proc::Forkfunc, but that appears to be defunct.",
      "DSLIP" : "bdpfp",
      "modid" : "Proc::Fork",
      "enteredon" : "Fri Jul  5 03:58:52 2002 GMT",
      "enteredby" : {
         "name" : "Eric J. Roode",
         "id" : "ROODE"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Logically, this module belongs in the Proc:: hierarchy, and since\n    its only function is syntactic sugar for the fork() system call,\n    Proc::Fork seems appropriate.\n\n    Forking is easy, but the specifics require attention to detail. I\n    always have to stop and think \"What does fork return if I'm the\n    parent? The child? Oh yeah...\" Since forking is mostly the same\n    every time (with only a few variants), and since you have to stop\n    and think about it every time, it seems a good candidate for an\n    off-the-shelf, easy-to-use set of functions. I hope this module fits\n    the bill.\n\n    I tried registering this module once before, but it didn't make the\n    module list. Either I goofed in registering it (likely), or the\n    request was silently ignored (or lost along the way). This is my\n    second attempt, hope it works this time.\n\n    Thanks, Eric."
   },
   "meta" : {
      "message_id" : "200207050358.g653wsu12034@pause.perl.org",
      "epoch" : 1025841534,
      "from" : "upload@p11.speed-link.de",
      "subject" : "Module submission Proc::Fork",
      "file" : "12505.txt",
      "type" : "module_submission"
   }
}
