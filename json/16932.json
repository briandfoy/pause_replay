{
   "data" : {
      "userid" : {
         "name" : "Philippe \"BooK\" Bruhat",
         "id" : "BOOK"
      },
      "description" : "A base class for log files regexp builders",
      "communities" : "mailing list, CVS, web site (http://regexp-log.mongueurs.net/)",
      "chapterid" : {
         "name" : "String_Lang_Text_Proc",
         "id" : "11"
      },
      "similar" : "",
      "DSLIP" : "bdpOp",
      "modid" : "Regexp::Log",
      "enteredon" : "Mon Jan 13 15:11:34 2003 GMT",
      "enteredby" : {
         "name" : "Philippe \"BooK\" Bruhat",
         "id" : "BOOK"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Regexp::Log is a base class for a variety of modules that generate\n    regular expressions for performing the usual data munging tasks on\n    log files that cannot be simply split().\n\n    The goal of this module family is to compute regular expressions\n    based on the configuration string of the log.\n\n    Here is an example of code using Regexp::Log:\n\n    my $foo = Regexp::Log::Foo->new( format => 'custom %g %e %a %w/%s\n    %b %m %i %u %H/%d %c', capture => [qw( host code username )], );\n\n    # this is necessary to know in which order # we will receive the\n    captured fields from the regexp my @fields = $foo->capture;\n\n    # the all-powerful capturing regexp :-) my $re = $foo->regexp;\n\n    while (<>) { my %data; @data{@fields} = /$re/; # no need for /o,\n    it's a compiled regexp\n\n    # now do something with the content of %data ... }\n\n    For the moment, there is only one subclass: Regexp::Log::BlueCoat,\n    that compute regexp for the BlueCoat system (www.blueCoat.com).\n\n    Regexp::Log::Apache should be next.\n\n    Regexp::Log::* modules use the configuration format string as a\n    template, and do a search and replace operation to remove each field\n    placeholder by the appropriate regular expression. The interesting\n    method is the capture() method that lets you capture any field (or\n    sub-field) you want, by name.\n\n    As for the namespace, Regexp:: seems the more appropriate, since\n    the point of the module is to create compiled regular expressions."
   },
   "meta" : {
      "message_id" : "200301131511.h0DFBZB32037@pause.perl.org",
      "epoch" : 1042470695,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission Regexp::Log",
      "file" : "16932.txt",
      "type" : "module_submission"
   }
}
