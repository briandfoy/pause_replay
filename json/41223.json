{
   "data" : {
      "userid" : {
         "name" : "Jerzy Wachowiak",
         "id" : "JWACH"
      },
      "description" : "Integration of applications using Jabber",
      "communities" : "http://xdash.jabberstudio.org\n    http://www.jabberstudio.org/cgi-bin/viewcvs.cgi",
      "chapterid" : {
         "name" : "Networking_Devices_IPC",
         "id" : "5"
      },
      "similar" : "MQSeries â similar concept and challenges addressed â>\n    publish/subscribe integration of applications but using proprietary\n    communication protocol. xDash is using Jabber/XMPP protocol and\n    another approach to the development.",
      "DSLIP" : "RdpOo",
      "modid" : "xDash",
      "enteredon" : "Thu Jun 23 16:41:21 2005 GMT",
      "enteredby" : {
         "name" : "Jerzy Wachowiak",
         "id" : "JWACH"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "xDash is a framework for publish/subscribe integration of\n    applications. xDash is using Jabber/XMPP as communication protocol\n    and implementing the concept of convergence between backend\n    asynchronous messaging and instant messaging.\n\n    xDash project (http://xdash.jabberstudio.org) exists already for\n    some years and has been presented to the public several times (e.g.\n    http://www.ccc.de/congress/2004/fahrplan/event/11.de.html). It was\n    so far a set of scripts, which has been now refactored to a set of\n    CPAN modules.\n\n    xDash uses open communication protocol as the way of\n    interoperability. It is not confined to Perl but on contrary,\n    developers are encouraged to use the programming language which\n    suits their needs best.\n\n    The xDash Perl framework consists of three main modules:\n    xDash::Sender, xDash::Receiver, xDash::Archivist and some other\n    supporting modules. Modules are developed in the object orientated\n    way. If you need to customize/extend functionality of the tree main\n    modules, you have to provide your own base classes/modules for some\n    tasks, which have to implement a fixed set of methods (driver\n    pattern). Such tasks are: diverse spools for incoming jobs (like\n    directory, RDBMS, crone like execution), logging (file, system,\n    dumb,â¦), persistence layers for archiving messages. If you think,\n    they can be reused; you are encouraged to make them public over CPAN\n    in the xDash root namespace (xDash::Spool, xDash::Logger,\n    xDash::Archive).\n\n    The root level of namespace is required as there is no similar root\n    namespace, which xDash would fit into. The Net:: namespace is one\n    abstraction level below problems solved by xDash (or similar\n    platforms like MQSeries)."
   },
   "meta" : {
      "message_id" : "200506231641.j5NGfUSQ029709@pause.perl.org",
      "epoch" : 1119544890,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission xDash",
      "file" : "41223.txt",
      "type" : "module_submission"
   }
}
