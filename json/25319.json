{
   "data" : {
      "userid" : {
         "name" : "Dr. James Freeman",
         "id" : "JFREEMAN"
      },
      "description" : "LCSS orders of magnitude faster Text::LCSS",
      "communities" : "",
      "chapterid" : {
         "name" : "Data_Type_Utilities",
         "id" : "6"
      },
      "similar" : "Text::LCSS",
      "DSLIP" : "Rdpfp",
      "modid" : "Algorithm::LCSS",
      "enteredon" : "Wed Dec 31 03:14:49 2003 GMT",
      "enteredby" : {
         "name" : "Dr. James Freeman",
         "id" : "JFREEMAN"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "=head1 NAME\n\n    Algorithm::LCSS - Perl extension for getting the Longest Common\n    Sub-Sequence\n\n    =head1 SYNOPSIS\n\n    use Algorithm::LCSS qw( LCSS CSS CSS_Sorted ); my $lcss_ary_ref =\n    LCSS( \\@SEQ1, \\@SEQ2 ); # ref to array my $lcss_string = LCSS(\n    $STR1, $STR2 ); # string my $css_ary_ref = CSS( \\@SEQ1, \\@SEQ2 ); #\n    ref to array of arrays my $css_str_ref = CSS( $STR1, $STR2 ); # ref\n    to array of strings my $css_ary_ref = CSS_Sorted( \\@SEQ1, \\@SEQ2 );\n    # ref to array of arrays my $css_str_ref = CSS_Sorted( $STR1, $STR2\n    ); # ref to array of strings\n\n    =head1 DESCRIPTION\n\n    This module uses Algoritm::Diff to implement LCSS and is orders of\n    magnitude faster than String::LCSS.\n\n    If you pass the methods array refs you get back array (ref) format\n    data. If you pass strings you get a string or a ref to an array of\n    strings."
   },
   "meta" : {
      "message_id" : "200312310314.hBV3En9K001145@pause.perl.org",
      "epoch" : 1072840489,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission Algorithm::LCSS",
      "file" : "25319.txt",
      "type" : "module_submission"
   }
}
