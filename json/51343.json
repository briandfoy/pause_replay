{
   "data" : {
      "userid" : {
         "name" : "Martin Bušík",
         "id" : "MBUSIK"
      },
      "description" : "iterators and getters for xml-access",
      "communities" : "",
      "chapterid" : {
         "name" : "String_Lang_Text_Proc",
         "id" : "11"
      },
      "similar" : "XML::TokeParser",
      "DSLIP" : "adpOp",
      "modid" : "XML::Traverse::ParseTree",
      "enteredon" : "Tue Oct 17 19:05:52 2006 GMT",
      "enteredby" : {
         "name" : "Martin Bušík",
         "id" : "MBUSIK"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "XML::Traverse::ParseTree - A module for accessing contents of a\n    parsed xml document.\n\n    One extreme of xml processing is the usage of a DOM-like API. (The\n    whole content is held in memory, each Node has links to parents,\n    childs and siblings) The other extreme of xml processing is the\n    usage of a SAX-like API (only that is held in memory, what the\n    application developer decided. It is less flexible in terms of\n    variable structures)\n\n    XML::Traverse::ParseTree offers a way between these two extremes.\n    The whole content is held in memory (as a result of a\n    XML::Parser-run) Access occurs by means of iterators and getters.\n    The access paths are specified by means of xslt (-like) expressions.\n\n    Helpful if cases, when there are no static structures (so xml <->\n    data mapping would not make sense) or the access paths are specified\n    dynamically, e.g. they depend on the content (so SAX-approach would\n    be unhandy to manage)"
   },
   "meta" : {
      "message_id" : "200610171905.k9HJ5qSS021618@pause.perl.org",
      "epoch" : 1161111952,
      "from" : "upload@pause.perl.org",
      "subject" : "Module submission XML::Traverse::ParseTree",
      "file" : "51343.txt",
      "type" : "module_submission"
   }
}
