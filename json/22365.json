{
   "data" : {
      "userid" : {
         "name" : "Miko O'Sullivan",
         "id" : "MIKO"
      },
      "description" : "Pure Perl DBMS",
      "communities" : "UserFriendly",
      "chapterid" : {
         "name" : "Database_Interfaces",
         "id" : "7"
      },
      "similar" : "DBD::SQLite, DBD::Sprite",
      "DSLIP" : "cdphl",
      "modid" : "DBD::Trini",
      "enteredon" : "Tue Jul 15 07:12:53 2003 GMT",
      "enteredby" : {
         "name" : "Miko O'Sullivan",
         "id" : "MIKO"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "NAME\n\n    DBD::Trini - Pure Perl DBMS\n\n    SYNOPSIS\n\n    Ugh, now matter howI try, the formatting of these synopses always\n    goes haywire when I post to register a namespace. Be kind, unwind.\n\n    #!/usr/local/bin/perl -w use strict; use DBD::Trini; my ($path,\n    $sql, $dbh, $sth, $i);\n\n    # directory where database is stored $path = 'mydb';\n\n    $sql = <<'(SQL)'; create table members member_pk VARCHAR(5),\n    name_first VARCHAR(25), name_last VARCHAR(25), notes MEMO (SQL)\n\n    # create the database $dbh = DBI->connect(\"dbi:Trini:$path\", '',\n    '', {'create'=>1}); $dbh->do($sql) or die $DBI::errstr;\n    $dbh->commit();\n\n    # insert $sql = qq[ insert into members(member_pk, name_first,\n    name_last, notes) values(?,?,?,?) ]; $sth = $dbh->prepare($sql) or\n    die $DBI::errstr; $i=1;\n\n    $sth->execute( $i++, 'Starflower', 'Shanti', 'Totally cool chick')\n    or die $DBI::errstr; $sth->execute( $i++, 'Paul', 'Ruggerio',\n    'Dangerous with a spatula') or die $DBI::errstr; $sth->execute(\n    $i++, 'Mary', 'Edwin', 'Star Wars nut') or die $DBI::errstr;\n    $sth->execute( $i++, 'Ryan', 'Ragsdale', 'Loves his daughter') or\n    die $DBI::errstr; $sth->execute( $i++, 'Grady', 'Smith', 'Great\n    sculptor') or die $DBI::errstr;\n\n    # updates $sql = qq[ update members set name_first=? where\n    member_pk=2 ]; $sth = $dbh->prepare($sql) or die $DBI::errstr;\n    $sth->execute('Guido') or die $DBI::errstr;\n\n    # select $sql = qq[ select name_last || ',' ||| name_first as name\n    from members where member_pk=? ]; $sth = $dbh->prepare($sql) or die\n    $DBI::errstr; $sth->execute(2) or die $DBI::errstr;\n\n    while (my $row = $sth->fetchrow_hashref) { print $row->{'name'},\n    \"\\n\" }\n\n    # delete $sql = 'delete from members where member_pk > ?'; $sth =\n    $dbh->prepare($sql); $sth->execute(3);\n\n    INSTALLATION\n\n    \"Easy Installation\" is one of Trini's central goals. Just copy\n    Trini.pm into the DBD/ directory of one of your library trees.\n\n    Or you can do the traditional routine:\n\n    perl Makefile.PL make make test make install\n\n    You will also need to install the following modules which are also\n    Pure Perl, are just as easy to install, and are on CPAN:\n\n    Data::Taxi SQL::YASP\n\n    Finally, you'll need to install the DBI module itself, which may be\n    anywhere from extremely easy (it's included in later distributions\n    of Perl 5) to painfully difficult, depending on your skill level. Be\n    sure to check out the notes in DBI about the the Pure Perl version\n    of DBI if you find it difficult to install DBI.\n\n    DESCRIPTION\n\n    Trini (pronounced \"TRINN-EE\") is a Pure Perl DBMS. Some highlights\n    of the eventual product:\n\n    - Commit/rollback segments\n\n    - Journaled data writing for automatic crash recovery\n\n    - All data stored in a single data file\n\n    - Open architecture for data type definitions (i.e., create your\n    own types of database fields)\n\n    - Enforcement of referential integrity\n\n    - Triggers\n\n    - Constraints\n\n    - Entirely written in the grooviest programming language there is\n\n    SO, DO THE WORLD REALLY NEED ANOTHER DBMS?\n\n    The creation of \"yet another DBMS\" requires some justification.\n    After all, there are already several excellent open source DBMS\n    packages, notably MySQL and PostGreSql.\n\n    And yet, despite the availability of those programs, Perl hackers\n    around the world continue to store data in Unix DB tables, flat\n    files, and other file-based data structures. The difficulty in using\n    those data storage techniques seems less daunting than the\n    difficulty of installing, starting, and connecting to a true DBMS\n    package.\n\n    The problem, I believe, is a simple question of paradigm confusion.\n    Programmers want to understand how and where their data is being\n    stored. They want to have a file where they can see the data, and\n    they want to be able to install a simple package quickly and begin\n    using it without spending a long time reading through installation\n    guides.\n\n    Finally, for those of us who prefer Perl to any other language,\n    there is a need for a DBMS that lets us join in the fun of hacking\n    the code.\n\n    Trini was created to fill this niche. The entirety of Trini's code\n    is contained in a half dozen Pure Perl modules, all of which can be\n    installed either through the traditional make/make test/make install\n    dance, or by simply copying them into your @INC library. The data is\n    stored in a single data file. Trini provides a rich (and extensible)\n    set of SQL operators and commands, compliments of SQL::YASP. Trini\n    provides commit/rollback segments, and automatic crash recovery,\n    both compliments of FileHandle::Rollback. Trini also provides an\n    extensible field type API, so that if the built-in data types\n    (NUMBER, VARCHAR, MEMO, others) don't suit you, you can define your\n    own.\n\n    Trini is still in its early stages. I've defined a data structure.\n    It can do basic database definition, inserts, deletes, updates and\n    selects. I invite all interested parties to join in the fun.\n\n    SIMILAR MODULES\n\n    Trini is hardly the first Pure Perl database manager. However, to\n    my knowledge none of them provide the same set of features as listed\n    above, though many provide some of those features. Some similar\n    modules are:\n\n    DBD::Sprite\n\n    Sprite is a popular Pure Perl DBMS with many of the features listed\n    above. AFAIK, however, it does not support the following features,\n    and given how Sprite stores data, it is not likely to do so in the\n    near future:\n\n    - Cannot store undefs, only stores nulls as empty strings.\n\n    - Does not have auomatic crash recovery\n\n    - Does not have extensible datatype API\n\n    - Does not support extensible SQL function and operator definitions\n\n    - Does not handle \"memo\" (i.e. strings of arbitrary length) fields\n\n    - Does not have indexing to speed up queries.\n\n    - Sprite does not bill itself as a production-worthy DBMS. Trini\n    will.\n\n    BTW, I always get yelled at when I attempt to list the differences\n    in modules. Jim, I apologize in advance if this list isn't quite\n    right. Drop me a line and I'll fix it. :-)\n\n    Sprite does support user-ids and passwords, which is a nice\n    feature. Trini doesn't support that feature, and for now I don't\n    plan to do so.\n\n    DBD::SQLite\n\n    DBD::SQLite is a very powerful local-file DBMS. It accomplishes\n    many of the same objectives as Trini. Is not Pure Perl. Obviously a\n    much more mature package than Trini, you should definitely look at\n    SQLite if you need to get going on a local-file project immediately.\n\n    A NOTE ABOUT THE STATE OF TRINI\n\n    This is an early release of Trini. In the spirit of Eric Raymond's\n    motto \"Release Early, Release Often\" I am releasing Trini before it\n    is a fully working module, or indeed before it is properly\n    documented. This version does some very basic databasing operations.\n    It allows you to create a database, insert, update, select, and\n    delete records. It supports two data types: varchar and memo. See\n    demo.pl for a basic walk through of Trini's current features.\n\n    A few things this module does NOT support are: modifying the\n    structure of a database, data integrity checks, file locking,\n    rollback segments, and automatic crash recovery. All of those\n    features are planned. Indeed, Trini was designed with those features\n    in mind.\n\n    See the TO DO section below for a more detailed list of planned\n    features.\n\n    AUTHOR Miko O'Sullivan miko@idocs.com\n\n    VERSION Version 0.01 July 15, 2003 Initial release"
   },
   "meta" : {
      "message_id" : "200307150712.h6F7Cstl019193@pause.perl.org",
      "epoch" : 1058253174,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission DBD::Trini",
      "file" : "22365.txt",
      "type" : "module_submission"
   }
}
