{
   "data" : {
      "userid" : {
         "name" : "Seán Cannon",
         "id" : "DODGER"
      },
      "description" : "Parsing and Manipulation of Poser files",
      "communities" : "http://www.renderosity.com/messages.ez?ForumID=12356",
      "chapterid" : {
         "name" : "Images_Pixmaps_Bitmaps",
         "id" : "18"
      },
      "similar" : "",
      "DSLIP" : "cdpOp",
      "modid" : "Model::Poser",
      "enteredon" : "Thu May  8 07:56:44 2003 GMT",
      "enteredby" : {
         "name" : "Seán Cannon",
         "id" : "DODGER"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "First of all, I'm requesting a new top level namespace be created\n    because the function and functionality of this module (as well as\n    others that would fit into this namespace) have not yet been\n    spproached to my knowledge. In the same way that Image::Magick paved\n    its own place simply by dealing with a subject no one else had done\n    much with, so shall this module attempt to bring the power of Perl\n    to 3D modellers, starting with Poser and Wavefront OBJect file\n    formats (these being the easiest to parse, as they are text-based)\n\n    I'm recommending 3DModel as the top level namespace because 'Model'\n    is too vague and '3D' is too broad (i.e., 3D might also encompass\n    rendering engines and such and not be directly applicable to\n    editing, creating, parsing and manipulating 3D models themselves).\n    However, the PAUSE form will not allow me to recommend 3DModel as\n    the top level, so I've filled in the above form with Model. I don't\n    see any reason a number should not be used.\n\n    As for the second level namespace, Poser is the name of a home 3D\n    Animation program by Curious Labs and formerly by Metacreations. Two\n    primary types of files are used by this program: Wavefront OBJ files\n    (which I am intending to write a parser for at a later date and\n    which future versions of this module will interact with), and Poser\n    files which come in several different types. Of the latter, there\n    are several mostly sorted by intended use -- the program itself will\n    treat them identically except for small variatins based on where\n    they were loaded from (for instance, an .HR2 hair file will load any\n    prop the same as a .PP2 prop file, the only difference being that a\n    .HR2 will remove the last .HR2 prop loaded and parented to the\n    currently selected figure first). PP2 prop files and CR2 Figure\n    files are treated identically when loaded.\n\n    There's only one real difference in loading of these files (which\n    depends on which of two general groups of files a file belongs to):\n    There are Pose files and Load Files. Pose files (hands, faces,\n    poses) apply to the currently selected figure and change properties\n    of that figure on load, while Load files (figures, props, hair,\n    cameras, lights and scenes) load new geometries or other actors into\n    the scene.\n\n    The syntax for the two types of files are identical, and a number\n    of exploitations fo the code's looseness have been discovered and\n    acted on by enterprising content developers to allow Poser to do\n    things it was never really designed to do.\n\n    This module would be able to read, modify, manipulate, and even\n    create new Poser documents, as well as allowing for some additional\n    sub-filetypes such as material libraries (which do not exist for\n    Poser 4).\n\n    It should be noted that Poser Pro Pack (essentially Poser 4.5) and\n    Poser 5 do have a built-in Python interpreter. If anyone would like\n    to work with me to make this module easily accessible to Python via\n    some sort of interface, I'd be happy to talk to you. I don't know a\n    thing about Python myself, so I don't know of its limitations or\n    capabilities.\n\n    The module is in development at a pre-release state of this time.\n    It's slow going due to some frustrating inconsistencies in the\n    syntax of Poser's markup language (incosistend block definition,\n    inconsistent statement terminators). However, I've recently had a\n    bit of a breakthrough and I am finally getting it to read Poser\n    markup into a data structure and I can finally start getting\n    somewhere B^)"
   },
   "meta" : {
      "message_id" : "200305080756.h487ujnO029691@pause.perl.org",
      "epoch" : 1052380605,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission Model::Poser",
      "file" : "20929.txt",
      "type" : "module_submission"
   }
}
