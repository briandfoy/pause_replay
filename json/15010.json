{
   "data" : {
      "userid" : {
         "name" : "Wim Vanderbauwhede",
         "id" : "WVDB"
      },
      "description" : "Object-oriented Verilog code generator",
      "communities" : "",
      "chapterid" : {
         "name" : "Language_Interfaces",
         "id" : "9"
      },
      "similar" : "",
      "DSLIP" : "anphp",
      "modid" : "Verilog::CodeGen",
      "enteredon" : "Tue Nov  5 11:02:23 2002 GMT",
      "enteredby" : {
         "name" : "Wim Vanderbauwhede",
         "id" : "WVDB"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Verilog::CodeGen is a set of modules and scripts to generate\n    Verilog code in a flexible way. I think it belongs in the Verilog::\n    namespace because it's and interface to the Verilog language.\n    Originally I called it DeviceLibs, but I think CodeGen better\n    reflects the purpose.\n\n    It is different from all other Verilog:: modules because it\n    generates Verilog code, while the other modules work on existing\n    Verilog code.\n\n    The module offers a number of methods to create objects that\n    generate the Verilog code based on the object's attributes. This\n    makes it very easy to create completely parametrizable designs. I\n    think the module is useful for designers doing non-standard Verilog\n    designs, like asynchronous logic, or analog designs in VerilogA.\n\n    A GUI to control the complete process of creating objects, adding\n    them to the device library, and testing is provided, but the modules\n    do not require the GUI."
   },
   "meta" : {
      "message_id" : "200211051102.gA5B2QX02285@pause.perl.org",
      "epoch" : 1036494146,
      "from" : "upload@p11.speed-link.de",
      "subject" : "Module submission Verilog::CodeGen",
      "file" : "15010.txt",
      "type" : "module_submission"
   }
}
