{
   "data" : {
      "userid" : {
         "name" : "Enrico Sorcinelli",
         "id" : "ENRYS"
      },
      "description" : "Manage sessions over HTTP requests",
      "communities" : "modperl@perl.apache.org",
      "chapterid" : {
         "name" : "World_Wide_Web_HTML_HTTP_CGI",
         "id" : "15"
      },
      "similar" : "AxKit::XSP::Session",
      "DSLIP" : "bdpOp",
      "modid" : "Apache::SessionManager",
      "enteredon" : "Wed Aug  7 11:27:15 2002 GMT",
      "enteredby" : {
         "name" : "Enrico Sorcinelli",
         "id" : "ENRYS"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "Apache::SessionManager - simple Apache/mod_perl extension that uses\n    Apache::Session to manage users sessions over HTTP requests.\n\n    Apache::SessionManager creates an object session (in Header parsing\n    phase, but not obligatorily) and makes it available to all other\n    handlers transparently by putting in pnotes. Others handlers can\n    retrieve session directly from pnotes or by calling the simple\n    functions provided (but not yet exported) by this module\n    (get_session($r), destroy_session($r), ecc).\n\n    After some search on CPAN I haven't found a mod_perl module that\n    does the same thing. The goal of Apache::SessionManager is to do a\n    module with no glue with others appserver than mod_perl itself (and\n    Apache::Session, of course). The module is work in progress, even if\n    already I use it.\n\n    I've used the root Apache:: namespace because it is a mod_perl\n    extension.\n\n    *\n\n    It seems to be a pollution over the Apache::SessionManager\n    namespace and I'll ask you an advice. Even if Apache::SessionManager\n    isn't never registered on PAUSE (I verified this by searching over\n    all modules@perl.org archives), an old RFC has submitted to\n    modperl@apache.org, on October 2000. After some searches I've found\n    the other (I think) module on sourceforge but last update is out of\n    date (2000-10-29 16:00)!\n\n    Moreover the two modules make _two_ different things!\n\n    - Apache::SessionManager that I propose is a wrapper around the\n    Apache::Session persistence framework for session data. - My module\n    uses pnotes() to pass arbitrary data across handlers and has a\n    session expiration mechanism. - I make this for transparent session\n    management while I write my modules using Apache::Session.\n\n    The other module hasn't support for persistence data over HTTP\n    requests and it has his own ID generation algorithm. There is no\n    glue with Apache::Session. It stores only session ID value into\n    notes().\n\n    The only thing that I can do is to mail to the authors at their\n    last known addresses, saying that I propose the same namespace and\n    wait for a reply...\n\n    ---\n\n    AxKit::XSP::Session tries to do the same but requires the AxKit\n    framework (even if it is possible to use a included module\n    Apache::AxKit::Plugins::Session without AxKit installed on the\n    system, but this is not really documented!)\n\n    --"
   },
   "meta" : {
      "message_id" : "200208071127.g77BRFH17397@pause.perl.org",
      "epoch" : 1028719635,
      "from" : "upload@p11.speed-link.de",
      "subject" : "Module submission Apache::SessionManager",
      "file" : "13072.txt",
      "type" : "module_submission"
   }
}
