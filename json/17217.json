{
   "data" : {
      "way" : "not everything in the 'Mail' name space, but some in a 'User'",
      "userid" : {
         "name" : "Mark Overmeer",
         "id" : "MARKOV"
      },
      "description" : "User schizophrenia",
      "communities" : "",
      "chapterid" : {
         "name" : "Opt_Arg_Param_Proc",
         "id" : "12"
      },
      "similar" : "User, AppConfig, MailTools",
      "DSLIP" : "idpOp",
      "modid" : "User::Identity",
      "enteredon" : "Mon Jan 20 10:09:43 2003 GMT",
      "enteredby" : {
         "name" : "Mark Overmeer",
         "id" : "MARKOV"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "[See related request for Mail::Identity name-space]\n\n    A user's life on a system is growing more complex, and therefore,\n    more powerful means of configuration are needed. As user, you have\n    to remember passwords and loginnames for databases, imap folders,\n    remote login. You have multiple email addresses, and use various\n    languages where setttings should be different.\n\n    In my development of Mail::Box, I have reached the point that the\n    existing means of configuration are not sufficient anymore. Carying\n    around info about a user in seperate values of an un-blessed hash is\n    a hassle. Therefore, I need a nice object. I want to do it the nice\n    way: not everything in the 'Mail' name space, but some in a 'User'\n    area. It will be fully independent of Mail::Box.\n\n    Planned classes: User::Identity Contains general info (defaults)\n    for the user, like name etc. When you specify a fullname only, it\n    tries to be smart and derived firstname, etc. Mail::Address does\n    things like that. User::Identity::Postal Home-address, company's\n    address, holiday address, each in a separate object.\n    User::Identity::Collection Mail::Identity (*) Mail::Identity::IMAP\n    Mail::Identity::Collection::Mutt ... maintain email alias files as\n    User::Identity::Collection. Replaces Mail::Cap\n\n    and so on... The need for Mail::Identity is urgent. For instance in\n    my home situation, I use 10 e-mail address for different purposes.\n    mailbox@overmeer.net for a mailinglist, website@craneveer.nl for a\n    website of my town. For each of those, I have want to have a\n    different 'From, 'Reply-To', footer, character encoding, etc. Of\n    course, with a smart search and extendible interface.\n\n    Small coding example: my $mail_id = $msg->sender; # a\n    Mail::Identity my $user_id = User::Identity->from($mail_id); my\n    $friends = User::Identity::Collection->file(...); $msg->delete\n    unless $friends->find($user_id);"
   },
   "meta" : {
      "message_id" : "200301201009.h0KA9hg03482@pause.perl.org",
      "epoch" : 1043057383,
      "from" : "upload@pause.x.perl.org",
      "subject" : "Module submission User::Identity",
      "file" : "17217.txt",
      "type" : "module_submission"
   }
}
