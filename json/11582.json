{
   "data" : {
      "userid" : {
         "name" : "Ralph Padron",
         "id" : "WHOELSE"
      },
      "description" : "Longitudinal redundancy check generation",
      "communities" : "",
      "chapterid" : {
         "name" : "String_Lang_Text_Proc",
         "id" : "11"
      },
      "similar" : "",
      "DSLIP" : "Rd+fa",
      "modid" : "String::LRC",
      "enteredon" : "Wed May  8 02:50:51 2002 GMT",
      "enteredby" : {
         "name" : "Ralph Padron",
         "id" : "WHOELSE"
      },
      "PS" : "The following links are only valid for module list maintainers:",
      "rationale" : "The Longitudinal Redundancy Check (LRC) is a one byte character\n    commonly generated from a string or block of bytes as a form of\n    error checking in data transmission (over analog systems or any\n    line-by-line system where the data is enclosed in STX-ETX\n    characters).\n\n    Some uses are for TCP socket based communication for financial\n    protocols that are currently in use (credit card, debit card, check\n    and other electronic payments).\n\n    I've found no module on CPAN that would provide the LRC of a string\n    and although the routine is a fairly simple loop mechanism,\n    hopefully, a pre-existing module on CPAN may assist other authors\n    (not having to research the algorithm in books) by reducing their\n    development times. Personal tests show the C routine in this version\n    of my module may run in 1/20th the time a similar perl subroutine\n    may take (supposing my calculation is logical).\n\n    This is not to be confused with 7 data bit, Even Parity encoding\n    methods for modems, which String::Parity may deal with (unless\n    mistaken), it is a redundancy-check \"byte\"."
   },
   "meta" : {
      "message_id" : "200205080250.EAA04897@pause.perl.org",
      "epoch" : 1020826251,
      "from" : "upload@p11.speed-link.de",
      "subject" : "Module submission String::LRC",
      "file" : "11582.txt",
      "type" : "module_submission"
   }
}
