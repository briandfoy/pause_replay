Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:8573
Return-Path: <tzz@iglou.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 70015 invoked by uid 75); 1 Nov 2001 16:59:20 -0000
Received: from sendmail@shell1.iglou.com (HELO iglou.com) (192.107.41.17)
  by onion.perl.org (qpsmtpd/0.04) with SMTP; Thu Nov  1 16:59:20 2001 -0000
Received: from tzz by iglou.com with local (8.9.3/8.9.3)
	id 15zLBQ-00023v-00; Thu, 01 Nov 2001 11:59:12 -0500
To: modules@perl.org
Subject: request for PAUSE ID: TEODOR
Message-ID: <E15zLBQ-00023v-00@iglou.com>
Date: Thu, 01 Nov 2001 11:59:12 -0500
Approved: news@nntp.perl.org
From: tzz@iglou.com (Teodor Zlatanov)


Name: Teodor Zlatanov
e-mail: tzz@iglou.com
Requested user ID: TEODOR

Description:

I've written a two-way hash module (proposed name: Tie::TwoWayHash)
which will keep a two-way association list in internal hashes.  For
instance, say you have a list of machines, and each machine can belong
to one or more classes.  How do you find out which machines belong to a
given class?  This is basically a two-way mapping between two disjoint
sets.

Usually this is automated through two hashes, and the user keeps track
of them manually.  With Tie::TwoWayHash, the user only needs to add or
delete elements in the first set (giving the list of associated elements
in the second set will automatically vivify them; deleting all the
mappings to an element in the second set will delete it as well).

Add/delete of elements in the second set acts the same way,
automatically vivifying or deleting elements in the first set.

The advantage of doing this through a module:
- less work for the user
- optimized fetch, at the expense of slightly slower store/delete

I am not aware of previous module work in this direction.  Please
contact me with questions or comments.

Thanks
Ted
