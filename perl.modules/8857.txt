Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:8857
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 6350 invoked by uid 76); 21 Nov 2001 00:50:31 -0000
Received: from root@dubravka.kbx.de (HELO pause.perl.org) (212.40.160.59)
  by onion.perl.org (qpsmtpd/0.04) with SMTP; Wed Nov 21 00:50:31 2001 -0000
Received: (from nobody@localhost)
	by pause.perl.org (8.9.3/8.9.3) id BAA15747;
	Wed, 21 Nov 2001 01:50:19 +0100
Date: Wed, 21 Nov 2001 01:50:19 +0100
Message-ID: <200111210050.BAA15747@pause.perl.org>
Reply-To: modules@perl.org
Subject: Module submission HTTP::Slap
To: modules@perl.org, earl@cpan.org
Approved: news@nntp.perl.org
From: upload@p11.speed-link.de ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       HTTP::Slap
  DSLIP:       bdpOp
  description: for simple HTTP requests and complex paths
  userid:      EARL (Earl Cahill)
  chapterid:   15 (World_Wide_Web_HTML_HTTP_CGI)
  communities:

  similar:
    HTTP::Simple and LWP for simple stuff, nothing for the complex

  rationale:

    Slap has a very simple slap method which is just like LWP::get.

    The real power of the module is to walk a journey, which is an
    array of pages to request, where the next url to get can be
    generated dynamically based on the html previously retrieved. Each
    page in a journey can be verified based on a regex, and a code ref
    can be passed to define pass and fail reactions. The action of forms
    can be followed based on the name of the form. Using smart_form,
    requests can be posted based on the information found on retrieved
    html in delimited forms. Timings are kept of how long the requests
    take. The software keeps track of cookies and posts them
    appropriately. Can also specify headers and general (non smart)
    forms.

    Very simple javascript can be followed, with hope of being able to
    follow more difficult javascript as the JavaScript module is
    developed.

    The software can be used to quite easily: write your own test cases
    benchmark different paths through sites login to remote sites and
    follow described paths

    I initially wrote the software to manage my espn fantasy sports
    teams, and am now using it at my work to help us keep track of test
    cases in CVS. Test cases can run off a cron and pass or failure
    behaviour could be to send an email.

    One goal was to make the module have less dependencies than LWP,
    and thus easier to install. Consequently, https is supported, but
    the Net::SSLeay modules are required and not used so users don't
    need to install it for simple gets. Same thing with JavaScript,
    which is off by default, but can be easily turned on, so that the
    JavaScript module gets required.

    I know the simple get stuff is just like LWP, and likely several
    other things, but the journey stuff is what makes the software
    really worthwhile I think.

    My main goal was to write a free, easy to use program in perl that
    mimiced the Segue Silktest stuff, which we have had a bit of trouble
    with here, and which was far from free.

    Thanks, Ear

  enteredby:   EARL (Earl Cahill)
  enteredon:   Wed Nov 21 00:50:18 2001 GMT

The resulting entry would be:

HTTP::
::Slap            bdpOp for simple HTTP requests and complex paths   EARL


Thanks for registering,
The Pause Team

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=53200000_f6fc834ed294a6fb&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=53200000_f6fc834ed294a6fb&SUBMIT_pause99_add_mod_insertit=1
