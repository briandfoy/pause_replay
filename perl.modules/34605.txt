Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:34605
Return-Path: <root@schmorp.de>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 17660 invoked from network); 8 Sep 2004 21:54:38 -0000
Received: from x1.develooper.com (63.251.223.170)
  by lists.develooper.com with SMTP; 8 Sep 2004 21:54:38 -0000
Received: (qmail 16810 invoked by uid 225); 8 Sep 2004 21:54:38 -0000
Delivered-To: modules@perl.org
Received: (qmail 16799 invoked by alias); 8 Sep 2004 21:54:37 -0000
X-Spam-Status: No, hits=-4.9 required=8.0
	tests=BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received: from rain.plan9.de (HELO rain.plan9.de) (193.108.181.162)
  by la.mx.develooper.com (qpsmtpd/0.27.1) with ESMTP; Wed, 08 Sep 2004 14:54:33 -0700
Received: from [10.0.0.5] (helo=mailout.schmorp.de ident=schmorp)
	by rain.plan9.de with esmtp (Exim 4.34)
	id 1C5AOZ-0001a2-V9
	for modules@perl.org; Wed, 08 Sep 2004 23:54:28 +0200
Received: from [10.0.0.2] (helo=fuji.laendle)
	by mailout.schmorp.de with esmtp (Exim 4.34)
	id 1C5AOZ-0004D1-0S
	for modules@perl.org; Wed, 08 Sep 2004 23:54:27 +0200
Received: from root by fuji.laendle with local (Exim 4.30)
	id 1C5AHg-0005HA-3m
	for modules@perl.org; Wed, 08 Sep 2004 23:47:20 +0200
Date: Wed, 8 Sep 2004 23:47:20 +0200
To: modules@perl.org
Subject: Re: Module submission Linux::DVB
Message-ID: <20040908214720.GA19918@schmorp.de>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
X-Operating-System: Linux version 2.4.25 (root@fuji) (gcc version 2.95.4 20011002 (Debian prerelease)) 
X-Virus-Checked: Checked
Approved: news@nntp.perl.org
From: pcg@goof.com (( Marc) (A.) (Lehmann ))

[Sorry for the headers, but this has been cut&pasted from the mail archives as
the author forgot to include me in the discussion]

> >   rationale:
> >
> >     "DVB" should be obvious, because it's a module aboutg this API and
> 
> I think that "DVB" is obvious only to people who are interested in
> video technology. Other people will probably know DVB through another
> name: "ugly satellite dish" ;-).

Well, as long as they know what it means all is well, don't you agree? :)

Seriously: if they don't know what it means they could direct their eyes
or fingers a few centimeters to the right (or elsewhere) and read what it
means. That's one of the purposes of the module list, describing modules,
isn't it?

> Anyway, I don't think that the aim of a name (and name spaces) is to
> provide a precise taxonomy of available perl modules.

I fully agree. Worse, forcing such a taxonomy on unrelated modules is a
bad idea. I feel forced currently....

> I'd like to think that the aim is to guide the casual user when he
> browses the available modules.

Very difficult to do. If you talk about the module list then you should be
aware that this isn't a list of available modules. Other forms of module
listings are, without exception, searchable (correct me if I am wrong).

> Let's consider an average user who does not know or care about
> DVB. This guy will be glad that DVB is under Video since he does not
> care about it and will be glad that the name space is somewhat less
> cluttered.  (90 % of users)

There are a number of problems with this argument, and I don't think it is
salvagable:

* Why would somebody who does not know DVB want to use DVB?
  (Especially as it's impossible to understand the API of this module and probably
  many other DVB-related modules without knowing the standards precisely?)
* Why would said person be glad that it is under video, given that it is
  about a lot of things NOT video?
* Why would order matter when he is just browsing?

Remember that the module list provides a description, which, in this case,
mentions "video". I think the description could be better, but the space
in the module list is extremely limited, so I think expansion of the
acronym is the least bad choice.

> Let's consider another user looking to do radio through DVB. He knows
> that DVB is a *video* standard and will probably look into Video to

This is wrong, because he cannot know what isn't true:

- DVB is not a standard. It's a large family of standards. Very large for
  my standards.

- Almost none of the DVB standards deal with video. I'd actually go so far
  as to say none of them _directly_ deal with video.

The problem with this discussion is that people who know very little about
DVB make claims such as the above which simply aren't true.

I corrected this, but for some reason people don't believe me. However, I
do not think it's my job to fight against such false claims. If it were
questions, then I would have no problems with it, but I epxect that people
who make outright claims about DVB would first check what they are talking
about. At least check before claiming things the module author did already
present differently.

> get DVB (if there's no DVB:: name space). Then he will pick a module
> according to the OS he's using. If this user does not think about
> looking into Video::* and does not find DVB while browsing, he can
> always use search.cpan.org. But that's a corner case.

Just as using google to find something on the web is a corner case.

This is utterly unrealistic. A user (or better: developer) who *looks* for
a specific module to deal with his DVB requirements will certainly not
consult the module list, for the simple reason that the module list only
lists a few of the available modules.

Sure, some users might use the module list for such a task, but that
doesn't change the fact that they are using the wrong tool.

This is especially true as the module list seems to mutate into a
club-only facility that stops listing modules because of the whim of some
of it's admins. Such a module list will quickly fall in obsolescence.

The module list can only make sense if it openly accepts all modules.

It's great that a place exists where module names can be discussed.
However, the people maintaining the modules list must get aware of the
fact that neither the module list nor they define or enforce or even
manage the CPAN namespace. The best they can and should do (and I am
thankfully for it), is suggest better names if a name might be bad. This
happened to me in the past, but is not what is happening now.

In any case, searching the module list for DVB is much faster than trying
to guess the (arbitrary) toplevel hierarchy.

> So I think that Video::DVB::Linux make sense for Linux specific parts
> and will satisfy the majority of perl users (non-video users also).

Well, it's just that the "Video" part makes no sense whatsoever. One could
argue about the latter, but as long as no other modules exist nor there is
any indication of other modules existing it would be bad idea (IMHO) to
create a lone toplevel hierarchy. Look at Video::Capture... where are the
other (non-linux-specific) capture modules?

Now imagine that a large perl module family would pop up which implements
all the DVB standards (unlikely, but a great thing to have).

As a matter of fact, _none_ of these modules will deal with video. You
will now have a truckload of modules within the Video::* hierarchy that
all have nothing to do with video, except Video::DVB::Linux, which,
however, is as video-specific as File::Search is.

Video within DVB is transmitted using MPEG2. There is nothing DVB-specific
about this MPEG-2, and as such modules and programs dealing with mpeg 2
will unlikely be named sth. with DVB, as that would limit their scope too
much.

All the rest of the DVB-specific (and non-linux-specific) namespace would
then deal with non-video things.

In the future, we will probably see MPEG 4 (also not a DVB standard) and
maybe other video formats. None of these will be DVB-specific.

> As for the linux specific argument, non linux specific modules falls
> into: Video::DVB.

Only in the unlikely event of somebody using the Video::DVB namespace for
his non-video-specific module, which would be a very bad idea. (again, and
again, and again...). That leaves the namespace choice of "DVB" (I did
suggest Convert::DVB before, but I do not believe i that nor in "DVB" very
much).

I do think there is ampe time to wait for such modules to pop up, though.

> Video::DVB::Radio::Linux. But that's fair enough since this radio stream
> is transmitted through a medium designed for video and extended for
> radio.

Again, you make a claim about DVB that is simply not true. Specific claims
about the evolution of DVB, even. Would you explain where this precise
knowledge comes from? I would like to disagree.

> I prefer to put Linux at the end,

This is the best argument so far, as preference weighs a lot in
practise. I still do believe in making names as precise as possible. I
want to help people solve a problem easier because somebody else made part
of their work. In this case I want to help people who want to use DVB
in linux most, and people browsing the module list without knowing what
DVB is less => these can always read about DVB (the standards are freely
available, and knowledge will at one point become pretty commonplace).

They need to before using the module, anyways.

> Even if you don't plan to provide DVB modules for another OS, someone
> might do it later. Let's not close this door.

Here is a logical problem: Why does having a Linux::DVB module close the
door for a Win32::DVB (or else) module? Can you explain this? It does not
make sense to me. Also, *iff* the argument were true you could apply it to
"DVB", too: Having a DVB::Linux module closes the door for a LVM::Linux
module. You will unlikely agree to this.

Also, I am not sure what the benefit would be to move a linux-specific
module into a general (and still undefined) namespace. You made a few
suggestions here for a namespace (which is great), but I feel it would be
big mistake to implement it.

Given that the module clearly *is* linux-specific and there is no clear
candidate for another namespace this looks like convincing evidence that
Linux::* is a good place.

> IMHO, only *really* linux specific APIs should be in Linux::*

What makes you think anything about it isn't linux-specific?

I am growing tired of telling people that the linux-dvb-api is, well,
highly linux-specific.

Obviously none of you believes that, without even knowing the API. Can you
explain this to me? Why am I, as the implementor, in such a bad position
to know the portability of an API and why are so many peope on the modules
list who don't know DVB well and neither the linux-api nor the module in
such a good place?

I mean, I *want* suggestions. I am totally hilarious when people provide
me with their hints, help and thoughts about my module in their free time,
free of charge.

But what on earth makes you think you can *vote* on the name of my
module? Or *place* my module somewhere in the hierarchy? Or make *claims*
on the grounds of severely lacking knowledge?

> Linux aims to be a Unix, there's should be few modules in there.

Why would this be a valid conclusion? Just because linux implements the
unix API (well, tries to), it is by no means limited to the unix api,
and a lot of functionality isn't mentioned in the unix standard that is
implemented by Linux.

The argument seems weak to me. What is in favour of the above claim?

> Only module closely related to Linux kernel such as /proc interface,
> modprobe interface...

Or mine, which does direct driver access that only works on linux,
nowehere else? I guess even proc is more portable, as many Os'es have a
proc filesystem with one entry per process.

> For instance LVM can be found on both HPUX and Linux. Perl LVM modules
> should fall into HPUX::* and Linux::* only if there's no hope of
> having a reasonably common interface. 

I am not sure that one would not be able to have such an interface, but
it's certainly not in sight. Forcing these modules into an artificial and
arbitrary namespace is IMHO not warranted because of the *possibility*
that it might make sense in the future.

Right now, are there any candidates for authoring such a unified module?

> I hope this is not the case for DVB. (Does DVB exists on FreeBSD ?)

Even if it exists, why do you think the driver model would be the same? As
a matter of fact, having the same driver model for hardware in different
operating systems hasn't happened in the past, not even between closely
related operating systems such as linux and freebsd. Much less so between
ther operating systems.

For some reason this would be different with DVB? I don't think so.

> So I also vote to place your module in Video::* , preferably
> Video::DVB::Linux.

You can vote on it, but it has no relevance whatsoever.

If people want to choose namespaces, then they need to do so by arguments
and logics. Voting on such things is ineffective, and mere propaganda.

> Anyway, thanks for your work and for offering it to the community. I
> really hope that we will be able to reach an agreement regarding its
> name.

Not as long as the only arguments I hear ignore what I said previously. I
do have a problem with peope who know better without really knowing.

Right now, I feel obviously(?) a bit agitated. For one thing, I don't
accept that people on the modules list think they should make more work
for me. I offer my module to the public, and if they don't want to use it
(because it's bad) that is fine with me. I might even try to change this
so I get more famous or whatever I want to be or get in exchange :) The
last thing I want is to be forced to do extra work (redesigning the module
family) just because some people think I should, while I disagree. I would
happily do this if there were a sensible discussion, but there hardly is.

In my opinion, either people know enough to make suggestions, or they
don't. In the latter case, they should just accept my module until it
becomes clear that it's wrong. Refusing the module list entry on the
grounds of non-technical opinions and non-arguments is, I think absolutely
unacceptable and convinces me that the module list is not very useful,
like most closed ("proprietary") systems.

Don't get me wrong, I am not offended personally by you, and I do not want
to offend you. I registered a lot of modules through the perl module list
in the past, and got a lot of controversial discussion, a lot of good
feedback and, well, rarely bad feedback. I happily changed my module names
even after having done releases because I received convincing and informed
suggestions.

Never did I encounter a case where some module list maintainer started
to refuse to register a module and tried to force his (in this case
very uninformed) opinions on the author, ignoring his arguments and
explanations. That must not be the case.

I really do not believe that a module list that includes and excludes
modules at the will of some admins is a useful tool for users. Such a list
can only make sense if it's flexible and *open* (and as exhaustive as
possible).

:<

-- 
                The choice of a                              |
      -----==-     _GNU_                                     |
      ----==-- _       generation     Marc Lehmann         +--
      ---==---(_)__  __ ____  __      pcg@goof.com         |e|
      --==---/ / _ \/ // /\ \/ /      http://schmorp.de/   --+
      -=====/_/_//_/\_,_/ /_/\_\      XX11-RIPE            |
                                                           |
