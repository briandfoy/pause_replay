Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:1134
Return-Path: <TEverett@ALASCOM.ATT.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 15121 invoked from network); 19 Feb 2000 02:46:15 -0000
Received: from ckmso1.att.com (HELO ckmso1.proxy.att.com) (12.20.58.69)
  by tmtowtdi.perl.org with SMTP; 19 Feb 2000 02:46:15 -0000
Received: from alascombrgh.alascom.att.com ([135.78.0.47])
	by ckmso1.proxy.att.com (AT&T IPNS/MSO-2.2) with ESMTP id VAA10372
	for <modules@perl.org>; Fri, 18 Feb 2000 21:45:50 -0500 (EST)
Received: by alascombrgh.alascom.att.com with Internet Mail Service (5.5.2650.21)
	id <FCT4CG0F>; Fri, 18 Feb 2000 17:45:45 -0900
Message-ID: <912D82D764AAD211B83A0008C7A4594CF1447B@alascomexc2.alascom.att.com>
To: "'modules@perl.org'" <modules@perl.org>
Subject: Need a name for Array::IntSpan
Date: Fri, 18 Feb 2000 17:45:42 -0900
MIME-Version: 1.0
X-Mailer: Internet Mail Service (5.5.2650.21)
Content-Type: text/plain;
	charset="iso-8859-1"
Approved: news@nntp.perl.org
From: TEverett@ALASCOM.ATT.com ("Everett, Toby")

Well, I've got a name.  I'm just not sure if it's optimum.  For now, I'm
calling the module Array::IntSpan.  Think of it as a merger between
Set::IntSpan and a normal Perl array.  The idea is that you specify
different values for mutually exclusive ranges of integers and then you can
do lookups on arbitrary integers.

The interface consists of two methods, set_range and lookup.  The set_range
method takes three parameters - the start and end indices and the value.  It
properly deals with overlapping ranges, replacing any existing data.  The
lookup method takes a index and returns the value (if it is defined) or
undef if it isn't.  It uses an internal RLE style system (OK, $self looks
like [[start, end, value], [start, end, value], . . . .]).  It uses binary
searches for lookups.  Appending a range is O(1), but inserting is O(n)
(where n is the number of ranges), since I use splice for inserts.

I've also implemented Array::IntSpan::IP, which takes IP addresses in the
three major forms (dotted decimal, 4 byte string in network order, and as an
integer) and maps them to the later form before accessing the data.  Handy
for routing type issues (take a list of addresses and determine what subnets
they are in based on an Array::IntSpan::IP object that has a list of subnet
ranges and names - even if the subnets are of various sizes).

Anyway, I didn't see anything like this in existence.  Does such exist?  Did
I reinvent the wheel?  If not, what's a good name for it?

--Toby Everett

