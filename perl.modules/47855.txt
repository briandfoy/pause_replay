Newsgroups: perl.modules,perl.module-authors
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:47855 perl.module-authors:4454
Return-Path: <david@hyperbolic.net>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Delivered-To: moderator for modules@perl.org
Received: (qmail 6697 invoked from network); 13 Mar 2006 13:25:42 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 13 Mar 2006 13:25:42 -0000
Received: (qmail 22619 invoked by uid 225); 13 Mar 2006 13:25:42 -0000
Delivered-To: modules@perl.org
Received: (qmail 22608 invoked by alias); 13 Mar 2006 13:25:41 -0000
X-Spam-Status: No, hits=-2.5 required=8.0
	tests=BAYES_00,FORGED_RCVD_HELO,SPF_HELO_PASS,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of david@hyperbolic.net designates 216.254.73.76 as permitted sender)
Received: from dsl254-073-076.nyc1.dsl.speakeasy.net (HELO janus.hyperbolic.net) (216.254.73.76)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Mon, 13 Mar 2006 05:25:38 -0800
Received: from [127.0.0.1] (gateway.hyperbolic.net [192.168.15.1])
	(authenticated bits=0)
	by janus.hyperbolic.net (8.13.1/8.13.1) with ESMTP id k2DDPStK010839
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO);
	Mon, 13 Mar 2006 08:25:30 -0500
Message-ID: <441572C5.6020807@hyperbolic.net>
Date: Mon, 13 Mar 2006 08:25:25 -0500
User-Agent: Thunderbird 1.5 (Windows/20051201)
MIME-Version: 1.0
To: Jim Schneider <jschneid@jrcsdevelopment.com>
CC: module-authors@perl.org, modules@perl.org
Subject: Re: Proposed module names
References: <000c01c6462e$df167a30$6600a8c0@elsegundo>
In-Reply-To: <000c01c6462e$df167a30$6600a8c0@elsegundo>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Virus-Scanned: ClamAV version 0.88, clamav-milter version 0.87 on localhost
X-Virus-Status: Clean
Approved: news@nntp.perl.org
From: david@hyperbolic.net (David Golden)

Jim Schneider wrote:
> I have three modules I am preparing to submit to CPAN, and I was hoping 
> to get some input on the names.
>  
> The modules are:
> 1)  DBIx::Class::Simple - a simpler alternative to DBIx::Class, but 
> alas, not compatible (not even a little bit).  It takes a collection of 
> data structures that describe your tables, and turns it into a 
> collection of classes that can be used to access them.  I'm also open to 
> the name DBIx::Simple::Class or DBIx::Simple::Object

Given that DBIx::Class is an alternative/replacement for Class::DBI and 
thus is a fairly substantial project in its own right, I'd rather see 
you find a different name -- a noncompatible ::Simple is more confusing 
than helpful.

Likewise, there's already a well-known DBIx::Simple -- which has nothing 
do with object-relational mapping, so an unrelated 
DBIx::Simple::Class/Object is similarly confusing.

I think you may be best if you come up with your own DBIx::* name that 
captures what you feel is distinctive about your module -- beyond it 
just being "simple".

DBIx::Objects is taken, but DBIx::ORM is available, so maybe something 
like DBIx::ORM::Simple (or replace "Simple" with a better adjective) 
would work for you.

If you really want "simple" in there, there are several modules of the 
compound type DBIx::SimpleNoun, so maybe DBIx::SimpleObjects or 
DBIx::SimpleORM would work for you.  Replace Simple with Easy likewise.

> 2)  WWW::Scraper::Zip4 - a simple web scraper to retrieve address 
> information from the USPS website.

Again, there is already an unrelated WWW::Scraper, so I'd avoid that. 
There seems to be an emerging style for these kinds of web interfaces 
that is site-first, task-second, so how about this (with the additional 
clarity of the proper name of a nine-digit zip):

WWW::USPS::ZipPlus4

As a side note, a quick CPAN search on "USPS" reveals 
Scrape::USPS::ZipLookup -- so you might want to address how your module 
is different/better.

> 3)  Well, I'm currently calling it TemplateLoader, but that's too 
> horrible for words.  Your provide some particulars on the module "use" 
> line, and it creates a method in the calling class that loads the 
> template.  Any suggestions for this one would definitely be appreciated.

This is far too generic a description to offer help.  Given the myriad 
templating systems already out there, can you describe what your module 
does that is distinctive?  That's usually a good place to start when 
thinking about names.

Regards,
David Golden
