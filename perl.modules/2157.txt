Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:2157
Return-Path: <selkovjr@selkovjr.xnet.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 11250 invoked from network); 17 Jun 2000 03:32:25 -0000
Received: from quake.xnet.com (HELO mail.xnet.com) (198.147.221.67)
  by tmtowtdi.perl.org with SMTP; 17 Jun 2000 03:32:25 -0000
Received: from selkovjr.xnet.com (selkovjr.xnet.com [205.243.141.67]) by mail.xnet.com (8.9.3+Sun/XNet-3.0R) with ESMTP id WAA06596 for <modules@perl.org>; Fri, 16 Jun 2000 22:32:23 -0500 (CDT)
Message-ID: <200006170332.WAA06596@mail.xnet.com>
To: modules@perl.org
Reply-to: "Gene Selkov, Jr." <selkovjr@mcs.anl.gov>
Subject: Registration requested
Date: Fri, 16 Jun 2000 21:54:53 -0500
Sender: selkovjr@selkovjr.xnet.com
Approved: news@nntp.perl.org
From: selkovjr@mcs.anl.gov ("Gene Selkov, Jr.")

name: Gene Selkov, Jr.

email address: selkovjr@mcs.anl.gov

homepage (for this project): http://home.xnet.com/~selkovjr/ElectricArc/

user-ID: SELKOVJR

description: A suite of Tk-based modules and tools that aims to serve as a foundation for various CAD applications. It is being primarily developed to support the encoding and simulation of metabolism, but its code is generic enough to be used in other applications, such as electronic/electrical circuitry, computer network design and monitoring, E-R modeling, etc. The most important difference between ElectricArc (the tentative name of the project, reflecting its graph orientation) and other diagramming software products, such as Visio, Dia and Killustrator, is in their purpose: Visio and its like create, alter, store and display the diagrams, while ElectricArc creates and manipulates the data that, among other possible forms of processing, can be displayed as diagrams. There is no major difference in purpose between ElectricArc and most of the machine-oriented CAD software which is, by definition, built to produce computer-readable data. However, what makes ElectricArc distin!
ct is that it does not use any application-specific data models; it leaves it up to the user to be aware of, and adhere, to the rules and conventions of their profession, and is, therefore, versatile and easily extensible. In addition, it does not confine the user within a private data format: the data it creates is SGML-compliant and can be easily parsed and processed by other tools.

DSLI entry: RdpO	Generic diagram manipulation toolset

public awareness: minimal. I did not advertise it widely until I became confident of its viability. AFAIK, It has not so far been mentioned in the printed sources. It became available on the web in January 1999 and it saw, according to my estimates, several hundred visitors, some of whom have linked their sites to it: 

http://www.google.com/search?q=ElectricArc&meta=lr%3D%26hl%3Den&btnG=Google+Search

I demonstrated it personally on multiple occasions, including the Virtual Human conference held by NIH in October 1999 and DOE Contractor and Grantee Workshop in February this year. Although it enjoyed a fair amount of interest and is actually in use in a number of places, no one has so far volunteered to join the development. While I realized that it may never happen, I have set the stage for this project to become a collaborative effort. The code is reasonably object-oriented, substantially documented, and the ideas it is based upon are simple enough to be understood by a casual developer.

In summary, here's the list of reasons why I would like it to be on CPAN:

1. This class of products is under-represented in general, and, in free software, it is almost void. 
2. There a lot of demand, but very little is being offered, and for too much.
3. ElectricArc introduces the niche-killing ideas and provides a working example of their implementation.
4. Has educational value: it is a little more OO than Tk itself, and a lot less technically involved, but because it derives from Tk, it is fun to work with. Parts of it are properly sized for a student project and can be developed independently. With a little bit of luck, I will be able to solicit some help from the universities this year.
5. Despite its simplicity, just the number of features I know how to add is so large that it will take more than one person to complete it in a finite amount of time. I need to attract volunteer co-developers -- that's what CPAN is so good for.
6. (this is where I am a bit selfish) My code depends on a dozen of other perl packages, and it's a pain in the neck to distribute. People are using it for what it's worth already, and I end up helping two-thirds of them with installations. I use a perl bundle for that; the only piece not in the bundle is ElectricArc itself.

I hope I described the situation well enough. Please let me know if I missed something.

Thank you for your time,

--Gene

