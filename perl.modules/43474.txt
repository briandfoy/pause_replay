Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:43474
Return-Path: <cpan@ali.as>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 11416 invoked from network); 1 Sep 2005 03:10:22 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 1 Sep 2005 03:10:22 -0000
Received: (qmail 29645 invoked by uid 225); 1 Sep 2005 03:10:22 -0000
Delivered-To: modules@perl.org
Received: (qmail 29638 invoked by alias); 1 Sep 2005 03:10:21 -0000
X-Spam-Status: No, hits=-5.9 required=8.0
	tests=ALL_TRUSTED,BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from x6.develooper.com (HELO lists.develooper.com) (63.251.223.186)
    by la.mx.develooper.com (qpsmtpd/0.28) with SMTP; Wed, 31 Aug 2005 20:10:20 -0700
Received: (qmail 11411 invoked by uid 515); 1 Sep 2005 03:10:17 -0000
Message-ID: <20050901031017.11410.qmail@lists.develooper.com>
To: modules@perl.org
Date: Thu, 01 Sep 2005 13:10:17 +1000
User-Agent: Mozilla Thunderbird 1.0 (Windows/20041206)
X-Accept-Language: en-us, en
MIME-Version: 1.0
Subject: Re: Module submission Perl::Strongly::Typed
References: <200509010002.j8102aZn010413@pause.perl.org>
In-Reply-To: <200509010002.j8102aZn010413@pause.perl.org>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Posted-By: 202.90.48.125
Approved: news@nntp.perl.org
From: cpan@ali.as (Adam Kennedy)

The use of Perl here is superfluous, the Perl:: namespace is generally 
about things that analyze and manipulate actual Perl source code.

The fact that it's a system for strict types in Perl and not PHP is 
pretty obvious :)

In addition, have you looked at Damian Conway's Attribute::Types (which 
is what I was about to suggest as a possible better name).

It seems to use attributes to allocate tied vars, like yours seems to.

Is there a difference here, or have you just missed it?

Adam K

Perl Authors Upload Server wrote:
> The following module was proposed for inclusion in the Module List:
> 
>   modid:       Perl::Strongly::Typed
>   DSLIP:       bdppp
>   description: Declare strongly typed variables
>   userid:      METZZO (Mark Ethan Trostler)
>   chapterid:   2 (Language_Extensions)
>   communities:
> 
>   similar:
>     Tie::Constraint
> 
>   rationale:
> 
>     Wanted ability to 'lock-down' variables to specific types (both
>     primitive & object types) to minimize programmer error. Declarations
>     look like: my $int_only_variable :TYPE('int'); # OR my $file_io_only
>     :TYPE('IO::File'); # OR my @array_of_strings :TYPE('string'); # OR
>     my $scalar_ref :TYPE('SCALAR'); # OR my @array_of_array_refs
>     :TYPE('ARRAY'); # OR my %hash_of_hash_refs :TYPE('HASH'); # OR my
>     %hash_of_xml_parsers :TYPE('XML::Parser'); #OR my $my_own_darn_type
>     :TYPE(\&my_validation_function);
> 
>     Any variable (scalar, array, or hash) can be locked down to only
>     contain a certain type of variable - besides the 'builtin' types
>     ('int', 'string' (non-ref), 'SCALAR', 'HASH', 'ARRAY' (refs), and
>     any object type (like 'XML::Parser' or whatever), users can roll
>     their own by supplying a function ref which'll get called with the
>     value of whatever is attempting to be assigned to that variable.
>     Returning 1 means okay, returning 0 means no.
> 
>     If the assignment is refused Perl::Strongly::Typed croaks with an
>     informative message about what went wrong...
> 
>     thanks! Mark
> 
>   enteredby:   METZZO (Mark Ethan Trostler)
>   enteredon:   Thu Sep  1 00:02:36 2005 GMT
> 
> The resulting entry would be:
> 
> Perl::Strongly::
> ::Typed           bdppp Declare strongly typed variables             METZZO
> 
> 
> Thanks for registering,
