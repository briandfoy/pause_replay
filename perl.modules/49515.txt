Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:49515
Return-Path: <uleobeh02@sneakemail.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 16933 invoked from network); 21 Jun 2006 06:57:24 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 21 Jun 2006 06:57:24 -0000
Received: (qmail 14845 invoked by uid 225); 21 Jun 2006 06:57:24 -0000
Delivered-To: modules@perl.org
Received: (qmail 14829 invoked by alias); 21 Jun 2006 06:57:23 -0000
X-Spam-Status: No, hits=0.3 required=8.0
	tests=BAYES_00,RCVD_IN_NJABL_PROXY,RCVD_IN_SORBS_SOCKS,SPF_HELO_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from can01.de (HELO can01.de) (213.203.199.108)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Tue, 20 Jun 2006 23:57:21 -0700
Received: from [10.59.0.18] (i3ED6E1BD.versanet.de [62.214.225.189])
	by can01.de (can01.de) with ESMTP id 3090542C8F6;
	Wed, 21 Jun 2006 08:57:02 +0200 (CEST)
Message-ID: <4498EDC7.1060602@sneakemail.com>
Date: Wed, 21 Jun 2006 08:57:11 +0200
User-Agent: Thunderbird 1.5.0.4 (X11/20060615)
MIME-Version: 1.0
To: modules@perl.org, jvanasco@cpan.org
Subject: Re: Module submission Authen::SoopaCaptcha
References: <200606201904.k5KJ47SU006573@pause.perl.org>
In-Reply-To: <200606201904.k5KJ47SU006573@pause.perl.org>
Content-Type: text/plain; charset=ISO-8859-15; format=flowed
Content-Transfer-Encoding: 7bit
Approved: news@nntp.perl.org
From: uleobeh02@sneakemail.com (Steffen Mueller)

Perl Authors Upload Server schrieb:
> The following module was proposed for inclusion in the Module List:
> 
>   modid:       Authen::SoopaCaptcha
>   description: OOP framework for managing captchas

>   similar:
>     Authen::Captcha GD::SecurityImage
> 
>   rationale:
> 
>     SoopaCaptcha - SoopaCaptcha OOP Awesome Captcha
> 
>     if anyone can think of a better name, i'm all for it.
> 
>     ( I would have gone with Captcha alone, but Authen::Captcha is
>     taken )
> 
>     All the existing captcha modules were designed as imaging modules
>     for 1 library ( ie: gd ) then added in support for other libraries
>     as needed ( ie: image magick )
> 
>     If you need to switch imaging libraries on your server, you're SOL
>     - you need to use a different module and refactor all your code if
>     you need to implement an alternative system ( sound, text puzzles )
>     you're also SOL if you need to implment a system for clusters, where
>     state etc isn't on 1 machine, you're doubly SOL
> 
>     I designed a modular captcha system that would let programmers
>     specify and override the 'stages' of a captcha based on their own
>     requirements: The general notion is that a key maps a captcha. a key
>     is also like a credit card - it has some sort of internal checksum
>     that self-validates, and it also can be authenticated ( did you use
>     the key too much today ? ) a - key generation b - key authentication
>     c - generating a challenge d - rendering the challenge
> 
>     captcha challenges are abstracted into 3 elements: instructions
>     user_prompt correct_response
> 
>     given that, once we generate a challenge, we can then just say
>     "render this as sound using a drop in sound class" or "render this
>     as an image using a gd subclass" etc. if anyone ever needs to switch
>     output formats - text, image, gd vs imager - its just specifiing a
>     different render class. simple!

Now, what you describe sounds like Authen::PluggableCaptcha might be 
more appropriate? Authen::Captcha::Pluggable might not be good since 
Authen::Captcha is unrelated.

What do you think?
Steffen
