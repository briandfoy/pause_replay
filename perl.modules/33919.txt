Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:33919
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 39392 invoked from network); 2 Aug 2004 23:13:16 -0000
Received: from x1.develooper.com (63.251.223.170)
  by onion.develooper.com with SMTP; 2 Aug 2004 23:13:16 -0000
Received: (qmail 20484 invoked by uid 225); 2 Aug 2004 23:13:15 -0000
Delivered-To: modules@perl.org
Received: (qmail 20477 invoked by alias); 2 Aug 2004 23:13:14 -0000
X-Spam-Status: No, hits=-4.9 required=8.0
	tests=BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
  by la.mx.develooper.com (qpsmtpd/0.27.1) with ESMTP; Mon, 02 Aug 2004 16:13:13 -0700
Received: from pause.perl.org (localhost [127.0.0.1])
	by pause.perl.org (8.12.3/8.12.3/Debian-6.6) with ESMTP id i72ND3TB014305;
	Tue, 3 Aug 2004 01:13:03 +0200
Received: (from nobody@localhost)
	by pause.perl.org (8.12.3/8.12.3/Debian-6.6) id i72ND3lD014301;
	Tue, 3 Aug 2004 01:13:03 +0200
Date: Tue, 3 Aug 2004 01:13:03 +0200
Message-ID: <200408022313.i72ND3lD014301@pause.perl.org>
Subject: Module submission Interface::Param
Reply-To: modules@perl.org
To: modules@perl.org, shaunguth@cpan.org
X-Spam-Rating: onion.develooper.com 1.6.2 0/1000/N
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Interface::Param
  DSLIP:       MdpOp
  description: Add param()-style methods to your objects
  userid:      SHAUNGUTH (Shaun Guth)
  chapterid:    3 (Development_Support)
  communities:
    irc.topgamers.net #topgamers

  similar:
    Class::Virtual

  rationale:

    There are no existing Interface:: classes on CPAN, but I think it
    is a useful and needed namespace. These sets of classes are
    generally abstract (or virtual) classes which define a particular
    set of methods that subclasses should implement. This is
    exceptionally useful when writing plugin-type objects which need to
    have a consistent API even though they may have different
    functionality.

    Most of the time, these Interface definitions are included as a
    custom part of the program being written; however, there are cases
    for a general set of Interface:: objects. In particular is this one,
    Interface::Param, which lets calling objects know that this class
    supports a param() method which is expected to behave in a
    particular way. Included will be the most commonly used subclass,
    Interface::Param::Hash, which implements the interface by storing
    and retrieving values from an in-memory hash.

    Class::Virtual is related loosely in that it is an all-encompassing
    module for these types of classes, and I think quite possibly the
    Interface:: namespace could benefit from using it at the top level.

    Of course, I'm open to suggestions about the naming, module,
    design, code style, documentation, etc.

    (PS, I don't know if this gets sent along using the form on
    pause.perl.org, but the module is found at
    http://cpan.org/authors/id/S/SH/SHAUNGUTH/Interface-Param-0.2.tar.bz2
    (assuming the upload has gone through by the time you read this))

  enteredby:   SHAUNGUTH (Shaun Guth)
  enteredon:   Mon Aug  2 23:12:53 2004 GMT

The resulting entry would be:

Interface::
::Param           MdpOp Add param()-style methods to your objects    SHAUNGUTH


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=93600000_7eb593b096bbbc31&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=93600000_7eb593b096bbbc31&SUBMIT_pause99_add_mod_insertit=1
