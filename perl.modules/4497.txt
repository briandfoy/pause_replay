Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:4497
Return-Path: <keli@shebang.dk>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 28089 invoked from network); 19 Feb 2001 00:03:48 -0000
Received: from adsl2-205.simnet.is (HELO weltschmerz.xenostase.dk) (root@212.30.210.205)
  by tmtowtdi.perl.org with SMTP; 19 Feb 2001 00:03:48 -0000
Received: from localhost (keli@localhost)
	by weltschmerz.xenostase.dk (8.9.3/8.9.3) with ESMTP id AAA02522
	for <modules@perl.org>; Mon, 19 Feb 2001 00:06:34 GMT
Date: Mon, 19 Feb 2001 00:06:33 +0000 (GMT)
X-Sender: keli@weltschmerz.xenostase.dk
To: modules@perl.org
Subject: Request for a PAUSE-ID and Algorithm::SISort.
Message-ID: <Pine.LNX.4.21.0102182250270.21040-100000@weltschmerz.xenostase.dk>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=iso-8859-1
Content-Transfer-Encoding: QUOTED-PRINTABLE
Approved: news@nntp.perl.org
From: keli@shebang.dk (=?iso-8859-1?Q?Keli_H_F_Hl=F6=F0versson?=)

Name: Hrafnkell Freyr Hlodversson
Email: keli@shebang.dk
Preferred user-ID: HRAFNKELL

Description:

A module that implements a sorting algorithm I saw in an old paper by
Istv=E1n Beck and Stein Krogdahl called "Select And Insert Sort". This
module was originally done to try out the Inline module by Brian Ingerson,
but is now fairly usable - if not only as a working demonstration of
the virtues of Inline::C.

The algorithim is a combination of Straight Insertion Sort and Selection
Sort. While Insertion Sort and Selection Sort both are of complexity
O(n**2), Select and Insert Sort should be of complexitiy O(n**1.5).

Module name: Algorithm::SISort
Description: Implementation of Select And Insert sorting algorithm in C
DSLI:        Rdcr



=2E.. and here is the POD, scissored from the module:

=3Dhead1 NAME

Algorithm::SISort - Implementation of Select And Insert sorting algorithm
in C

=3Dhead1 SYNOPSIS

  use Algorithm::SISort qw(Sort Sort_inplace);
 =20
  @sorted_list =3D Sort {$_[0] <=3D> $_[1]} @unsorted_list;
  # ... or ...
  Sort_inplace {$_[0] <=3D> $_[1]} @unsorted_list;

=3Dhead1 DESCRIPTION

This module implements a sorting algorithm I saw in BIT 28 (1988) by
Istv=E1n Beck and Stein Krogdahl. This implmentation is mainly intended to
try out the Inline module by Brian Ingerson. The algorithim is a
combination of I<Straight Insertion Sort> and I<Selection Sort>. While
I<Insertion Sort> and I<Selection Sort> both are of complexity O(n**2),
I<Select and Insert Sort> should have complexitiy O(n**1.5).

This module defines the functions C<Sort> and C<Sort_inplace>, which have
signatures similar to the internal C<sort> function. The difference is
that a codref defining a comparison is always required and that the two
values to compare are always passed in C<@_> and not as C<$a> and C<$b>.
(Although I might change that later.)

C<Sort> returns a sorted copy if the array, but C<Sort_inplace> sorts the
array in place (as the name suggests) and returns the number of
comparisons done.  (Note that the sorting is always done in place, C<Sort>
just copies the array before calling the internal sort routine.)

=3Dhead1 SEE ALSO

L<Inline>, L<Inline::C>, and I<A Select And Insert Sorting Algorithm> by
Istv=E1n Beck and Stein Krogdahl in I<BIT 28 (1988), 726-735>.

=3Dhead1 AUTHOR

Hrafnkell F. Hlodversson, keli@shebang.dk

=3Dhead1 COPYRIGHT

Copyright 2001, Hrafnkell F Hlodversson

All Rights Reserved.  This module is free software. It may
be used, redistributed and/or modified under the terms of
the Perl Artistic License.

See http://www.perl.com/perl/misc/Artistic.html

=3Dcut


--
With kind regads
Keli H F Hlodversson
=09
I used to think that anything was possible if I'd just tried hard
enough... That's how I got my first restraining order.
                                                     -- Sturla Tabta


