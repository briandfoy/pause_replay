Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:24421
Return-Path: <teun@chello.nl>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 84890 invoked by uid 76); 7 Nov 2003 22:31:00 -0000
Received: from x1.develooper.com (HELO x1.develooper.com) (63.251.223.170) by onion.perl.org (qpsmtpd/0.26) with SMTP; Fri, 07 Nov 2003 14:31:00 -0800
Received: (qmail 15636 invoked by uid 225); 7 Nov 2003 22:30:59 -0000
Delivered-To: modules@perl.org
Received: (qmail 15632 invoked by alias); 7 Nov 2003 22:30:59 -0000
Received: from mailhost.tue.nl (HELO mailhost.tue.nl) (131.155.2.7) by la.mx.develooper.com (qpsmtpd/0.27-dev) with ESMTP; Fri, 07 Nov 2003 14:30:47 -0800
Received: from mailhost.tue.nl ([127.0.0.1]) by localhost (mailhost.tue.nl [127.0.0.1]) (amavisd-new, port 10024) with ESMTP id 16639-09 for <modules@perl.org>; Fri,  7 Nov 2003 23:30:42 +0100 (CET)
Received: from chello.nl (t-indiv5-15.athome.tue.nl [131.155.241.15])	by mailhost.tue.nl (Postfix) with ESMTP id 165D614C7DB	for <modules@perl.org>; Fri,  7 Nov 2003 23:30:42 +0100 (CET)
Message-ID: <3FAC1D11.1030107@chello.nl>
Date: Fri, 07 Nov 2003 23:30:41 +0100
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.5) Gecko/20031007
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: modules@perl.org
Subject: [namespace] new XPath module
Content-Type: text/plain; charset=us-ascii; format=flowed
Content-Transfer-Encoding: 7bit
X-Spam-Check-By: la.mx.develooper.com
X-Spam-Status: No, hits=-0.2 required=7.0 tests=CARRIAGE_RETURNS,SPAM_PHRASE_00_01,USER_AGENT,USER_AGENT_MOZILLA_UA,X_ACCEPT_LANG version=2.44
X-SMTPD: qpsmtpd/0.26, http://develooper.com/code/qpsmtpd/
Approved: news@nntp.perl.org
From: teun@chello.nl (Teun)

Fellow Perlers,

I am working on an XPath implementation that is less memory hungry that 
XML::XPath, which is based on XML::Parser, which creates trees of hashes 
and arrays.

My module is slower than XML::XPath, but uses FAR less memory. It is 
based on a data structure that does not contain the children of a node, 
but the (unique) parent. Searches/queries are done backwards. It is 
therefore very fast on queries like //apples, if you are into fruit.

What could be a good namespace for this? Perhaps XML::Xpath::Backwards?

Any thoughts are appreciated.
Teun van Eijsden
PAUSE id: TEUN


