Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:50148
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 19449 invoked from network); 4 Aug 2006 23:02:08 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 4 Aug 2006 23:02:08 -0000
Received: (qmail 12542 invoked by uid 225); 4 Aug 2006 23:02:08 -0000
Delivered-To: modules@perl.org
Received: (qmail 12537 invoked by alias); 4 Aug 2006 23:02:08 -0000
X-Spam-Status: No, hits=-2.5 required=8.0
	tests=BAYES_00,FORGED_RCVD_HELO
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Fri, 04 Aug 2006 16:02:05 -0700
Received: from pause.perl.org (localhost.localdomain [127.0.0.1])
	by pause.perl.org (8.13.4/8.13.4/Debian-3sarge1) with ESMTP id k74N1wHs023928
	for <modules@perl.org>; Sat, 5 Aug 2006 01:01:58 +0200
Received: (from nobody@localhost)
	by pause.perl.org (8.13.4/8.13.4/Submit) id k74N1wgl023927;
	Sat, 5 Aug 2006 01:01:58 +0200
Date: Sat, 5 Aug 2006 01:01:58 +0200
Message-ID: <200608042301.k74N1wgl023927@pause.perl.org>
Subject: Module submission Authen::PluggableCaptcha
Reply-To: modules@perl.org
To: modules@perl.org
X-Virus-Checked: Checked
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Authen::PluggableCaptcha
  DSLIP:       RdpOp
  description: object oriented framework for CAPTCHA
  userid:      JVANASCO (Jonathan Vanasco)
  chapterid:   14 (Security_and_Encryption)
  communities:
    modperl list

  similar:
    Authen::Captcha GD::SecurityImage

  rationale:

    the naming was suggested by Steffen Mueller, when I posted here
    with the working name of SoopaCaptcha

    (from the 0.01 pod i just uploaded)

    Authen::PluggableCaptcha is a fully modularized and extensible
    system for making Pluggable Catpcha (Completely Automated Public
    Turing Test to Tell Computers and Humans Apart) tests.

    Pluggable? All Captcha objects are instantiated and interfaced via
    the main module, and then manipulated to require various submodules
    as plug-ins.

    Authen::PluggableCaptcha borrows from the functionality in
    Apache::Session::Flex

    The Base Modules:

    KeyGenerator

    Generates and parses publickeys which are used to validate and
    create captchas Default is Authen::PluggableCaptcha::KeyGenerator ,
    which makes a key %md5%_%time%

    KeyValidator

    User supplied class to validate a publickey. This can contain a
    regex or a bunch of DB interaction stuff to ensure a key is used
    only one time per ip address Default is
    Authen::PluggableCaptcha::KeyValidator , which just returns true.

    Challenge

    simply put, a challenge is a test. challenges internally require a
    ref to a keygenerator instance , it then maps that instance via it's
    own facilities into a test to render or validate a challege
    generates 3 bits of text: instructions user_prompt correct_response
    a visual captcha would have user_prompt and correct_response as the
    same. a text logic puzzle would not.

    Render

    the rendering of a captcha for presentation to a user. This could
    be an image, sound, block of (obfuscated?) html or just plain text

    Reasoning (reinventing the wheel)

    Current CPAN captcha modules all exhibit one or more of the
    following traits:

    - the module is tied heavily into a given image rendering library -
    the module only supports a single style of an image Catpcha - the
    module renders/saves the image to disk I wanted a module that works
    in a clustered environment, could be easily extended / implemented
    with the following design requirements:

    challenges are presented by a public_key a seed (sessionID ?) + a
    server key (siteSecret) hash together to create a public key the
    public_key is handled by its own module which can be subclassed as
    long as it provides the required methods with this method,
    generating a public key 'your own way' is very easy, so the module
    integrates easily into your app

    furthermore:

    the public_key creates a captcha test / challenge ( instructions ,
    user_prompt , correct_repsonse ) for presentation or validation -
    the captcha test is handled by its own module which can be
    subclassed as long as it provides the required methods - want to
    upgrade a test? its right there - want a private test? create a new
    subclass - want to add tests to cpan? please do! the rendering is
    then handled by its own module which can be subclassed as long as it
    provides the required methods the rendering doesn't just render a
    jpg for a visual captcha... the captcha challenge can then be
    rendered in any format - image - audio - text any single component
    can be extended or replaced - that means you can
    cheaply/easily/quickly create new captchas as older ones get
    defeated ( instead of going crazy trying to make the worlds best
    captcha) everything is standardized and made for modular interaction
    since the public_key maps to a captcha test, the same key can create
    an image/audio/text captcha,

    Note that Render::Image is never called - it is just a base class.
    The module ships with Render::Img::Imager, which uses the Imager
    library. Its admittedly not very good- just a proof-of-concept.

    want gd/imagemagick? write Render::Img::GD or
    Render::Image::ImageMagick with the appropriate hooks (and submit to
    CPAN!)

    This is so that you don't need to run GD on your box if you've got
    a mod_perl setup that is trying to be lean and already uses Imager
    Using any of the image libraries should be a snap- just write a
    render function that can create an image with 'user_prompt' text,
    and returns 'as_string' Using any of the audio libraries works in
    the same manner too.

    Initial support includes the ability to have Textual logic
    Catptchas. They do silly things like say ``What is one plus one ?
    (as text in english)'' HTML::Email::Obfuscate makes it hard to
    scrape, though a better solution is needed and welcome.

    One of the main points of PluggableCaptcha is that even if you
    create a Captcha that is one step ahead of spammers ( read: assholes
    ) , they're not giving up -- they're just going to take longer to
    break the Captcha-- and once they do, you're sweating trying to
    protect yourself again.

    With PluggableCaptcha, it should be easier to :

    a- create new captchas cheaply: make a new logic puzzle , a new way
    of rendering images , or change the random character builder into
    something that creates strings that look like words, so people can
    spell them easier. b- customize existing captchas: subclass captchas
    from the distribution , or others people submit to CPAN. create some
    site specific changes on the way fonts are rendered, etc. c-
    constantly change captchas ON THE FLY. mix and match render and
    challenge classes. the only thing that would take much work is
    swapping from a text to an image. but 1 line of code controls what
    is in the image, or how to solve it! Under this system, ideally,
    people can change / adapt / update so fast , that spammers never get
    a break in their efforts to break captcha schemes!

  enteredby:   JVANASCO (Jonathan Vanasco)
  enteredon:   Fri Aug  4 23:01:58 2006 GMT

The resulting entry would be:

Authen::
::PluggableCaptcha RdpOp object oriented framework for CAPTCHA        JVANASCO


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=6bc00000_76e993de0b7123c8&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=6bc00000_76e993de0b7123c8&SUBMIT_pause99_add_mod_insertit=1
