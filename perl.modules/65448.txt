Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:65448
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 9056 invoked from network); 17 Apr 2009 03:54:13 -0000
Received: from x1.develooper.com (207.171.7.70)
  by x6.develooper.com with SMTP; 17 Apr 2009 03:54:13 -0000
Received: (qmail 15339 invoked by uid 225); 17 Apr 2009 03:54:13 -0000
Delivered-To: modules@perl.org
Received: (qmail 15335 invoked by alias); 17 Apr 2009 03:54:13 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 16 Apr 2009 20:54:07 -0700
Received: from pause.perl.org (localhost.localdomain [127.0.0.1])
	by pause.perl.org (8.13.8/8.13.8/Debian-3) with ESMTP id n3H3s2QZ029145
	for <modules@perl.org>; Fri, 17 Apr 2009 05:54:02 +0200
Received: (from nobody@localhost)
	by pause.perl.org (8.13.8/8.13.8/Submit) id n3H3s2Sa029144;
	Fri, 17 Apr 2009 05:54:02 +0200
Date: Fri, 17 Apr 2009 05:54:02 +0200
Message-ID: <200904170354.n3H3s2Sa029144@pause.perl.org>
Subject: Module submission OP
Reply-To: modules@perl.org
To: modules@perl.org
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       OP
  DSLIP:       adpho
  description: Concise prototyping of persistent classes
  userid:      AAYARS (Alex Ayars)
  chapterid:   7 (Database_Interfaces)
  communities:
    TBD

  similar:
    Moose, Class::DBI, Catalyst

  rationale:

    OP is an overloaded acronym for Overpowered Perl, or Objective
    Perl, I won't go on... I realize that there are secondary namespaces
    also called "OP", related to opcode handling and such, but I hope I
    can avoid renaming. OP is derived from a code base which I've been
    using and building upon for years. It is in use internally at the
    organization I work for, and they've given me their blessing to
    publish it.

    Like Moose, OP provides a meta-dialect which is very heavily
    inspired by Perl 6, but OP differs with a focus towards building
    daemonized InnoDB-backed applications. OP also draws from Javascript
    and Ruby in its implementation of certain language features. OP's
    class factory function "create", in particular, emulates the usage
    of Prototype.js in the JavaScript world.

    Like Class::DBI and friends, OP provides a bridge between a
    class-based OO system and an ORDBMS. OP differs in its approach in
    that it derives tables from classes, rather than Class::DBI's
    approach of deriving classes from tables. Object-level attributes
    are "asserted" within a class declaration, providing for strict
    runtime validation of data input, while at the same time building up
    rules for the creation of a database schema. OP also has minimal
    support for YAML flatfile backing stores.

    OP is simpler than the Catalyst framework, but it does not attempt
    to bring any V to the MVC party. In the case of daemonized
    applications, there is no view needed, and in cases of web
    applications, OP is expected to plug in to the developer's template
    system of choice. OP development for web applications has been
    proceeding just fine using HTML::Mason/mod_perl2, but this is not a
    requirement.

    Perl6::Subs is used to filter OP source into "real" Perl 5, and
    OP's functional declarations directly manipulate Perl's symbol
    lookup table, establishing ISA hierarchies and the like. OP includes
    a class system which mirrors the subset of Perl 6 classes used by
    Perl6::Subs. *Many* Scalar, Array, and Hash-backed object classes
    from CPAN are consumed for this purpose (Seriously, it's like a
    buffet). When consuming a class from CPAN in this manner, OP uses
    multiple inheritance when subclassing, "mixing in" its own methods
    which make the original classes "assertable" as inline attributes
    (database table columns), or usable on their own as overloaded
    objects. Nearly all values in OP are handled as objects.

    OP implements collectors and iterators a la Python and Ruby, while
    trying to stay true to the way of Perl in its form.

    OP makes use of both Coro and POE for async programming, and plays
    nicely with each type of cooperative thread.

    OP is a large and well documented codebase, and makes a good effort
    to follow best practices, though satisfying Perl::Critic is a work
    in progress.

    Thank you for your consideration.

    --Alex

  enteredby:   AAYARS (Alex Ayars)
  enteredon:   Fri Apr 17 03:54:02 2009 GMT

The resulting entry would be:

OP                adpho Concise prototyping of persistent classes    AAYARS


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=e0610000_3b8edc4bb07201c3&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=e0610000_3b8edc4bb07201c3&SUBMIT_pause99_add_mod_insertit=1
