Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:2901
Return-Path: <wim.verhaegen@esat.kuleuven.ac.be>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 28075 invoked from network); 19 Sep 2000 15:58:53 -0000
Received: from barbar.esat.kuleuven.ac.be (134.58.56.153)
  by tmtowtdi.perl.org with SMTP; 19 Sep 2000 15:58:53 -0000
Received: from esat.kuleuven.ac.be (watou.esat.kuleuven.ac.be [134.58.61.185])
	by barbar.esat.kuleuven.ac.be (8.9.3/8.9.3) with ESMTP id RAA20131;
	Tue, 19 Sep 2000 17:58:48 +0200 (METDST)
Sender: Wim.Verhaegen@esat.kuleuven.ac.be
Message-ID: <39C78D37.5925429@esat.kuleuven.ac.be>
Date: Tue, 19 Sep 2000 17:58:47 +0200
Organization: K.U.Leuven ESAT-MICAS
X-Mailer: Mozilla 4.75 [en] (X11; U; HP-UX B.10.20 9000/785)
X-Accept-Language: nl-BE, en
MIME-Version: 1.0
To: modules@perl.org
Subject: PAUSE id request for WIMV
Content-Type: multipart/mixed;
 boundary="------------92A97046BBF5B175AE3C7CE8"
Approved: news@nntp.perl.org
From: wim.verhaegen@esat.kuleuven.ac.be (Wim Verhaegen)

--------------92A97046BBF5B175AE3C7CE8
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Hello,

After having worked with Perl quite a bit and written lots of modules
over the past 2 years for personal use, I think some of the work is
ready for sharing with the Perl community. I am an electrical engineer
and mainly use Perl for writing (parts of) CAD tools, so my focus
is on mathematical issues and processing of text files in an unspecified
number of formats.

I have already shared much code with my colleagues (I estimate about 40
use it, with about 10 amongst them being aware of it). I have already
posted a specific request about releasing modules for handling files
written in a format named Spice. Although this is a very popular format
in the field of analog circuit simulation, I got no response. But I 
think interest in this and other modules could arise any moment. There
are some freeware projects around for writing circuit simulators, and
their analog parts may benefit from such code. I must admit, though,
that all this is still hypothetical.

Anyway, I hope this low response does not keep you from letting me share
my efforts. I have reaped many benefits (not financially ;-) from using 
modules available at CPAN, and think I have the needed experience and
discipline to give the people something useful instead of letting them
work out a mess.

My personal data:

 name:		Wim Verhaegen
 e-mail:	wim.verhaegen@ieee.org
 homepage:	http://www.esat.kuleuven.ac.be/~verhaege/
 preferred id:	WIMV

To start with, I would submit Number::Spice, a relatively small module
for converting to and from a special number format with literal suffices,
which is allowed by the spice simulator. DSLI entry:

 Number::Spice	adpf	Conversion of Spice numbers	WIMV

Attached you will find a README file for the Number::Spice module.

Hope to hear from you soon!

Wim
-- 
Wim Verhaegen, Research Assistant                   Phone: +32-16-321075
K.U.Leuven ESAT-MICAS                                 Fax: +32-16-321975
Kard. Mercierlaan 94                              wim.verhaegen@ieee.org
B-3001 Leuven, Belgium         http://www.esat.kuleuven.ac.be/~verhaege/
--------------92A97046BBF5B175AE3C7CE8
Content-Type: text/plain; charset=us-ascii;
 name="README"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="README"

Number::Spice groups functions for converting plain decimal numbers to/from
the shortened Spice syntax.

Spice syntax provides a shortcut for writing down numbers in scientific 
notation, by appending a suffix to the value which corresponds to a
numeric multiplier. The following table lists the minimal suffices and
the corresponding multiplier:

	T	1.0E12
	G	1.0E9
	MEG	1.0E6
	X	1.0E6
	K	1.0E3
	M	1.0E-3
	MIL	2.54E-5 (i.e. 1/1000 inch)
	U	1.0E-6
	N	1.0E-9
	P	1.0E-12	
	F	1.0E-15
	A	1.0E-18

Following functions are available:

pattern                 returns a regular expression matching a spice number
is_spice_number         returns true when the given string is a clean spice 
                          number
split_spice_number      returns the parts in a spice number (string)
suffix_value            returns the numeric multiplier corresponding to a 
                          suffix
spice_to_number         converts a spice number (string) to a float
number_to_spice         converts a float to the shortest spice number (string)
normalize_spice_number  converts a spice number (string) to its shortest 
                          equivalent

The following scalars are available for exporting:

$RE_NUMBER              regular expression matching a float
$RE_SPICE_SUFFIX        regular expression matching a spice suffix
$RE_SPICE_NUMBER        regular expression matching a spice number

Copyright (c) 2000 Wim Verhaegen. All rights reserved. 
This program is free software; you can redistribute and/or 
modify it under the same terms as Perl itself.


--------------92A97046BBF5B175AE3C7CE8--

