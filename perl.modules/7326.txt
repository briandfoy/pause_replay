Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:7326
Return-Path: <schwern@pobox.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 68537 invoked from network); 2 Sep 2001 23:47:50 -0000
Received: from ool-18ba90a1.dyn.optonline.net (HELO ool-18b93024.dyn.optonline.net) (24.186.144.161)
  by onion.valueclick.com with SMTP; 2 Sep 2001 23:47:50 -0000
Received: by ool-18b93024.dyn.optonline.net (Postfix, from userid 1000)
	id 0611D8091; Sun,  2 Sep 2001 19:47:48 -0400 (EDT)
Date: Sun, 2 Sep 2001 19:47:48 -0400
To: Graham Barr <gbarr@pobox.com>, kstar@cpan.org,
	Kirrily Robert <skud@infotrope.net>, modules@perl.org
Subject: Re: New interface styles
Message-ID: <20010902194748.B2711@blackrider>
References: <20010830194241.P2318@blackrider> <E15cptx-000820-00@tanqueray.infotrope.net> <20010901080233.B29926@wolfetech.com> <20010901221907.O76062@pobox.com> <20010901174649.V606@blackrider> <20010902091109.Q76062@pobox.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20010902091109.Q76062@pobox.com>
User-Agent: Mutt/1.3.20i
X-Spam-Rating: onion.valueclick.com 1.6.2 0/1000/N
Approved: news@nntp.perl.org
From: schwern@pobox.com (Michael G Schwern)

On Sun, Sep 02, 2001 at 09:11:09AM +0100, Graham Barr wrote:
> > We already have an 'other'.  ' n - no interface at all (huh?)'.
> > Module authors are using it to mean 'other'.
> 
> Then use n for your module.

If 'n' is going to officially be 'other' then please change the
description.


> > Text::Template      Simply describing these with O or f doesn't do
> > Embperl             justice to the fact that the *real* point is
> > HTML::Mason         the ability to embed code into other mediums.
> > Test::Inline
> > Inline::C
> 
> Again, you are describing what the modules does, not how the 
> programmer would use it. Text::Template is most definately an OO
> interface.
<snip>

Ok, lemme try and 'splain better.

What is the -->*use to the users of CPAN*<-- to describe
Text::Template, or Inline::C as having an OO or procedural interface?

If I'm looking at the description of a module...

Text
::Template         MdpO? Expand template text with embedded perl      MJD

I see this information:

- called Text::Template
- the code is mature
- suppored only by the developer.
- written in pure perl.
- it has an OO interface
- license is not officially mentioned
- short description
- the author.

All those pieces of information are in some way useful to know
at-a-glance before deciding to download and investigate the module
further EXCEPT the fact that it's OO.

Written with an OO interface... now how does that effect my decision?
Would I reject the module if it were procedural?  Does it make it
harder/easier to use the module with my program?  Is an OO module
easier to use in an OO program?  Is an OO module harder to use in a
procedural program or vice/versa?

Is this: foo($data, @args) really different than this $data->foo(@args);
to the user of the module?

Do I need to learn object-oriented programming to use the mdoule?  
(A common misconception.)

What's the difference?  Text::Template tells me it has an OO API.
That's true, but why is this useful?  How does this effect my decision
to download the module?

It's about as useful as knowing it uses StudlyCapsStyle vs unix_style
names.


So rather than wasting the API slot with technically true-but-trivial
information, why not alter it so it can provide some *useful*
information about the purpose of the module?


-- 

Michael G. Schwern   <schwern@pobox.com>    http://www.pobox.com/~schwern/
Perl6 Quality Assurance     <perl-qa@perl.org>	     Kwalitee Is Job One
HA HA HA  You're all so ridiculous!  But thanks for the money!
