Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:14941
Return-Path: <philcrow2000@yahoo.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 87582 invoked by uid 76); 1 Nov 2002 18:34:56 -0000
Received: from web13706.mail.yahoo.com (HELO web13706.mail.yahoo.com) (216.136.175.139) by onion.perl.org (qpsmtpd/0.12) with SMTP; 2002-11-01 18:34:56Z
Message-ID: <20021101183455.65736.qmail@web13706.mail.yahoo.com>
Received: from [12.41.204.3] by web13706.mail.yahoo.com via HTTP; Fri, 01 Nov 2002 10:34:55 PST
Date: Fri, 1 Nov 2002 10:34:55 -0800 (PST)
Subject: Re: Remote Object Server Modules
To: modules@perl.org
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-SMTPD: qpsmtpd/0.12, http://develooper.com/code/qpsmtpd/
Approved: news@nntp.perl.org
From: philcrow2000@yahoo.com (Phil Crow)


--- _brian_d_foy <comdog@panix.com> wrote:
> In article
>
<20021029141333.84221.qmail@web13709.mail.yahoo.com>,
> Phil Crow <philcrow2000@yahoo.com> wrote:
> 
> > I'm working a scheme similar to Enterprise Java
> > Beans (EJB) for Perl.

> > If you like this idea I'd like to get it a
> namespace
> > perhaps Net::Prim.  Please advise on the best
> name. 
> > Prim stands for Perl Remote Invocation of Methods
> (a
> > dislexic revision of Perl RMI).
> 
> we wouldn't put it in Net::*, but maybe (maybe)
> Netx::
> 
> i think this should go where the other RPCish sorts
> of
> things go.
I agree.  That is where people will look.  How about
something like RPC::Prim?  Or RPC::RIM?  I'm leaning
toward the later since part of the point is that you
don't need to use perl to make this scheme work.
> 
> > Prim is an xml based tcp protocol which allows you
> to
> > call Perl functions and methods inside a server
> Perl
> > interpreter from a client Perl interpreter.
> 
> are you sure you're not reinventing the wheel?  
> 
> how does this differe from SOAP, XML-RPC, POE, and
> so on?
> is it just the persistence part that is different?
Here are the key design principles.  I think the
combination is unique.
1. Objects persistent in the server without cookies
2. The web and HTTP are not involved
3. Servers can be found by peer to peer discovery
4. Any language can implement clients or servers
5. Perl servers and clients are easy to write
6. Transmitted data is mostly strings any number, any
kind from client to server and back
> 
> could you hack the persistent bit into one of the
> other
> frameworks?
I'm looking at POE to see if it could be used instead
of my scheme.  If POE isn't a replacement it could be
part of the solution.

Phil


__________________________________________________
Do you Yahoo!?
HotJobs - Search new jobs daily now
http://hotjobs.yahoo.com/
