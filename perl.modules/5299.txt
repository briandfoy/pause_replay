Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:5299
Return-Path: <andreas.koenig@anima.de>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 23183 invoked from network); 3 May 2001 14:29:24 -0000
Received: from dubravka.in-berlin.de (HELO ak-71.mind.de) (root@193.175.21.65)
  by onion.valueclick.com with SMTP; 3 May 2001 14:29:24 -0000
Received: (from k@localhost)
	by ak-71.mind.de (8.9.3/8.9.3) id QAA31455;
	Thu, 3 May 2001 16:27:05 +0200
X-Authentication-Warning: ak-71.mind.de: k set sender to andreas.koenig@anima.de using -f
Sender: k@ak-71.mind.de
To: "echo 'Rudolf Polzer'>/dev/null" <rpolzer@durchnull.de>
Cc: <modules@perl.org>
Subject: Re: PAUSE
References: <Pine.LNX.4.31.0104290047120.12778-100000@www42.t-offline.de>
Reply-To: modules@perl.org
Date: 03 May 2001 16:27:05 +0200
In-Reply-To: <Pine.LNX.4.31.0104290047120.12778-100000@www42.t-offline.de>
Message-ID: <m38zkeecee.fsf@ak-71.mind.de>
Lines: 52
User-Agent: Gnus/5.0808 (Gnus v5.8.8) Emacs/20.7
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Spam-Rating: onion.valueclick.com 1.6.2 0/1000/N
Approved: news@nntp.perl.org
From: andreas.koenig@anima.de ((Andreas J. Koenig))

>>>>> On Sun, 29 Apr 2001 01:04:07 +0200 (CEST), "echo 'Rudolf Polzer'>/dev/null" <rpolzer@durchnull.de> said:

  > Name: Rudolf Polzer
  > Interface style: f
  > Mail: rpolzer@durchnull.de
  > UserID: rpolzer

Done

  > Module I am planning to contribute: autodetection of modules
  > DSLI: Mdpf
  > Description: Autodetect of modules: find available module

What's the name of the module? Module::Detect sounds OK,
Module::Detect::Use sounds overkill. Module::Find would also be cute.
Some function in it could return the path to the module without
actually trying to require it. Another function could then require it.
Or some such.

If you've made up your mind, please apply for registration with the
"Apply for namespace registration" menu on PAUSE. Thank you!

-- 
andreas

  > The idea came from a posting in comp.lang.perl.misc in the thread "dynamic
  > creation of classes". After trying a little I thought: let's make a module
  > that loads the first one in a list that exists. Since many CGI providers
  > do not have a full Perl installation (often DB_File, Storable etc. are
  > missing) but falling back to using SDBM_File and Data::Dumper where not
  > needed shouldn't be done because of speed and space issues, I decided to
  > write an autodetect module just in Perl (so it can be installed anywhere).
  > Unfortunately I do not know which Perl version this requires; it works on
  > 5.6.0 and does not use anything strange. It should work as long as
  >  eval "require CGI;"
  > returns true if and only if there is a module CGI, so a 5.00x version
  > should suffice.
  > There is already a module 'AndDBM_File' which does exactly use this; this
  > module is designed to be used for more than one purpose in the same
  > program and even allows user-supplied module names (there are even checks
  > for things like

  > Module::Detect::Use 'CGI; `rm -rf /`'

  > so that they do not blindly execute

  > require CGI; `rm -rf /`;

  > in eval()

  > ).

