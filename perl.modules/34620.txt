Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:34620
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 17366 invoked from network); 9 Sep 2004 12:26:57 -0000
Received: from x1.develooper.com (63.251.223.170)
  by lists.develooper.com with SMTP; 9 Sep 2004 12:26:57 -0000
Received: (qmail 2118 invoked by uid 225); 9 Sep 2004 12:26:57 -0000
Delivered-To: modules@perl.org
Received: (qmail 2110 invoked by alias); 9 Sep 2004 12:26:56 -0000
X-Spam-Status: No, hits=-4.9 required=8.0
	tests=BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
  by la.mx.develooper.com (qpsmtpd/0.27.1) with ESMTP; Thu, 09 Sep 2004 05:26:52 -0700
Received: from pause.perl.org (localhost [127.0.0.1])
	by pause.perl.org (8.12.3/8.12.3/Debian-6.6) with ESMTP id i89CQdKt028655;
	Thu, 9 Sep 2004 14:26:39 +0200
Received: (from nobody@localhost)
	by pause.perl.org (8.12.3/8.12.3/Debian-6.6) id i89CQdsO028653;
	Thu, 9 Sep 2004 14:26:39 +0200
Date: Thu, 9 Sep 2004 14:26:39 +0200
Message-ID: <200409091226.i89CQdsO028653@pause.perl.org>
Subject: Module submission Myco
Reply-To: modules@perl.org
To: modules@perl.org, czbsd@cpan.org
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Myco
  DSLIP:       bmpOa
  description: Full featured object-oriented app framework
  userid:      CZBSD (Charles N. Owens)
  chapterid:    3 (Development_Support)
  communities:
    http://sourceforge.net/projects/myco/,
    tangram-t2-maintainers@hottub.perlfect.com

  similar:
    we extend Tangram, Class::Tangram and others

  rationale:

    Note that this module was submitted in Dec-03 but then deleted (I
    realized it just wasn't ready). My original namespace request:

    http://www.xray.mpe.mpg.de/mailing-lists/modules/2003-12/msg00279.html

    Namespace rationale: This is a broad framework... forming an
    umbrella over many other modules. Its breadth is only going to
    expand over time. As such, it can be argued that it is in a category
    unto itself. Also, a number of key class methods in the API need to
    be easily accessible... having a short, pithy class name for these
    methods really makes a big difference in keeping users' code clean.

    Thanks, Charles N. Owens (CZBSD)

    *About the myco framwork:*

    (Also visible at http://www.enc.edu/~owensc/Myco.html)

    Our goal has been to create a rich framework that provides
    end-to-end support for the object-oriented application developer,
    freeing them to focus more effectively on application-specific
    end-user features.

    The Myco framework supports:

    * Object "lifecycle" services: o accessors o data validation o
    persistence o templates (similar to Java interfaces) o metadata
    (a.k.a. "introspection") o role-based access control o logging *
    Unit testing * Metadata driven user interfaces (a
    Model-View-Controller implementation, usable in both HTML::Mason and
    cgi script contexts) * And more... ("but wait...that's not all")

    Read on for a glimpse of the Myco API in action.

    All Myco entity classes are subclasses of Myco::Base::Entity. This
    grants the entity class a rich set of functionality, accessible via
    a clean consistent interface. Here's some sample code showing a
    synopsis of how one interfaces with a Myco entity class:

    use Myco::Foo; # a Myco entity class

    # Constructor $obj = Myco::Foo->new; $obj = Myco::Foo->new(attr1 =>
    value, attr2 => value);

    # Access class metadata (see Myco::Base::Entity::Meta) $meta =
    Myco::Foo->introspect; $meta = $obj->introspect;

    # Accessors $obj->get_attr1; # get attribute value
    $obj->set_attr1('value'); # set attribute value

    # Instance methods $id = $obj->save; # update object's state in
    persistent # storage, create new record if needed; # returns
    object's Tangram id $obj->destroy; $obj->modify(attr1 => val, attr2
    => val); $object_id = $obj->id; $obj->is_transient; # returns true
    if object is in Tangram # transient storage

    ## object retrieval (see class Myco documentation # for full
    detail)

    $obj = Myco->load($object_id);

    # fetch all objects of given type @objects = Myco->select(ref
    $obj); # this select() could also include a Tangram filter

    Entity class definition

    package Myco::Foo; use base qw(Myco::Base::Entity);

    # Start building metadata my $metadata =
    Myco::Base::Entity::Meta->new ( name => __PACKAGE__, tangram => {
    table => 'Foo' } );

    $metadata->add_attribute(name => 'attr1', type => 'string');
    $metadata->add_attribute(name => 'attr2', type => 'string', ...);

    # class-specific methods defined ... #

    # Fill in $schema with all added_attributes and discover other
    metadata $metadata->activate_class;

  enteredby:   CZBSD (Charles N. Owens)
  enteredon:   Thu Sep  9 12:26:38 2004 GMT

The resulting entry would be:

Myco              bmpOa Full featured object-oriented app framework  CZBSD


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=b2700000_abd90cd3b3efc218&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=b2700000_abd90cd3b3efc218&SUBMIT_pause99_add_mod_insertit=1
