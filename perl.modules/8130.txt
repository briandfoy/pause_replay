Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:8130
Return-Path: <chromatic@rmci.net>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 99307 invoked from network); 10 Oct 2001 02:29:10 -0000
Received: from halcyon.rmci.net (205.162.184.63)
  by onion.valueclick.com with SMTP; 10 Oct 2001 02:29:10 -0000
Received: (qmail 30067 invoked from network); 10 Oct 2001 02:29:09 -0000
Received: from dialup-ip-216-222-108-134.boi.rmci.net (HELO there) (216.222.108.134)
  by mx20.rmci.net with SMTP; 10 Oct 2001 02:29:09 -0000
Content-Type: text/plain;
  charset="iso-8859-1"
To: Kirrily Robert <skud@infotrope.net>,
 modules@perl.org
Subject: Re: Module submission Devel::Constants
Date: Tue, 9 Oct 2001 20:23:12 -0600
X-Mailer: KMail [version 1.3.1]
References: <200110092224.AAA27512@pause.perl.org> <E15r8wA-0003DE-00@tanqueray.infotrope.net>
In-Reply-To: <E15r8wA-0003DE-00@tanqueray.infotrope.net>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Spam-Rating: onion.valueclick.com 1.6.2 0/1000/N
Approved: news@nntp.perl.org
From: chromatic@rmci.net (chromatic)
Message-ID: <perl.modules-8130@nntp.perl.org>

On Tuesday 09 October 2001 20:17, Kirrily Robert wrote:

> >    Devel::Constants captures constant declarations (with the constant
> >    pragma), allowing values to be resolved to their symbols at runtime.
> >    It has a special method to resolve bitwise flag markers, such as
> >    those found in a TCP packet.

> I've read this through three times and I still don't understand what
> you're talking about.

The constants pragma lets Perl turn names like PI and NEXT into values like 
'3.14' and '1' at compile time.  It's a lot easier and more maintanable to 
use those names when programming.  (Common sense.)

At runtime, unless the author has gone to some trouble, there's no easy way 
of getting the name ('PI'), given the value ('3.14').  For some modules, 
that's no problem -- people who muck about inside should know what they're 
doing.

With a module such as NetPacket::TCP, trying to see what flags are set on a 
packet doesn't work very well.  The module defines constants corresponding to 
bits, using boolean logic to set and unset these bits with the flags.  Using 
the module's published interface, attempting to read the flags returns a 
number like '24' instead of 'RST ACK SYN' or whatever.

My solution is to overload constant::import, stashing away the names and 
values, so they can be fetched at runtime.

Does that help?
-- chromatic
