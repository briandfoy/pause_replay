Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:351
Return-Path: <Raphael.Manfredi@st.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 4655 invoked from network); 28 Oct 1999 14:25:49 -0000
Received: from beta.st.com (HELO beta.dmz-eu.st.com) (164.129.1.35)
  by tmtowtdi.perl.org with SMTP; 28 Oct 1999 14:25:49 -0000
Received: from eux100.sgp.st.com (eux100.sgp.st.com [164.129.225.7])
	by beta.dmz-eu.st.com (Postfix) with ESMTP id 6B4982779
	for <modules@perl.org>; Thu, 28 Oct 1999 14:25:09 +0000 (GMT)
Received: from lod23.gnb.st.com (lod28.gnb.st.com [164.129.116.152])
	by eux100.sgp.st.com (8.8.6 (PHNE_17190)/8.8.6) with ESMTP id QAA08289
	for <modules@perl.org>; Thu, 28 Oct 1999 16:25:17 +0200 (METDST)
To: modules@cpan.org
Subject: YAM (Yet Another Module)
X-Mailer: NMH [version 1.0.1]
Organization: ST Microelectronics, Grenoble, France
Date: Thu, 28 Oct 1999 16:21:24 +0200
Message-ID: <7252.941120484@lod23.gnb.st.com>
Sender: manfredi@lod23.gnb.st.com
Resent-To: modules@perl.org
Resent-Date: Thu, 28 Oct 1999 16:25:29 +0200
Resent-Message-ID: <7305.941120729@lod23.gnb.st.com>
Resent-From: Raphael Manfredi <manfredi@lod23.gnb.st.com>
Resent-Sender: Raphael.Manfredi@st.com
Approved: news@nntp.perl.org
From: Raphael.Manfredi@st.com (Raphael Manfredi)

It's becomming an habit, but I have yet another module request to make...

	Log::Agent

It's meant to be a general logging framework. Modules wishing to get
logging support will say:

	use Log::Agent;

And then will use routines like:

	logerr
	logdie
	logsay
	logtrc
	logdbg

At the toplevel program, a logconfig routine will be configured as:

	logconfig(
		-prefix => "$me:",
		-driver => Log::Agent::Syslog->make(-name => 'local2'),
		-trace => 12,
		-verbose => 1);

The real power comes from the customization at the driver level.
When no driver is present, a default driver:

	Log::Agent::Stdio

is used, which maps (e.g., I don't know, the module is not written yet):

	logerr => warn
	logdie => die
	logsay => print STDOUT if $verbose
	logtrc(level, ...) => warn "..." if level > $loglevel;
	logdbg(level, ...) => warn "..." if level > $loglevel;

Naturally, with a Syslog driver, things are routed to syslog.

I also plan a Usrlog driver which will route things to a user-level
syslog-like logger that I wish to use for all my programs. No need to
use system services for pure user-level logging.

Why one more logging module? Well, I'm tired of having zillions of
incompatible logging systems which impede reuse. With the above scheme,
modules will use Log::Agent, but only the application will control where
logging should go.

Raphael
