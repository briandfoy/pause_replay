Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:7297
Return-Path: <steve@fink.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 97502 invoked from network); 31 Aug 2001 19:29:39 -0000
Received: from uswest-dsl-142-101.cortland.com (HELO kevin.fink.com) (mail@209.162.142.101)
  by onion.valueclick.com with SMTP; 31 Aug 2001 19:29:39 -0000
Received: from steve (helo=localhost)
	by kevin.fink.com with local-esmtp (Exim 3.31 #1 (Debian))
	id 15ctyu-00055r-00; Fri, 31 Aug 2001 12:29:32 -0700
Date: Fri, 31 Aug 2001 12:29:32 -0700 (PDT)
To: Kirrily Robert <skud@infotrope.net>
cc: modules@perl.org
Subject: Re: Module submission Units::Calc
In-Reply-To: <E15cqKV-00083I-00@tanqueray.infotrope.net>
Message-ID: <Pine.LNX.4.21.0108311136470.5717-100000@kevin.fink.com>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Spam-Rating: onion.valueclick.com 1.6.2 0/1000/N
Approved: news@nntp.perl.org
From: steve@fink.com (Steve Fink)
References: <E15cqKV-00083I-00@tanqueray.infotrope.net>

> I prefer Math::Calc::Units to Units::Calc.  I also prefer Calc::Units to
> Units::Calc.
> 
> The first question to ask is, what does this thing provide?  It provides
> a calculator.  Hence Calc.  What sort of calculator?  A units
> calculator.  Hence Calc::Units.  The primary thing it provides is a
> calculator, not a unit.

Hm. I guess I was looking at it another way. What distinguishes the
module? Units. What does it do with them? Calculates stuff. So if I were
looking for exactly this, I would first go straight to Units, rather than
crawling through Math::, Calc::, Eval::, Expr::, etc.

On the other hand, that's sort of backwards from a hierarchical
categorization point of view. The most general should come first. And my
argument above doesn't work very well in practice anyway -- when looking
for a certain bit of functionality, there's a good chance that the
functionality is provided in a module primarily focussed on something
else.

And I'd be doing 'i /Unit/' in any case.

> The issue of whether to put it under Math:: or whether to leave it at
> its own top level has to do with:
> 
> - are deeply nested CPAN module names a good or useful thing?
>     => *shrug*  People seem to be OK with three-level names.

Two conflicting forces: (1) shorter names are easier to remember and
communicate verbally ("oh, just go grab object class methodmaker auto utf8
from cpan, it does just what you want" "uh... could you write that
down?"); and (2) too many top-level packages are annoying and defeat much
of the point of categorization.

Math::Calc::Units seems reasonable to me. I'll go with that unless
somebody objects before I release it. I would use Calc::Units if there
were already a Calc:: toplevel, but there isn't.

Thanks!

