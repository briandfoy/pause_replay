Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:36418
Return-Path: <eric_mahurin@yahoo.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 18537 invoked from network); 16 Nov 2004 15:30:52 -0000
Received: from x1.develooper.com (63.251.223.170)
  by lists.develooper.com with SMTP; 16 Nov 2004 15:30:52 -0000
Received: (qmail 27224 invoked by uid 225); 16 Nov 2004 15:30:52 -0000
Delivered-To: modules@perl.org
Received: (qmail 27217 invoked by alias); 16 Nov 2004 15:30:51 -0000
X-Spam-Status: No, hits=-4.9 required=8.0
	tests=BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received: from web41124.mail.yahoo.com (HELO web41124.mail.yahoo.com) (66.218.94.167)
  by la.mx.develooper.com (qpsmtpd/0.27.1) with SMTP; Tue, 16 Nov 2004 07:30:49 -0800
Received: (qmail 54606 invoked by uid 60001); 16 Nov 2004 15:30:46 -0000
Comment: DomainKeys? See http://antispam.yahoo.com/domainkeys
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
  s=s1024; d=yahoo.com;
  b=aIjXJDL994OMskisEHNjzDpO8FtbTRYs7pa4L5GL0Zth+E2/kQCsvX7jx6NQUjwCHRFL1OSX8FChCAaobsxBAiI6R7o93E+iuCEZrDrv3iS9efHhdvYC1TChJQ9zkoEoju7IrcSZG1TADMcbDp2vXIoW14vo/GLbsSPpeEJp3sY=  ;
Message-ID: <20041116153046.54604.qmail@web41124.mail.yahoo.com>
Received: from [66.90.167.158] by web41124.mail.yahoo.com via HTTP; Tue, 16 Nov 2004 07:30:46 PST
Date: Tue, 16 Nov 2004 07:30:46 -0800 (PST)
Subject: Re: Module submission Math::Solver1
To: modules@perl.org
In-Reply-To: <161120040753394017%comdog@panix.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="0-1325547218-1100619046=:51748"
X-Virus-Checked: Checked
Approved: news@nntp.perl.org
From: eric_mahurin@yahoo.com (Eric Mahurin)
References: <161120040753394017%comdog@panix.com>

--0-1325547218-1100619046=:51748
Content-Type: text/plain; charset=us-ascii
Content-Id: 
Content-Disposition: inline

I've run out of suggestions, so I'll just attach the
POD I have now of the base class and give a simple
example:

Say you want to find x where sin(x)=0 and 1.5<x<4.5. 
We know the answer is pi (3.14159...), but here is how
you'd do it with this package:

my($x,$dx,$y,$i) = Math::Solver1::Newton->
    new(sub{sin($_[0])},[1.5],[4.5])->
    solve(3,1e-6);

This seeds x=3 and gives a result with 1e-6 of
absolute accuracy (6 decimal places).

This package is useful when "x" can't be found
algebraically.  The function that the
root/zero/inverse is being searched for is defined
with a subroutine reference.  It could calculate just
calculate just about anything including running an
external program (i.e. circuit simulator - spice) and
return the result.


--- _brian_d_foy wrote:

> Choosing a good name is a tough thing, but it's
> extremely
> important that users know what your module does. 
> I'm
> still really confused about that, so I don't have a 
> suggestion other than the ones I've already given. 
> Your
> the one who knows the most about your module, and
> that
> I'm having trouble helping you despite my research
> should
> tell you that other people are going to skip right
> over
> your module because they don't realize its the one
> that
> they want.
> 
> You should consider these things:
> 
>    * Describe what your module does.  "Solver1"
> doesn't
>    say what it solves.
> 
>    * Break it down into a heirarchy if appropriate. 
> If
>    this module deals with polynomials, for instance,
> it
>    can go in Math::Polynomial.
> 
>    * Expect expansion.  If your stuff only does one
>    dimensional things, choose a name that can expand
>    to other dimensions when other people want to add
>    things.



		
__________________________________ 
Do you Yahoo!? 
Meet the all-new My Yahoo! - Try it today! 
http://my.yahoo.com 
 

--0-1325547218-1100619046=:51748
Content-Type: application/octet-stream; name="Solver1.pod"
Content-Transfer-Encoding: base64
Content-Description: Solver1.pod
Content-Disposition: attachment; filename="Solver1.pod"

Cj1oZWFkMSBOQU1FCgpNYXRoOjpTb2x2ZXIxIC0gMS1kaW1lbnNpb25hbCBz
b2x2ZXIgKHJvb3QgZmluZGVyKSBiYXNlIGNsYXNzCgo9aGVhZDEgU1lOT1BT
SVMKCiAgICBwYWNrYWdlIE15U29sdmVyOwogICAgdXNlIGJhc2UgJ01hdGg6
OlNvbHZlcjEnOwogICAgCiAgICBzdWIgaW5pdGlhbCB7CiAgICAgICAgbXko
JHRoaXMpID0gQF87CiAgICAgICAgbXkoJHhsKSA9ICR0aGlzLT5lbmRwb2lu
dCgwKTsKICAgICAgICBteSgkeGgpID0gJHRoaXMtPmVuZHBvaW50KDEpOwog
ICAgICAgICMgY2hvb3NlIGEgbmV3IHggbWlkd2F5IGJldHdlZW4gYm91bmRz
CiAgICAgICAgKCR4bCskeGgpLzI7CiAgICB9CgogICAgcGFja2FnZSBNeVNv
bHZlclRlc3Q7CgogICAgbXkoJHhhYnMpID0gMWUtNjsKCiAgICAjIHNhdmUg
YSBjb3VwbGUgZnVuY3Rpb24gZXZhbHV0aW9ucyBieSBnaXZpbmcgZXN0aW1h
dGVzIChjb3JyZWN0IHNpZ24pCiAgICAjIGF0IGJvdW5kcyBzaW4oMS41KSB+
IDEgYW5kIHNpbig0LjUpIH4gLTEKICAgIG15KCRsbykgPSBbMS41LDFdOwog
ICAgbXkoJGhpKSA9IFs0LjUsLTFdOwoKICAgICMgc29sdmUgZm9yIHNpbih4
KT0wIGZvciAxLjU8eDw0LjUgc2VlZGluZyB4PTMKICAgIG15KCR4LCRkeCwk
eSwkaSkgPSBNeVNvbHZlci0+bmV3KHN1YntzaW4oJF9bMF0pfSwkbG8sJGhp
KS0+c29sdmUoMywkeGFicyk7CgogICAgIyAkbG8gYW5kICRoaSBzaG91bGQg
Y29udGFpbiBmaW5hbCBib3VuZHMKICAgICMgJHggc2hvdWxkIG5vdyBiZSB3
aXRoaW4gJHhhYnMgZnJvbSBQSQogICAgCj1oZWFkMSBERVNDUklQVElPTgoK
TWF0aDo6U29sdmVyMSBpcyBhIGJhc2UgY2xhc3MgZm9yIHZhcmlvdXMgMS1k
aW1lbnNpb25hbCBudW1lcmljYWwgc29sdmVycy4KSXQgd2lsbCBmaW5kIG9u
ZSByb290IG9mIGEgZnVuY3Rpb24gYmV0d2VlbiBhIGxvdyBhbmQgaGlnaCBi
b3VuZC4gIFRoZQpmdW5jdGlvbiB2YWx1ZXMgbmVlZCB0byBoYXZlIG9wcG9z
aXRlIHNpZ25zIGF0IHRoZXNlIGJvdW5kcy4KCk5vdGUgdGhhdCBNYXRoOjpT
b2x2ZXIxIGlzIG9ubHkgYW4gYWJzdHJhY3QgYmFzZSBjbGFzcy4gIEl0IGNh
bm5vdCBiZSB1c2VkCmRpcmVjdGx5LiAgQXQgYSBtaW5pbXVtIHRoZSBDPGlu
aXRpYWw+IG1ldGhvZCBtdXN0IGJlIG92ZXJyaWRkZW4gaW4gYSBzdWItY2xh
c3MuCgpIZXJlIGlzIGEgbGlzdCBvZiB0aGUgbWV0aG9kcyBhdmFpbGFibGUg
dG8gdGhpcyBjbGFzczoKCj1vdmVyIDQKCj1pdGVtICRzb2x2ZXIgPSAkY2xh
c3MtPm5ldyhcJmYsWyR4bCxAeWxdLFskeGgsQHloXSkKCkM8bmV3PiBjcmVh
dGVzIGEgbmV3IHNvbHZlciBvYmplY3QgYW5kIHJldHVybnMgaXQuICAkY2xh
c3Mgd2lsbCBiZSB0aGUKc3ViLWNsYXNzIHVzZWQgc2luY2UgTWF0aDo6U29s
dmVyMSBjYW4ndCBiZSB1c2VkIGRpcmVjdGx5LgoKVGhlIGZpcnN0IGFyZ3Vt
ZW50IGlzIGEgcmVmZXJlbmNlIHRvIGEgZnVuY3Rpb24uICBUaGlzIGZ1bmN0
aW9uIHNob3VsZCB0YWtlIG9uZQphcmd1bWVudCAtIHRoZSB4IHRoYXQgdGhl
IHNvbHZlciBpcyBzZWFyY2hpbmcgb3Zlci4gIFRoZSBmdW5jdGlvbiBzaG91
bGQgcmV0dXJuCnRoZSBmdW5jdGlvbiB2YWx1ZSAoeSB2YWx1ZSkgYXQgdGhh
dCB4IG9yIGEgbGlzdCBzdGFydGluZyB3aXRoIHRoYXQgeSB2YWx1ZS4KU29t
ZSBzb2x2ZXIgY2xhc3NlcyB0eXBpY2FsbHkgd2FudCB0aGUgc2Vjb25kIGVs
ZW1lbnQgaW4gdGhhdCBsaXN0IHRvIGJlIHRoZQpkZXJpdmF0aXZlLiAgSGln
aGVyIG9yZGVyIGRlcml2YXRpdmVzIG9yIG90aGVyIGluZm9ybWF0aW9uIGNv
dWxkIGJlIHB1dCBpbiB0aGUKcmV0dXJuIGxpc3QgaWYgdGhlIHNvbHZlciBj
bGFzcyBmaW5kcyBpdCB1c2VmdWwuCgpUaGUgc2Vjb25kIGFuZCB0aGlyZCBh
cmd1bWVudHMgYm91bmQgdGhlIHNlYXJjaCBzcGFjZS4gIEVhY2ggb2YgdGhl
c2UgYXJlIGEKYSByZWZlcmVuY2UgdG8gYW4gYXJyYXkgY29udGFpbmluZyBh
biB4IHZhbHVlIGFuZCBwb3RlbnRpb25hbGx5IGEgeSB2YWx1ZSBhbmQKYW55
dGhpbmcgZWxzZSB0aGF0IHRoZSBmdW5jdGlvbiBkZXNjcmliZWQgYWJvdmUg
cmV0dXJucy4gIElmIG9ubHkgYW4geCB2YWx1ZQppcyBjb250YWluZWQgaW4g
dGhpcyBsaXN0LCB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggdGhpcyB4
IHZhbHVlIHRvIGdldCB0aGUKcmVtYWluZGVyIG9mIHRoZSBhcnJheS4gIFRv
IHNhdmUgb24gdGhlc2UgZnVuY3Rpb24gZXZhbHVhdGlvbnMgaXQgbWF5IGJl
IHVzZWZ1bAp0byBtYWtlIGVzdGltYXRlcyBmb3IgdGhlIHkgdmFsdWVzLiAg
VGhlIG1haW4gcmVxdWlyZW1lbnQgaXMgdGhhdCB0aGV5IGhhdmUgCmNvcnJl
Y3QgYW5kIG9wcG9zaXRlIHNpZ25zLiAgTW9zdCBzb2x2ZXIgY2xhc3NlcyBz
aG91bGQgYmUgYWJsZSB0byB0b2xlcmF0ZQpzaW1wbGUgZXN0aW1hdGVzIChh
bmQgbm8gZGVyaXZhdGl2ZXMpLiAgQWxzbyBub3RlIHRoYXQgdGhlc2UgbG93
ZXIgYW5kIHVwcGVyCmJvdW5kIHJlZmVyZW5jZXMgdG8gQzxuZXc+IGFyZSB1
c2VkIGRpcmVjdGx5IGluIHRoZSBvYmplY3Qgc3VjaCB0aGF0IHRoZSBsaXN0
CnRoZXkgcG9pbnQgdG8gd2lsbCBiZSBtb2RpZmllZCBhcyB0aGUgYWxnb3Jp
dGhtIHByb2NlZGVzLgoKPWl0ZW0gKCR5LCRkeSwuLi4pID0gQHkgPSAkc29s
dmVyLT5ldmFsdWF0ZSgkeCkKCkM8ZXZhbHVhdGU+IGV2YWx1YXRlcyB0aGUg
ZnVuY3Rpb24gYXQgdGhlIHNwZWNpZmllZCAkeCB2YWx1ZSBhbmQgcmV0dXJu
cyBhIGxpc3QKc3RhcnRpbmcgd2l0aCB0aGUgZnVuY3Rpb24gdmFsdWUgKCR5
KSBhbmQgYW55dGhpbmcgZWxzZSB0aGF0IHRoZSB1c2VyIGZ1bmN0aW9uCnJl
dHVybnMgKGxpa2VseSBhIGZpcnN0IGRlcml2YXRpdmUgYXMgdGhlIHNlY29u
ZCBlbGVtZW50KS4KCj1pdGVtICRzb2x2ZXIgPSAkc29sdmVyLT5lbmRwb2lu
dCgkaSwkeCxAeSkKCkM8ZW5kcG9pbnQ+IHdpdGggMiBvciBtb3JlIGFyZ3Vt
ZW50cyBzZXRzIGFuIGVuZHBvaW50IGluIHRoZSBzb2x2ZXIgYW5kIHJldHVy
bnMKdGhlIHNvbHZlci4gIFRoZSBmaXJzdCBhcmd1bWVudCAoJGkpIHNob3Vs
ZCBiZSAwIGZvciB0aGUgbG93ZXIgYm91bmQgYW5kIDEgZm9yIHRoZQp1cHBl
ciBib3VuZC4gIFRoZSByZW1haW5pbmcgYXJndW1lbnRzIGlzIGEgbGlzdCBv
ZiB2YWx1ZXMgZm9yIHRoZSBlbmRwb2ludCAtIHgsCnksIGRlcml2YXRpdmUs
IGV0Yy4gIElmIG9ubHkgYW4geCB2YWx1ZSBhcmd1bWVudCBpcyBnaXZlbiwg
dGhlIHJlc3QgaXMgZmlsbGVkIGluCndpdGggYSBjYWxsIHRvIEM8ZXZhbHVh
dGU+LgoKPWl0ZW0gKCR4LEB5KSA9ICRzb2x2ZXItPmVuZHBvaW50KCRpKQoK
QzxlbmRwb2ludD4gd2l0aCBvbmx5IG9uZSBhZ3VtZW50IHJldHVybnMgdGhl
IGVuZHBvaW50IHZhbHVlcyAtIHgsIHksIGRlcml2YXRpdmUsCmV0YyBpbiBh
IGxpc3QuICBUaGUgYXJndW1lbnQgKCRpKSBzaG91bGQgYmUgMCBmb3IgZ2V0
dGluZyB0aGUgbG93ZXIgZW5kcG9pbnQgYW5kIDEKZm9yIHRoZSB1cHBlciBl
bmRwb2ludC4KCj1pdGVtICgkeCwkZHgsJHksJGkpID0gJHNvbHZlci0+c29s
dmUoJHgsJHhhYnMsJHhyZWwsJHlhYnMsJGltYXgpCgpDPHNvbHZlPiBzZWFy
Y2hlcyBmb3IgdGhlIGNhc2Ugd2hlcmUgZigkeCk9MC4gIFRoZSBmaXJzdCBh
cmd1bWVudCAoJHgpIGlzCnRoZSBpbnRpYWwgeCB2YWx1ZSB0byB1c2UuICBJ
ZiB0aGlzIGlzIHVuZGVmaW5lZCwgdGhlIHZhbHVlIHJldHVybmVkIGZyb20K
Qzxpbml0aWFsPiBpcyB1c2VkIGluc3RlYWQuCgpUaGUgcmVtYWluaW5nIGFy
Z3VtZW50cyAoJHhhYnMsICR4cmVsLCAkeWFicywgYW5kICRpbWF4KSBjb250
cm9sIHRoZQp0ZXJtaW5hdGlvbiBvZiB0aGUgc2VhcmNoaW5nLiAgJHhhYnMg
YW5kICR4cmVsIHNwZWNpZnkgdGhlIG1pbmltdW0gYWJzb2x1dGUKYW5kIHJl
bGF0aXZlIHggY2hhbmdlIGFsbG93ZWQuICAkeWFicyBzcGVjaWZ5IHRoZSBt
aW5pbXVtIHkgdmFsdWUgYWxsb3dlZC4gICRpbWF4CmlzIHRoZSBtYXhpbXVt
IG51bWJlciBvZiBpdGVyYXRpb25zIHRvIGFsbG93ICh1c2UgMCBmb3Igbm8g
bGltaXQpLgoKQzxzb2x2ZT4gcmV0dXJucyBhIGxpc3QgYmVnaW5uaW5nIHdp
dGggdGhlIGJlc3QgZXN0aW1hdGUgb2YgJHggd2hlcmUgZigkeCk9MC4KJGR4
IGlzIHRoZSBjaGFuZ2UgaW4gJHggZnJvbSB0aGUgbGFzdCBpdGVyYXRpb24g
KHBvc2l0aXZlIGlzIGRlY3JlYXNpbmcgYW5kCm5lZ2F0aXZlIGlzIGluY3Jl
YXNpbmcpLiAgJHkgaXMgdGhlIGxhc3QgeSB2YWx1ZSBlc3RpbWF0aW9uIChj
b3JyZXNwb25kaW5nCnRvIHRoZSBwcmV2aW91cyAkeCB2YWx1ZSkuICBGaW5h
bGx5ICRpIGlzIHRoZSBudW1iZXIgb2YgaXRlcmF0aW9ucyBkb25lLgoKPWl0
ZW0gJHggPSAkc29sdmVyLT5uZXh0KCR4LEB5KQoKQzxuZXh0PiBpcyBhIGNv
cmUgc3RlcCB1c2VkIGluIHNvbHZlLiAgSXQgdGFrZXMgaW4gYSBuZXcgcG9p
bnQgKHgsIHksIGRlcml2YXRpdmUsCmV0Yy4pLCBwb3NzaWJseSBuYXJyb3dz
IHRoZSBib3VuZHMsIGFuZCByZXR1cm5zIGFuIGVzdGltYXRlIGEgbmV3IHgg
ZXN0aW1hdGUKKHdoaWNoIHNob3VsZCBiZSB3aXRoaW4gdGhlIG5ldyBib3Vu
ZHMpLiAgVHlwaWNhbGx5LCBzdWItY2xhc3NlcyB3aWxsIG92ZXJyaWRlCnRo
aXMsIGJ1dCBpdCBkZWZhdWx0cyB0byBjYWxsaW5nIEM8bmFycm93PiBvbiB0
aGUgbmV3IHBvaW50IGFuZCByZXR1cm5pbmcgdGhlCnggZXN0aW1hdGUgZnJv
bSBDPGluaXRpYWw+LgoKPWl0ZW0gJHNvbHZlciA9ICRzb2x2ZXItPm5hcnJv
dygkeCxAeSkKCkM8bmFycm93PiB0aWdodGVucyB0aGUgYm91bmRzIGluIHRo
ZSBzb2x2ZXIgYW5kIHJldHVybnMgdGhlIHNvbHZlciBvYmplY3QuCkl0IHRh
a2VzIGEgbmV3IHBvaW50ICh4LCB5LCBkZXJpdmF0aXZlLCBldGMuKSB0aGF0
IHNob3VsZCBiZSB3aXRoaW4gdGhlCmJvdW5kcy4gIFRoaXMgbmV3IHBvaW50
IHdpbGwgcmVwbGFjZSB0aGUgZW5kcG9pbnQgdGhhdCBoYXMgdGhlIHNhbWUg
eSBzaWduIGFzCnRoZSBuZXcgcG9pbnQuCgo9aXRlbSAkeCA9ICRzb2x2ZXIt
PmluaXRpYWwoKQoKQzxpbml0aWFsPiByZXR1cm5zIGFuIHggZXN0aW1hdGUg
anVzdCBiYXNlZCBvbiB0aGUgZW5kcG9pbnRzLiAgVGhpcyB4IGVzdGltYXRl
CnNob3VsZCBiZSBiZXR3ZWVuIHRoZSB4IHZhbHVlcyBvZiB0aGUgZW5kcG9p
bnRzLiAgVGhpcyBpcyB0aGUgb25seSBtZXRob2QgdGhhdApzdWItY2xhc3Nl
cyBtdXN0IG92ZXJyaWRlLgoKPWJhY2sKCj1oZWFkMSBBVVRIT1IKCkVyaWMg
TWFodXJpbgoKPWhlYWQxIFNFRSBBTFNPCgpMPE1hdGg6OlNvbHZlcjE6OkJp
c2VjdD4sIEw8TWF0aDo6U29sdmVyMTo6RmFsc2k+LCBMPE1hdGg6OlNvbHZl
cjE6Ok5ld3Rvbj4KCj1jdXQKCg==

--0-1325547218-1100619046=:51748--
