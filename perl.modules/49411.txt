Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:49411
Return-Path: <cpan@ali.as>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 823 invoked from network); 14 Jun 2006 17:41:12 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 14 Jun 2006 17:41:12 -0000
Received: (qmail 2236 invoked by uid 225); 14 Jun 2006 17:41:12 -0000
Delivered-To: modules@perl.org
Received: (qmail 2228 invoked by alias); 14 Jun 2006 17:41:11 -0000
X-Spam-Status: No, hits=-4.4 required=8.0
	tests=ALL_TRUSTED,BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from x6.develooper.com (HELO lists.develooper.com) (63.251.223.186)
    by la.mx.develooper.com (qpsmtpd/0.28) with SMTP; Wed, 14 Jun 2006 10:40:39 -0700
Received: (qmail 583 invoked by uid 515); 14 Jun 2006 17:40:27 -0000
Message-ID: <20060614174026.582.qmail@lists.develooper.com>
To: modules@perl.org
Date: Thu, 15 Jun 2006 03:37:52 +1000
User-Agent: Thunderbird 1.5.0.4 (Windows/20060516)
MIME-Version: 1.0
Subject: Re: Module submission Date::JD
References: <20060529061345.29003.qmail@lists.develooper.com> <20060613233732.GA26936@fysh.org>
In-Reply-To: <20060613233732.GA26936@fysh.org>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Posted-By: 203.31.239.96
Approved: news@nntp.perl.org
From: cpan@ali.as (Adam Kennedy)

Zefram wrote:
> I just discovered in the modules@perl.org archive that there was a
> reply to my Date::JD submission.  The reply didn't go to me, so I didn't
> see it.  Anyway:
> 
> Adam Kennedy wrote:
>> The general question for all date and time-related modules without a
>> community listed is "have you spoken to the DateTime guys about this"?
> 
> No I haven't, because this module doesn't fit with what they're
> doing.  This is lower-level than DateTime.  DateTime objects are not a
> suitable way to represent the semantics of any flavour of Julian Date.
> Superficially, DateTime objects and JDs can be used for roughly the same
> purpose -- identifying a point in time -- but they do it differently,
> and the difference matters.
> 
> A Julian Date is, strictly speaking, not meaningful in isolation.
> It identifies a point within a linear sequence of days, but it is not
> specific about *which* sequence of days.  Considering Earth rotation
> time scales, we have UT1 (the direct successor of GMT), UT2 (a smoothed
> version of UT1), UT0 (a naive implementation of UT1), and others.
> Dynamical and atomic time scales, such as Ephemeris Time, Terrestrial
> Time, and International Atomic Time, all (for historical reasons) have
> a conventional `day' of exactly 86400 SI seconds defined, so that Julian
> Dates can be used with them.
> 
> DateTime, by contrast, is somewhat specific about its time scale.  In the
> present era it is specifically using UTC.  UTC actually is one of the few
> time scales that can't use JDs properly, because of its leap seconds: it
> is implicit in the concept of a Julian Date that all days are subjectively
> equal in length.  OK, I can take a TAI Julian Date and convert it to UTC
> and represent it as a DateTime, but TAI is the only one of the time scales
> I've mentioned that has an algorithmically determined relationship to UTC.
> 
> So: a Julian Date is a low-level tool.  It gets used within date-handling
> systems, in several different ways.  It is not a complete date
> representation system in itself.  DateTime can make use of Julian Dates in
> some ways (and in fact does one of them in DateTime::Format::Epoch::JD),
> but general JD handling is out of its scope.  Date::JD exists to do
> that general stuff.  Modules such as DateTime are the target audience
> of Date::JD.

Right, which is the module reason I asked about talking to them.

I'm not suggesting that ::JD should be part of DateTime or not, that's 
not my call and I shouldn't necesarily have to understand why it should 
or shouldn't.

But for certain topic areas like Date and Time, Math, or Email which are 
both crowded and easy to get wrong, we prefer that at least some sanity 
checking and peer-review has been done. They may have some ideas to 
contribute to your module, or vice versa, and we'd prefer this peer 
review got done early rather than late.

I'm not suggesting that they need to approve your module or otherwise, 
just that we strongly prefer that at least some collaboration and 
talking has been done before we register what might be (since there are 
no date-time topic experts with module approval rights, and thus we 
don't necessarily have any ability to understand your explanations).

It's this communication we're looking for, not the result of it.

Best Regards

Adam Kennedy
