Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:46549
Return-Path: <adam@phase-n.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 16365 invoked from network); 22 Dec 2005 09:52:46 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 22 Dec 2005 09:52:46 -0000
Received: (qmail 24983 invoked by uid 225); 22 Dec 2005 09:52:45 -0000
Delivered-To: modules@perl.org
Received: (qmail 24976 invoked by alias); 22 Dec 2005 09:52:45 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from starfury.linearg.com (HELO starfury.linearg.com) (202.90.48.2)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 22 Dec 2005 01:52:41 -0800
Received: from localhost (localhost [127.0.0.1])
	by starfury.linearg.com (Postfix) with ESMTP id 82A39804C76E;
	Thu, 22 Dec 2005 20:52:30 +1100 (EST)
Received: from starfury.linearg.com ([127.0.0.1])
	by localhost (starfury [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id 24652-17; Thu, 22 Dec 2005 20:52:29 +1100 (EST)
Received: from [172.31.0.178] (hq-nat.linearg.net [202.90.48.125])
	by starfury.linearg.com (Postfix) with ESMTP id BA2EA804C76D;
	Thu, 22 Dec 2005 20:52:29 +1100 (EST)
Message-ID: <43AA76D1.7050704@phase-n.com>
Date: Thu, 22 Dec 2005 20:50:09 +1100
User-Agent: Mozilla Thunderbird 1.0 (Windows/20041206)
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: evdb@ecclestoad.co.uk
Cc: Adam Kennedy <cpan@ali.as>, modules@perl.org, comdog@panix.com
Subject: Re: Module submission Module::API
References: <200512210024.jBL0ONjY019443@pause.perl.org>	 <43AA31D3.7090006@ali.as> <f0145aa60512220137m217768c0i@mail.gmail.com>
In-Reply-To: <f0145aa60512220137m217768c0i@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Virus-Scanned: by amavisd-new-20030616-p10 (Debian) at linearg.com
Approved: news@nntp.perl.org
From: adam@phase-n.com (Adam Kennedy)

I'm not sure API::Framework would be accepted either.

Your biggest problem is that "API" is so vague as to very nearly be 
meaningless.

Every single module on the CPAN has an API of some sort. The term "API" 
is almost entirely spurious.

The term "Framework" is almost as bad too...

The Flikr modules are located at Net::Flickr for a reason, they are a 
module that talks to the Flikr service across a network.

Other sorts of formalised interface languages have their own names, like 
Corba and WSDL and so on. These get grouped at places such SOAP::WSDL 
and Corba::

Generalised networked RPC things might be at RPC::Something.

There are three keys to naming modules.

Firstly, if there is an existing naming scheme which you are very 
similar to, you group yourself with them for familiary. Web scraping 
modules go into WWW, networking modules in Net, and so on and so forth.

The second is that you avoid the use of overly generic or relative 
terminology. Words like "Easy" and "API" are generally bad in CPAN 
module names, as they don't inherantly name the thing... "easier than 
what?", "An API... as opposed to not an API?" etc...

That said, there are a couple of suffixs that have taken on known 
meanings. "::Simple" for dumbed down wrappers around fuller more complex 
modules, "::Lite" for lightweight reimplementations of systems that 
don't cover all cases, my "::Tiny" for absolutely-smallest-possible 
implementations of concepts, "::More" for more comprehensive versions of 
things etc.

The thirdly, the further down the chain, the less important the rules 
are... so while we may well turn a blind eye to any strangeness of 
"IPC::RPC::Plugin::MyWeirdAPI" trying to request a new top-level 
namespace like "API::" will garner intense scrutiny.

On the first, you are doing interprocess communications across a 
network, so families like "Net::" and "IPC::" and "RPC::" spring to mind 
as starting points...

On the second, both "API" and "Framework" seem bad.

How does your module different from RPC or WSDL or Corba IDL or some of 
the other RPC modules...

Is there something in that distinction that would help in naming?

Adam K

Edmund von der Burg wrote:
> Hmm - interestingly the whole discussion has tended towards how the
> API communication works: client / server and IPC and all that. The
> actual point behind the module is to provide a framework on which to
> beild APIs, that can then be used either over a network or in one
> process, calling the API methods locally. How the API is implemented
> is hidden, and the user need only consider proceesing the data at
> either end.
> 
> I'm going to rename the module to 'API::Framework' to reflect this.
> Please let me know if this would be accepted as a registered name and
> so whether I should reapply with it.
> 
> Apart from giving my module a place to live it would also provide a
> place for all the API implementations that are cropping up to go, like
> 'Flikr::API' and 'EVDB::API' - they would become 'API::(Flickr|EVDB)'
> (If the authors choose to move them that is).
> 
> Thanks for your input so far.
> 
> Cheers,
>   Edmund.
> 
> 
> On 22/12/05, Adam Kennedy <cpan@ali.as> wrote:
> 
>>Module:: is almost certainly wrong.
>>
>>The Module:: modules are primarily for without WITH modules, namespaces,
>>classes, etc. Not as a base for building them.
>>
>>Something somewhere under IPC:: would seem better.
>>
>>Adam K
> 
> 
> --
> In reality I'm evdb@ecclestoad.co.uk - http://ecclestoad.co.uk
