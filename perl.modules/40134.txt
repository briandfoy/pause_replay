Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:40134
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 10272 invoked from network); 4 May 2005 22:54:42 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 4 May 2005 22:54:42 -0000
Received: (qmail 14730 invoked by uid 225); 4 May 2005 22:54:42 -0000
Delivered-To: modules@perl.org
Received: (qmail 14726 invoked by alias); 4 May 2005 22:54:41 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 04 May 2005 15:54:39 -0700
Received: from pause.perl.org (localhost [127.0.0.1])
	by pause.perl.org (8.12.3/8.12.3/Debian-7.1) with ESMTP id j44MsRrd000610
	for <modules@perl.org>; Thu, 5 May 2005 00:54:29 +0200
Received: (from nobody@localhost)
	by pause.perl.org (8.12.3/8.12.3/Debian-7.1) id j44MsQ2A000608;
	Thu, 5 May 2005 00:54:27 +0200
Date: Thu, 5 May 2005 00:54:27 +0200
Message-ID: <200505042254.j44MsQ2A000608@pause.perl.org>
Subject: PAUSE ID request (AULUSOY; Ayhan Ulusoy)
Reply-To: modules@perl.org
To: modules@perl.org
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")

Request to register new user

fullname: Ayhan Ulusoy
  userid: AULUSOY
    mail: CENSORED
homepage: 
     why:

    Within the following months, I am planning to contribute in three
    areas :

    1) An equivalent of the old "Apache::Sandwich" (on Apache 1.3) that
    works with the Apache 2.0 filter architechture and the new mod_perl.
    For several reasons this module cannot use the same namespace of the
    old module, as it can't be made to be backward compatible.

    2) A Web file collector module and script that uses LWP for
    collecting a list of files on the web (via FTP or HTTP) into a local
    destination. This is useful for automating data-feed tasks for batch
    operations.

    3) Yet another XML module that fits into the XML::Simple philosophy
    but attempts to overcome some of the shortcomings of the latter.

    I am very much AWARE of the fact that there are already many XML
    modules out there. But I must admit that I am still not satisfied
    with the way XML is represented (as data) in Perl or in almost any
    language for that matter.

    * SAX is memory friendly but you can't do much with it unless
    you're simply transforming data.

    * DOM is almighty but not at all perlish. Besides, it's just too
    much code to write for a lazy dude.

    * XML::Simple is great and perlish, but it has got some
    shortcomings that make it diffuclt to use for things other than
    simple configuration files.

    With an other colleage, we have written a module that overcomes a
    lot of the shortcomings of XML::Simple and yet remains still
    "simple" to use. It has been under testing for a couple years now.

    Our module, which uses an object representation of XML nodes, makes
    heavy use of operator overrides and AUTOLOAD to make things simple
    and intiutive.

    One of the shortcomings of XML::Simple is the way it handles
    multiplicity of nodes. If an XML element appears once, it will be
    hashed, otherwise it will be in an array. The programmer doesn't
    know in advance which one will be the case. One way is to instruct
    XML::Simple to systematically put your nodes in arrays, but than it
    just becomes too messy.

    Our module overcomes this transparently using operator overrides.
    If you access the node with a hash key, you'll get the first node
    (even if there are more). If you futher access it with array
    indexing, you'll get the node you want.

    Another useful aspect of our module is dynamic OBJECT BINDING to
    xml nodes (like what CASTOR does for Java, but dynamically!).
    Regular perl classes can descend from "XML::Tie::Element". Better
    yet, a regular perl class, say "Foo" that normally stores its
    attributes in a hash or something can -automagically- have an
    xml-equivalent class that is named "Foo::XML" that stores its
    complex attributes in an XML element node.

    We use this module and are almost happy with it. For processing
    information that is in XML already, it works quite well. The main
    shortcoming is the way writing XML back works.


The following links are only valid for PAUSE maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_user&USERID=b0a00000_59f19e324c95018c&SUBMIT_pause99_add_user_sub=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_user&USERID=b0a00000_59f19e324c95018c&SUBMIT_pause99_add_user_Definitely=1
