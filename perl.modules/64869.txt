Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:64869
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 21552 invoked from network); 10 Mar 2009 01:18:50 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by x6.develooper.com with SMTP; 10 Mar 2009 01:18:50 -0000
Received: (qmail 14323 invoked by uid 225); 10 Mar 2009 01:18:49 -0000
Delivered-To: modules@perl.org
Received: (qmail 14319 invoked by alias); 10 Mar 2009 01:18:49 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Mon, 09 Mar 2009 18:18:47 -0700
Received: from pause.perl.org (localhost.localdomain [127.0.0.1])
	by pause.perl.org (8.13.8/8.13.8/Debian-3) with ESMTP id n2A1IZ62018647;
	Tue, 10 Mar 2009 02:18:35 +0100
Received: (from nobody@localhost)
	by pause.perl.org (8.13.8/8.13.8/Submit) id n2A1IZ1t018646;
	Tue, 10 Mar 2009 02:18:35 +0100
Date: Tue, 10 Mar 2009 02:18:35 +0100
Message-ID: <200903100118.n2A1IZ1t018646@pause.perl.org>
Subject: Module submission File::Lock::Multi
Reply-To: modules@perl.org
To: modules@perl.org, crakrjack@cpan.org
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       File::Lock::Multi
  DSLIP:       bdpOp
  description: Lock files more than once
  userid:      CRAKRJACK (Tyler MacDonald)
  chapterid:   10 (File_Names_Systems_Locking)
  communities:

  similar:
    IPC::Locker

  rationale:

    POSIX supports the concept of "exclusive" ("write") and "shared"
    ("read") locks on files -- many processes may take out a "shared"
    lock on any particular file, but only one process may have an
    "exclusive" lock, and that process can not take out this lock unless
    there are no "shared" locks open.

    Part of what makes this such an effective and worry-free system, is
    that these locks are maintained on the kernel level -- so if you
    kill off a process, you do not need to be concerned that the locks
    it had will stick around and get in some other process's way.

    ... But let's say you have a CPU-intensive operation that you want
    to limit to, oh, 5 running copies at a time? Or 3 different types of
    CPU-intensive operation that you want to collectively limit to 2
    running copies at a time? You could keep a counter somewhere, but if
    processes are killed off manually, what is going to come along and
    decrement your counter?

    "exclusive" locks are just that -- exclusive -- and there is no
    simple way to tell how many processes have taken out a "shared" lock
    on a file (from perl, anyway).

    C<File::Lock::Multi> is designed to work around this problem by
    providing it's own type of "locks" that behave like POSIX
    "exclusive" locks, except that you can specify how many locks are
    allowed to be taken out. So long as each process agrees on the
    maximum number of locks, they can work in parallel, but within the
    limits you have specified.

  enteredby:   CRAKRJACK (Tyler MacDonald)
  enteredon:   Tue Mar 10 01:18:35 2009 GMT

The resulting entry would be:

File::Lock::
::Multi           bdpOp Lock files more than once                    CRAKRJACK


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=4b610000_033c81700bdc9085&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=4b610000_033c81700bdc9085&SUBMIT_pause99_add_mod_insertit=1
