Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:63357
Return-Path: <theabbot@silasthemonk.org.uk>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Delivered-To: moderator for modules@perl.org
Received: (qmail 18453 invoked from network); 22 Nov 2008 15:36:33 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by x6.develooper.com with SMTP; 22 Nov 2008 15:36:33 -0000
Received: (qmail 4085 invoked by uid 225); 22 Nov 2008 15:36:32 -0000
Delivered-To: modules@perl.org
Received: (qmail 4081 invoked by alias); 22 Nov 2008 15:36:32 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=HTML_MESSAGE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received: from 21-196.reverse.ukhost4u.com (HELO bluecore2.ukhost4u.com) (195.216.196.21)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sat, 22 Nov 2008 07:36:28 -0800
Received: from [86.4.25.67] (helo=Glenthorne)
	by bluecore2.ukhost4u.com with esmtpa (Exim 4.69)
	(envelope-from <theabbot@silasthemonk.org.uk>)
	id 1L3uWw-0004mz-AQ; Sat, 22 Nov 2008 15:36:18 +0000
Message-ID: <A70CB6AF17AC47DAAF19DBCE47555A4B@Glenthorne>
To: <modules@perl.org>
Cc: <brian.d.foy@gmail.com>
Subject: Naming of CGI::TaintFiltration and Math::PEA modules
Date: Sat, 22 Nov 2008 15:36:12 -0000
MIME-Version: 1.0
Content-Type: multipart/alternative;
	boundary="----=_NextPart_000_0068_01C94CB8.0C681150"
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Windows Mail 6.0.6001.18000
X-MimeOLE: Produced By Microsoft MimeOLE V6.0.6001.18049
X-AntiAbuse: This header was added to track abuse, please include it with any abuse report
X-AntiAbuse: Primary Hostname - bluecore2.ukhost4u.com
X-AntiAbuse: Original Domain - perl.org
X-AntiAbuse: Originator/Caller UID/GID - [47 12] / [47 12]
X-AntiAbuse: Sender Address Domain - silasthemonk.org.uk
X-Source: 
X-Source-Args: 
X-Source-Dir: 
X-Virus-Checked: Checked
Approved: news@nntp.perl.org
From: theabbot@silasthemonk.org.uk ("The Abbot")

------=_NextPart_000_0068_01C94CB8.0C681150
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

CGI::TaintFiltratrion
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
> Isn't any module that removes taint for you missing the point? Data
> isn't dangerous by itself---it's only dangerous in a context.=20

People keep raising this point but I think it is itself missing the =
point. In order to defend a perl CGI script you:
1.) turn on taint mode in perl
2.) You then have to detaint any input from outside the program. One =
generally uses regeular expressions that express what is expected and =
acceptable content of that input and handle exceptions appropriately.=20
Obviously this can only be done by the writer of the application so =
callbacks are suited to this.=20

I cannot find any module that does this satisfactorily for me. =
CGI::Untaint attempts it but is way to much hassle to customize. Also a =
wrapper areound CGI works much better as it gets at the data early.=20

My code has moved on a bit since I posted on this subject on perlmonks, =
but the essence of the idea is the same. The main thing I have changed =
is to split up the code into base classes so that behaviour of the =
module can be modfied and other validation modules leveraged in an =
object oriented way. I chose the name "TaintFiltration" because the new =
module reminds me of a stack of filters.

I still have to do the following:
1.) support multi-valued parameters
2.) write decent test harnesses
3.) write decent documentation
However I am already using it in "production" in a small way.

If there was an existing piece of the perl module hierarchy that was =
clearly devoted to dealing with CGI and taint, then clearly I would want =
to fit in with that. "CGI::Validate" I think does not really capture it =
-- it could mean other things. So altogether I prefer my proposed name.=20

Math::PEA
=3D=3D=3D=3D=3D=3D=3D=3D
I have to admit I am stuck on the naming of this package but I am likely =
to be uploading this module first. All the concepts I search on seem to =
be to vague. "Probability" for example. There do not seem to be a lot of =
modules with this name, but there certainly could be. In particular I =
would search for "Bayes theorem", but a search for a Bayes shows that =
this tends to be used in a reverse sense of looking at a real data and =
testing a hypothesis about it. My module starts with a model and =
generates the data from it. Hence I actively avoided "Bayes". So the key =
concepts in the module are "Probability, Event and Analysis" hence the =
name.

Email.
=3D=3D=3D=3D=3D
I was surprised that I did not see the emails but had to search on the =
archives. 
------=_NextPart_000_0068_01C94CB8.0C681150
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Diso-8859-1">
<META content=3D"MSHTML 6.00.6001.18148" name=3DGENERATOR>
<STYLE></STYLE>
</HEAD>
<BODY bgColor=3D#ffffff>
<DIV><FONT face=3DArial size=3D2>CGI::TaintFiltratrion</FONT></DIV>
<DIV><FONT face=3DArial =
size=3D2>=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>&gt; Isn't any module that removes =
taint for you=20
missing the point? Data<BR>&gt; isn't dangerous by itself---it's only =
dangerous=20
in a context. </FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>People keep raising this point but I =
think it is=20
itself missing the point. In order to defend a perl CGI script =
you:</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>1.) turn on taint mode in =
perl</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>2.) You then have to detaint any input =
from outside=20
the program. One generally uses regeular expressions that express what =
is=20
expected and acceptable content of that input and handle exceptions=20
appropriately. </FONT></DIV>
<DIV><FONT face=3DArial size=3D2>Obviously this can only be done by the =
writer of=20
the application so callbacks are suited to this. </FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>I cannot find any module that does this =

satisfactorily for me. CGI::Untaint attempts it but is way to much =
hassle to=20
customize. Also a wrapper areound CGI works much better as it gets at =
the data=20
early. </FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>My code has moved on a bit since I =
posted on this=20
subject on perlmonks, but the essence of the idea is the same. The main =
thing I=20
have changed is to split up the code into base classes so that behaviour =
of the=20
module can be modfied and other validation modules leveraged in an =
object=20
oriented way. I chose the name "TaintFiltration" because the new module =
reminds=20
me of a stack of filters.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>I still have to do the =
following:</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>1.) support multi-valued =
parameters</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>2.) write decent test =
harnesses</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>3.) write decent =
documentation</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>However I am already using it in =
"production" in a=20
small way.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>If there was an existing piece of the =
perl module=20
hierarchy that was clearly devoted to dealing with CGI and taint, then =
clearly I=20
would want to fit in with that. "CGI::Validate" I think does not really =
capture=20
it -- it could mean other things. So altogether I prefer my proposed =
name.=20
</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>Math::PEA</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>=3D=3D=3D=3D=3D=3D=3D=3D</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>I have to admit I am stuck on the =
naming of this=20
package but I am likely to be uploading this module first. All the =
concepts I=20
search on seem to be to vague. "Probability" for example. There do not =
seem to=20
be a lot of modules with this name, but there certainly could be. In =
particular=20
I would search for "Bayes theorem", but a search for a Bayes shows that =
this=20
tends to be used in a reverse sense of looking at a real data and =
testing a=20
hypothesis about it. My module starts with a model and generates the =
data from=20
it. Hence I actively avoided "Bayes". So the key concepts in the module =
are=20
"Probability, Event and Analysis" hence the name.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>Email.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>=3D=3D=3D=3D=3D</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>I was surprised that I did not see the =
emails but=20
had to search on the archives. </FONT></DIV></BODY></HTML>

------=_NextPart_000_0068_01C94CB8.0C681150--


