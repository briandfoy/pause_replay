Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:53767
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 16803 invoked from network); 29 Mar 2007 15:42:40 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 29 Mar 2007 15:42:40 -0000
Received: (qmail 5990 invoked by uid 225); 29 Mar 2007 15:42:39 -0000
Delivered-To: modules@perl.org
Received: (qmail 5965 invoked by alias); 29 Mar 2007 15:42:38 -0000
X-Spam-Status: No, hits=-2.5 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,FORGED_RCVD_HELO
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 29 Mar 2007 08:42:31 -0700
Received: from pause.perl.org (localhost.localdomain [127.0.0.1])
	by pause.perl.org (8.13.4/8.13.4/Debian-3sarge3) with ESMTP id l2TFgB32016278;
	Thu, 29 Mar 2007 17:42:11 +0200
Received: (from nobody@localhost)
	by pause.perl.org (8.13.4/8.13.4/Submit) id l2TFgBXV016277;
	Thu, 29 Mar 2007 17:42:11 +0200
Date: Thu, 29 Mar 2007 17:42:11 +0200
Message-ID: <200703291542.l2TFgBXV016277@pause.perl.org>
Subject: Module submission TCLI
Reply-To: modules@perl.org
To: modules@perl.org, hacker@cpan.org
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       TCLI
  DSLIP:       adpOp
  description: CLI for Distributed Functional Testing Agent
  userid:      HACKER (Eric Hacker)
  chapterid:   4 (Operating_System_Interfaces)
  communities:
    tcli.org (under contrsuction)

  similar:

  rationale:

    TCLI is an acronym for Transactional Contextual command Line
    Interface. Optionally it may stand for Tester's Command Line
    Interface.

    TCLI supports the writing of agents (bots) that interact with their
    host operating system or the network with a current focus on
    supporting functional testing.

    TCLI then supports the writing of Test::Harness compliant test
    scripts that control the agents. The tests pass or fail depending on
    the responses from the agents.

    TCLI is designed to be network protocol agnostic. It currently
    support a Jabber/XMPP Transport as a module that ships with the
    core. An HTTP transport is planned. Transports may support both a
    human interface (the CLI) and an RPC interface. The RPC interface
    supports the testing capability, but could also be used to interact
    in a client server like manner with a GUI or some other application.

    TLCI is designed to allow new test functionality to be added
    through additional modules. It attempts to make writing these
    modules easier by providing Base classes that offer much of the
    needed functionality to support a standardized, easy to learn human
    interface. The goal is to allow one to add new functionality without
    having to spend a lot of time learning the particular syntax.

    Why a new root namespace?

    Because it doesn't completely fit anywhere else. Maybe that's not
    good enough, so suggestions are welcome.

    Test:: While it initially supports functional testing, and my
    specific interest is network security testing, it can easily do
    other things. I have a dream to write an agent to interact with
    Google Calendar, so I can IM new appts to my calendar. The TCLI core
    supports this type of agent already, it just needs the Google
    interface.

    Net:: Net is best left to network protocol stuff (SIP, XMPP,
    Packet, etc. ) rather than applications that operate over the
    network (LWP, CPAN, etc.) TCLI also can operate completely on a
    single host; that's how it's own tests run under Build test.

    Agent:: Taken, unfortunately. Also doesn't reflect the full CLI
    capability offered in TCLI.

    Bot:: This is mostly a collection of IRC bots. Bots must not be
    transport agnostic, as they need to understand and have a strong
    interface to the protocol in order to perform their normal
    functions. TCLI is not a traditional bot writing tool.

    POE::Component::TCLI It's not really a Component that is easily
    leveraged by other POE applications, though I tried at first. I also
    don't believe that everything using POE needs to reside under POE.

    I am open to suggestions about naming. When I began this effort, I
    tried to find something already exisiting that would meet my needs.
    While I borrowed ideas and pieces from a variety of places, there
    was nothing that I could find that met the core requirements that
    I've put into TCLI. In that respect , I believe it is unique. I also
    believe that it will meet the needs for many others outside of
    network security functional testing, and testing in general.

    In fact, the contextual properties of the CLI interface as well as
    an attempt to remove the use of symbols as much as possible may make
    TCLI a good candidate for being the backend to a voice driven system
    in the future.

    Ahem. appointment add date june 1 time 8 subject "darn subjects
    need quoting" alarm 15

    Who knows?

    Regards, Eric Hacker pause id: HACKER

  enteredby:   HACKER (Eric Hacker)
  enteredon:   Thu Mar 29 15:42:11 2007 GMT

The resulting entry would be:

TCLI              adpOp CLI for Distributed Functional Testing Agent HACKER


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=ab010000_ec465825dfbc8002&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=ab010000_ec465825dfbc8002&SUBMIT_pause99_add_mod_insertit=1
