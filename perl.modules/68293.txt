Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:68293
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 8482 invoked from network); 4 Nov 2009 12:01:39 -0000
Received: from x1.develooper.com (207.171.7.70)
  by x6.develooper.com with SMTP; 4 Nov 2009 12:01:39 -0000
Received: (qmail 1205 invoked by uid 225); 4 Nov 2009 12:01:39 -0000
Delivered-To: modules@perl.org
Received: (qmail 1200 invoked by alias); 4 Nov 2009 12:01:38 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 04 Nov 2009 04:01:36 -0800
Received: from pause.perl.org (localhost.localdomain [127.0.0.1])
	by pause.perl.org (8.13.8/8.13.8/Debian-3) with ESMTP id nA4C1Vev014519
	for <modules@perl.org>; Wed, 4 Nov 2009 13:01:31 +0100
Received: (from nobody@localhost)
	by pause.perl.org (8.13.8/8.13.8/Submit) id nA4C1VI2014518;
	Wed, 4 Nov 2009 13:01:31 +0100
Date: Wed, 4 Nov 2009 13:01:31 +0100
Message-ID: <200911041201.nA4C1VI2014518@pause.perl.org>
MIME-Version: 1.0
Subject: Module submission SQL::QueryBuilder
Content-Type: Text/Plain; Charset=ISO-8859-1
Reply-To: modules@perl.org
To: modules@perl.org
Content-Transfer-Encoding: 8bit
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       SQL::QueryBuilder
  DSLIP:       cdpO2
  description: Generate multi-language SQL
  userid:      RIVOTTI (André Rivotti Casimiro)
  chapterid:   7 (Database_Interfaces)
  communities:

  similar:
    SQL::QueryBuilder::Simple SQL::Query SQL::Abstract SQL::DB::Schema

  rationale:

    This Module was build to support another project that had the need
    to have multi-language SQL generation support.

    Altough SQL::Abstract does some of the work needed, extending it
    implies subclassing or changing it. SQL::Builder has a more modular
    approach:

    - Each Clause(FROM, HAVING, GROUP BY, etc) is an independent
    module, subclassing SQL::Builder::Clause, with methods to process
    each data type; - Each Statment(SELECT, UPDATE, etc) is an
    independent module subclassing SQL::Builder::Statment; - There are
    no special operators to build SQL functions. Different language
    support is made using switchs based on the database/handler used:

    'date' => { default => \"'$current_date'" mysql => \'NOW()', oracle
    => \'SYSDATE', }, - Each Database support is an independent module
    with the possibility to change it's own configuration set and
    methods(subclassing SQL::Builder); - Each Handler support is an
    independent module; - It's possible to use another
    SQL::Builder::Object as a subquery, value, etc; - A different
    approach(not necessary better) for the data structure.

    A rather exagerated example:

    __________START__________

    #!/usr/bin/perl -I../lib/ use strict; use warnings;

    use Carp qw(croak); use Data::Dumper;

    use SQL::Builder;

    my $query = SQL::Builder->new( '-database' => 'MySQL' ); my
    $subquery = SQL::Builder->new()->select( 'columns' => 'value',
    'from' => 'table3', 'where' => [ 'name' => 'Name', 'surname' =>
    'Surname' ], );

    my %clause = ( 'options' => [ 'DISTINCT', 'ALL' ], 'from' => [
    'table1', [ 'table2' => 'b' ], [ $subquery => 'c' ] ], 'hints' => [
    { oracle => [ '/*+ result_cache */', '/*+ etc_cache */' ], } ],
    'columns' => [ [ 'one' => 'One' ], 'two', \'1', [ \'2' => 'two' ] ],
    'join' => [ 'left' => { 'table' => 'teste', 'on' => [ 'teste.one' =>
    1, ], }, ], 'where' => [ { default => [ 'one' => 1 ], oracle => [
    'one' => 2 ], }, [ 'two' => \'ROUND(2.513,0)', ], '-or' => [ 'three'
    => [ '!=', \'three - 1' ], 'four' => \[ 'ROUND(?,?)', 4.123, 0 ],
    'four' => [ '<>', \[ 'ROUND(?,?)', 4.123, 2 ] ], ], '-not' => [ [
    'five' => [ \[ 'BETWEEN ? AND ?', 4, 6 ] ] ], \'MATCH(six)' => [ \[
    'AGAINST(?*)', 5, 6, 7 ] ], 'seven' => [ 'IN', $subquery ], ],
    'date' => { default => \'NOW()', oracle => \'SYSDATE', }, ],
    'group_by' => [ 'one', [ 'One' => 'WITH ROLLUP' ] ], 'having' => [
    'One' => 1 ], 'order_by' => [ 'three', [ 'six' => 'ASC' ], [ 'seven'
    => 'DESC' ] ], 'range' => [5,10], );

    my $select = $query->select( %clause );

    print Dumper( $select );

    __________END__________

    This will print:

    $VAR1 = bless( { 'query' => 'SELECT DISTINCT ALL `one` AS \'One\',
    `two`, 1, 2 AS \'two\' FROM `table1`, `table2` AS \'b\', (SELECT
    value FROM table3 WHERE name = ? AND surname = ?) AS \'c\' LEFT JOIN
    `teste` ON `teste`.`one` = ? WHERE `one` = ? AND (`two` =
    ROUND(2.513,0)) AND (`three` != three - 1 OR `four` = ROUND(?,?) OR
    `four` <> ROUND(?,?)) AND NOT ((`five` BETWEEN ? AND ?) AND
    MATCH(six) AGAINST(?,?,?) AND `seven` IN (SELECT value FROM table3
    WHERE name = ? AND surname = ?)) AND `date` = NOW() GROUP BY `one`,
    `One` WITH ROLLUP HAVING `One` = ? ORDER BY `three`, `six` ASC,
    `seven` DESC LIMIT 10 OFFSET 5', 'bind' => [ 'Name', 'Surname', 1,
    1, '4.123', 0, '4.123', 2, 4, 6, 5, 6, 7, 'Name', 'Surname', 1 ] },
    'SQL::Builder::Object' );

  enteredby:   RIVOTTI (André Rivotti Casimiro)
  enteredon:   Wed Nov  4 12:01:31 2009 GMT

The resulting entry would be:

SQL::
::QueryBuilder    cdpO2 Generate multi-language SQL                  RIVOTTI


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=20000000_9f7a478eb48f4a13&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=20000000_9f7a478eb48f4a13&SUBMIT_pause99_add_mod_insertit=1
Peek at the current permissions:
  https://pause.perl.org/pause/authenquery?pause99_peek_perms_by=me&pause99_peek_perms_query=SQL%3A%3AQueryBuilder
