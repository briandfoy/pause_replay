Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:11993
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 15005 invoked by uid 76); 5 Jun 2002 17:49:09 -0000
Received: from root@dubravka.kbx.de (HELO pause.perl.org) (212.40.160.59)
  by onion.perl.org (qpsmtpd/0.07b) with SMTP; Wed Jun  5 17:49:09 2002 -0000
Received: (from nobody@localhost)
	by pause.perl.org (8.11.6/8.11.6) id g55HnN815502;
	Wed, 5 Jun 2002 19:49:23 +0200
Date: Wed, 5 Jun 2002 19:49:23 +0200
Message-ID: <200206051749.g55HnN815502@pause.perl.org>
Reply-To: modules@perl.org
Subject: Module submission SQL::Snippet
To: modules@perl.org, prl@cpan.org
Approved: news@nntp.perl.org
From: upload@p11.speed-link.de ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       SQL::Snippet
  DSLIP:       bdpOp
  description: Enables an OO Interface to Your RDBMS
  userid:      PRL (Phil R Lawrence)
  chapterid:    7 (Database_Interfaces)
  communities:
    modules@perl.org, YAPC::NA 2002

  similar:
    SQL::QueryBuilder::Simple, Relations::Query

  rationale:

    [ Tim suggested the chapter 7 (Database) for this module, but SQL::
    is associated with chapter 11 (Text, etc.) only at this point. This
    module should *definately* be in the SQL heirarchy. Should chapter 7
    be added to SQL:: in addition to chapter 11? ]

    [ The whole Rationale has previously been submitted, so here is an
    abstract. ]

    -------- ABSTRACT -------- If you work with databases, chances are
    you have lots of scripts with SQL statements sprinkled throughout
    them. This situation gives rise to several problems: - Database
    changes result in hunting down affected SQL statements. - SQL is cut
    and pasted from script to script, allowing mutation errors. -
    Flexibility suffers because everything is hardwired.

    SQL::Snippet allows you to modularize all that SQL into one central
    repository. Instead of complete SQL statements, the repository
    contains "snippets" (i.e. little pieces) of SQL. SQL::Snippet will
    front end these snippets, allowing your code to call for the dynamic
    creation of complete, optimized SQL statements using straightforward
    OO (Object Oriented) syntax.

    There are two kinds of Snippets: 1) populations i.e. people,
    places, other_objects ...

    2) limits applicable to those populations i.e. gender, location,
    other_attributes ...

    Real databases are complex beasts with thousands of tables and
    myriad relationships. SQL::Snippet scales well into the real world
    -- by viewing your database's structure and data in an OO way,
    intelligent modularization is possible.

  enteredby:   PRL (Phil R Lawrence)
  enteredon:   Wed Jun  5 17:49:23 2002 GMT

The resulting entry would be:

SQL::
::Snippet         bdpOp Enables an OO Interface to Your RDBMS        PRL


Thanks for registering,
The Pause Team

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=3e100000_efb2e029b2d601b6&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=3e100000_efb2e029b2d601b6&SUBMIT_pause99_add_mod_insertit=1
