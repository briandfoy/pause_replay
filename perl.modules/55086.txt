Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:55086
Return-Path: <webmaster@simplemood.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 21355 invoked from network); 26 Jun 2007 21:10:05 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 26 Jun 2007 21:10:05 -0000
Received: (qmail 19915 invoked by uid 225); 26 Jun 2007 21:10:05 -0000
Delivered-To: modules@perl.org
Received: (qmail 19907 invoked by alias); 26 Jun 2007 21:10:04 -0000
X-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from smtp102.sbc.mail.mud.yahoo.com (HELO smtp102.sbc.mail.mud.yahoo.com) (68.142.198.201)
    by la.mx.develooper.com (qpsmtpd/0.28) with SMTP; Tue, 26 Jun 2007 14:09:58 -0700
Received: (qmail 50362 invoked from network); 26 Jun 2007 21:09:54 -0000
Received: from unknown (HELO ?129.7.200.245?) (dan.muey@sbcglobal.net@129.7.200.245 with plain)
  by smtp102.sbc.mail.mud.yahoo.com with SMTP; 26 Jun 2007 21:09:54 -0000
X-YMail-OSG: 9WIzNDMVM1kzVOnQp8qpXhGmvy0ZACVP2H7HKe3wEK7pqO3f0QrH75BIbRtKJY2niB7si9qxWBr3GTjsQAIhiKrMBhQee7yHDE40yjyQ8WyhMCvX7t397rxoSGHIZw--
In-Reply-To: <aa5b09f00706261352k77eba2c7mdb8ab65bafd6bb2b@mail.gmail.com>
References: <200706261913.l5QJDllL017045@pause.perl.org> <260620071457181742%brian.d.foy@gmail.com> <188108E1-58E8-4F7D-9446-43D901805209@simplemood.com> <aa5b09f00706261352k77eba2c7mdb8ab65bafd6bb2b@mail.gmail.com>
Mime-Version: 1.0 (Apple Message framework v752.3)
Content-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed
Message-ID: <709CDF97-7B5F-4101-B98E-73D9AAF63F19@simplemood.com>
Cc: jhi@iki.fi
Content-Transfer-Encoding: 7bit
Subject: Re: Module submission Algorithm::Command
Date: Tue, 26 Jun 2007 16:09:57 -0500
To: modules@perl.org
X-Mailer: Apple Mail (2.752.3)
Approved: news@nntp.perl.org
From: webmaster@simplemood.com (Daniel Muey)


On Jun 26, 2007, at 3:52 PM, Jarkko Hietaniemi wrote:

> What you describe is still not an algorithm in the sense the other
> entries in that category are.  (Anymore than say, my Set::Scalar would
> be an algorithm for doing set operations.) Your code (again, based on
> the description) has more to do with e.g. transactions.

I suppose, I was thinking Algorithm::Dependency is a similar type thing
(process vs mathematical) . I'm happy to do it elsewhere but where  
should it go?

I mean it is an Algorithm  even if its not necessarily the most  
common (IE  mathematically based )
ones we see on CPAN but I'm not married to that idea but where else  
does it fit?

> On 6/26/07, Daniel Muey <webmaster@simplemood.com> wrote:
>>
>>
>> On Jun 26, 2007, at 2:57 PM, brian d foy wrote:
>>
>> [[ This message was both posted and mailed: see
>>    the "To," "Cc," and "Newsgroups" headers for details. ]]
>>
>> In article <200706261913.l5QJDllL017045@pause.perl.org>,
>> Perl Authors
>> Upload Server <upload@pause.perl.org> wrote:
>>
>>
>> The following module was proposed for inclusion in the Module List:
>>
>>   modid:       Algorithm::Command
>>   DSLIP:       RdpOp
>>   description: Command pattern obj re/undo,rollback actions
>>   userid:      DMUEY (Daniel Muey)
>>
>> This isn't really an algorithm, but I don't have a suggestion about
>> where else to put a design pattern sorta thing. A lot of them end  
>> up in
>> Class::*
>>
>> Is there somewhere else this might live?
>>
>> I thought about it and decided on 'Algorithm::' because it is an  
>> algorithm
>> based on first sentence at
>> http://en.wikipedia.org/wiki/Algorithm
>>
>> "In mathematics, computing, linguistics, and related disciplines, an
>> algorithm is a finite list of well-defined instructions for  
>> accomplishing
>> some task that, given an initial state, will terminate in a defined
>> end-state."
>>
>> This module will contain the 'finite list of well-defined  
>> instructions' to
>> 'accomplish the task' of getting a list of tasks from one state to  
>> the other
>> (Eg: no steps done to all 5 steps done, or if one fails undo whats  
>> been done
>> already and/or try over again and/or handle failure)
>>
>> I'd hate to clutter Class:: with something thats not really a  
>> class...
>
>
> -- 
> There is this special biologist word we use for 'stable'. It is
> 'dead'. -- Jack Cohen

