Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:64173
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 7092 invoked from network); 21 Jan 2009 21:51:28 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by x6.develooper.com with SMTP; 21 Jan 2009 21:51:28 -0000
Received: (qmail 6647 invoked by uid 225); 21 Jan 2009 21:51:27 -0000
Delivered-To: modules@perl.org
Received: (qmail 6642 invoked by alias); 21 Jan 2009 21:51:26 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 21 Jan 2009 13:51:24 -0800
Received: from pause.perl.org (localhost.localdomain [127.0.0.1])
	by pause.perl.org (8.13.8/8.13.8/Debian-3) with ESMTP id n0LLpJW4004283
	for <modules@perl.org>; Wed, 21 Jan 2009 22:51:19 +0100
Received: (from nobody@localhost)
	by pause.perl.org (8.13.8/8.13.8/Submit) id n0LLpJHn004282;
	Wed, 21 Jan 2009 22:51:19 +0100
Date: Wed, 21 Jan 2009 22:51:19 +0100
Message-ID: <200901212151.n0LLpJHn004282@pause.perl.org>
Subject: Module submission Test::CallFlow
Reply-To: modules@perl.org
To: modules@perl.org
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Test::CallFlow
  DSLIP:       adphp
  description: Record, plan and test what calls code makes
  userid:      KORPIQ (Kalle Hallivuori)
  chapterid:   3 (Development_Support)
  communities:

  similar:
    Test::MockClass Test::MockModule Test::MockObject

  rationale:

    Defining calls your code under test should make and what input it
    should get should be as fast as possible: quick to learn and
    instantaneous to produce, whether for code yet to be written or
    inherited legacy. Instead of declaring anything about the packages
    that code under test uses, you should be able to plan a test by
    writing only the calls it should make and results it should get.

    Test::CallFlow tries to take next steps toward ease and efficiency
    in test writing. I just uploaded version 0.01.

    Arguments and sub names may be matched with regexps, code or
    trivial acceptor. Calls may be specified as unordered, optional and
    repeatable with multiple results or result providers. Test stops
    soon as an unexpected call is made. Original, custom and
    automatically mocked subs may be freely mixed.

    Recording mode can instantaneously produce call plan skeletons from
    within legacy code.

    Examples of usage:

    # mock some packages mock_package( 'Foo::Pkg' ); my $bar =
    mock_object( 'Bar::Pkg', { optional => 'content' } );

    # define that new() should be called # without parameters and
    return $foo Foo->new() ->result( my $foo = bless {}, 'Foo' );

    $bar->my_get_method( 'field_name' ) ->min(0) # this call is
    optional ->max(9) # may be called several times ->anytime # may be
    called at any later time ->result( 'a value' ) # first call will
    return this ->result_from( \&my_code ); # result provider for
    subsequent calls

    $foo->my_other_method( arg_check( qr/part/ ), # first argument must
    match regexp arg_any( 0, 3 ), # 0-3 arguments of any kind ); #
    result may be left unspecified to return undef or ()

    mock_run(); # switch from planning to checking calls

    eval { code_under_test(); mock_end(); }; is( $@, '', "Calls made as
    expected" );

    mock_clear(); # clean the slate for next test.

    Planning and testing should already work. Recording functionality
    is still under development.

    Interesting ideas for future:

    Integration with MockCommand to cover external command calls.
    Provide easy methods for using tied variables for recording,
    controlling and testing data access.

  enteredby:   KORPIQ (Kalle Hallivuori)
  enteredon:   Wed Jan 21 21:51:19 2009 GMT

The resulting entry would be:

Test::
::CallFlow        adphp Record, plan and test what calls code makes  KORPIQ


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=d2510000_ae3bd4e029b69da2&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=d2510000_ae3bd4e029b69da2&SUBMIT_pause99_add_mod_insertit=1
