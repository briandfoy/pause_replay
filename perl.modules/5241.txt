Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:5241
Return-Path: <briani@ActiveState.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 17301 invoked from network); 27 Apr 2001 08:19:39 -0000
Received: from gw.activestate.com (HELO smtp1.ActiveState.com) (209.17.183.249)
  by tmtowtdi.perl.org with SMTP; 27 Apr 2001 08:19:39 -0000
Received: from smtp3.ActiveState.com (smtp3.ActiveState.com [192.168.3.19])
	by smtp1.ActiveState.com (8.11.1/8.11.1) with ESMTP id f3R8JBA16229
	for <modules@perl.org>; Fri, 27 Apr 2001 01:19:11 -0700
Received: from activestate.com (ingy@thebrain.ActiveState.com [192.168.3.96])
	by smtp3.ActiveState.com (8.11.1/8.11.1) with ESMTP id f3R8JAL01011
	for <modules@perl.org>; Fri, 27 Apr 2001 01:19:10 -0700
Sender: ingy@ActiveState.com
Message-ID: <3AE92B37.9E305633@activestate.com>
Date: Fri, 27 Apr 2001 01:17:59 -0700
X-Mailer: Mozilla 4.7 [en] (X11; I; Linux 2.2.13 i686)
X-Accept-Language: en
MIME-Version: 1.0
To: modules@perl.org
Subject: Request for Data::Denter
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Filtered-By: PerlMx makes it fast and easy.  See http://www.ActiveState.com/Products/PerlMx/Header
Approved: news@nntp.perl.org
From: briani@ActiveState.com (Brian Ingerson)

Would you please add Data::Denter to the modules list? 


Name           DSLI  Description
-------------  ----  --------------------------------------------
Data::Denter   adph  An alternative to Data::Dumper and Storable.


From the README:

Data::Denter - An alternative to Data::Dumper and Storable.

INTRODUCTION:

Data::Denter is yet another Perl data serializer/deserializer. It
formats nested data structures in an indented fashion. It is optimized
for human readability/editability, safe deserialization, and
(eventually) speed. 

NOTE: It may be optimized for Python programmers too, but please don't
hold that against me ;)

It exports 2 functions: C<Indent()> and C<Undent()> for serialization
and deserialization respectively. It handles all of the commonly
serializable Perl data types, including: scalars, hash refs, array refs,
scalar refs, ref refs, undef, and blessed references. It can even
properly handle circular and duplicate references.

SAMPLE:

    use Data::Denter;
    print Indent bless {foo => 42, 
                        bar => [ 'happy', undef, [], 'sad' ],
                        baz => "Bozo the Clown",
                       }, "Small::Example";

yields:

    %Small::Example
        baz => Bozo the Clown
        bar => @
            happy
            ?
            @
            sad
        foo => 42

INFORMATION:

For more information on Data::Denter, see 'perldoc Data::Denter'.

Please send questions and comments to "Brian Ingerson" <INGY@cpan.org>

Copyright (c) 2001, Brian Ingerson. All Rights Reserved.
