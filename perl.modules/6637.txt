Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:6637
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 3802 invoked from network); 18 Jul 2001 23:55:07 -0000
Received: from dubravka.kbx.de (HELO pause.perl.org) (root@212.40.160.59)
  by onion.valueclick.com with SMTP; 18 Jul 2001 23:55:07 -0000
Received: (from nobody@localhost)
	by pause.perl.org (8.9.3/8.9.3) id BAA06408;
	Thu, 19 Jul 2001 01:55:05 +0200
Date: Thu, 19 Jul 2001 01:55:05 +0200
Message-ID: <200107182355.BAA06408@pause.perl.org>
Reply-To: modules@perl.org
Subject: Module submission Text::Scan
To: modules@perl.org, iwoodhead@cpan.org
X-Spam-Rating: onion.valueclick.com 1.6.2 0/1000/N
Approved: news@nntp.perl.org
From: upload@p11.speed-link.de ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Text::Scan
  DSLIP:       bdcOp
  description: Fast text search for large number of keys
  userid:      IWOODHEAD (Ira Joseph Woodhead)
  chapterid:   11 (String_Lang_Text_Proc)
  communities:

  similar:
    Tree::Ternary Tree::Ternary_XS

  rationale:

    Text::Scan will provide a fast way to search strings for large
    numbers of keys at once. As far as I know, no one has used ternary
    trees for this purpose before, and no one has solved this particular
    problem sufficiently.

    The equivalent pure-perl approach of n-ary trees (where each node
    is a hash of single chars) is roughly 25 times slower when
    implemented correctly on ~75000 keys, and using that many regexps
    does not even bear mentioning.

  enteredby:   IWOODHEAD (Ira Joseph Woodhead)
  enteredon:   Wed Jul 18 23:55:04 2001 GMT

The resulting entry would be:

Text::
::Scan            bdcOp Fast text search for large number of keys    IWOODHEAD


Thanks for registering,
The Pause Team

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=b3000000_13e26186d218bde2&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=b3000000_13e26186d218bde2&SUBMIT_pause99_add_mod_insertit=1
