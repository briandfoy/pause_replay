Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:943
Return-Path: <ken@optusnet.com.au>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 28223 invoked from network); 20 Jan 2000 03:10:18 -0000
Received: from mail04.syd.optusnet.com.au (203.2.75.107)
  by tmtowtdi.perl.org with SMTP; 20 Jan 2000 03:10:18 -0000
Received: from optusnet.com.au (thoth.optusnet.com.au [203.10.68.104])
	by mail04.syd.optusnet.com.au (8.9.3/8.9.3) with ESMTP id OAA14790
	for <modules@perl.org>; Thu, 20 Jan 2000 14:10:06 +1100
Sender: ken@mail04.syd.optusnet.com.au
Message-ID: <38867C8E.7052CD2@optusnet.com.au>
Date: Thu, 20 Jan 2000 14:10:06 +1100
Reply-To: ken@optusnet.com.au
X-Mailer: Mozilla 4.61 [en] (X11; I; Linux 2.2.12-20 i686)
X-Accept-Language: en
MIME-Version: 1.0
To: modules@perl.org
Subject: CPAN Developer Registration
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Approved: news@nntp.perl.org
From: ken@optusnet.com.au (Ken Barber)

Hi there, 

I'd like to register as a CPAN developer. After reading your
instructions, here are you requirements as asked:

Name: Ken Barber
Email: ken@optusnet.com.au
Homepage: None
Preferred Username: kbarber
Description: A queing locking module for multiple hosts/processes.
Allows multiple processes to make concurrent changes to files/whatever.
Used mainly for NFS locking situations. Its not daemonic like
IPC::Locker - so all you need is write permissions to a directory, which
could be NFS mounted or otherwise. Supports timeouts.
DSLI: bdpO 
< 44 character description: A queing locking system for use over NFS

I currently work at an ISP and have found the lack of posix semantics
over NFS plainly frustrating. Each script designed requires a pretty
standard locking system, however I was unhappy with the fact it wasn't
modularized. So I set out to modularize it :-). Along the way I realised
we needed some way of having "Blocking Locks" and timeouts. Not wanting
to do the job halfway, I added queing functionality and timeouts and
this resulted in Multilock. This allows several (not just one or two)
scripts to wait for a lock. With the timeout facility, we can also avoid
blocks holding up processes :-).

Since my workplace use Linux on all their servers (approx 20-25 servers)
and use a lot of GNU and opensource applications (including a lot of
Perl :-) it was decided that it is fair to put back a little of what we
have taken out :-). I would like to submit some more work at a later
date as my skills develop.

ken@.
