Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:56424
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 7067 invoked from network); 17 Sep 2007 15:27:30 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 17 Sep 2007 15:27:30 -0000
Received: (qmail 30739 invoked by uid 225); 17 Sep 2007 15:27:30 -0000
Delivered-To: modules@perl.org
Received: (qmail 30725 invoked by alias); 17 Sep 2007 15:27:29 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Mon, 17 Sep 2007 08:27:20 -0700
Received: from pause.perl.org (localhost.localdomain [127.0.0.1])
	by pause.perl.org (8.13.4/8.13.4/Debian-3sarge3) with ESMTP id l8HFR2pD019254
	for <modules@perl.org>; Mon, 17 Sep 2007 17:27:02 +0200
Received: (from nobody@localhost)
	by pause.perl.org (8.13.4/8.13.4/Submit) id l8HFR2W3019253;
	Mon, 17 Sep 2007 17:27:02 +0200
Date: Mon, 17 Sep 2007 17:27:02 +0200
Message-ID: <200709171527.l8HFR2W3019253@pause.perl.org>
MIME-Version: 1.0
Subject: Module submission Error::Layout
Content-Type: Text/Plain; Charset=UTF-8
Reply-To: modules@perl.org
To: modules@perl.org
Content-Transfer-Encoding: 8bit
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Error::Layout
  DSLIP:       adppp
  description: Helps reduce error-handling clutter.
  userid:      LEPTON (Ali Işık)
  chapterid:   2 (Language_Extensions)
  communities:

  similar:

  rationale:

    This module tries to help you organize your error handling code and
    make your main logic code look less cluttered.

    You C<use Error::Layout> in a central error-handling module of your
    application:

    package MyApp::Err; use Error::Layout; sub handle_err { ... } #
    Optional default handler

    Then, in any ordinary module of your application where
    error-handling code seems to crowd out the main logic, you can C<use
    MyApp::Err>, the error-handling module you created:

    package MyApp::Foo; use MyApp::Err;

    eval { # Risky business }; if ($@) { handle_err(); }

    in which case Error::Layout will try to find a sub named
    handle_err() in C<MyApp::Foo::Err> and C<MyApp::Err>, in that order.

    package MyApp::Foo::Err; sub handle_err { ... }

    If you want to pass arguments to your handler, you can use an
    anonymous hash:

    handle_err({ FOO => $foo });

    If it is interested in the arguments, your handler should start by
    unloading the arguments hashref:

    sub handle_err { my (args_href) = @_; ... }

    Your handler will always be passed an args_href, even if you did
    not call it with one, and it will always have C<$@>, the eval error,
    saved as the value for the key C<'_EVAL_ERR'>

    sub handle_err { my (args_href) = @_; my $eval_err =
    $args_href->{_EVAL_ERR}; ... }

    If you have multiple handlers in one module, or just want to put
    the handler in a module that is named in a way that reflects its
    job, you can pass a module identifier (the name the handler's
    separate module) to C<handle_err> as the first argument:

    package MyApp::Foo; use MyApp::Err; # exports handle_err()

    if ($error_condition_1) { handle_err('Condition_One'); } ... if
    ($error_condition_2) { handle_err('Condition_Two', {FOO => $foo}); }

    For the call C<handle_err('Condition_One');>, C<Error::Layout> will
    look for an implementation of C<handle_err> in
    C<MyApp::Foo::Err::Condition_One> and C<MyApp::Err::Condition_One>,
    in that order. Any parameters hashref should come I<after> the
    identifier, as shown in the C<'Condition Two'> example above.

    If you want your error handlers to be named something other than
    C<'handle_err'>, you should pass your desired name to
    C<Error::Layout>:

    use Error::Layout 'myapp_err';

    Then, you should replace C<'handle_err'> with C<'myapp_err'> in all
    the examples above.

  enteredby:   LEPTON (Ali Işık)
  enteredon:   Mon Sep 17 15:27:02 2007 GMT

The resulting entry would be:

Error::
::Layout          adppp Helps reduce error-handling clutter.         LEPTON


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=b2210000_91e3ebfd77e49c12&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=b2210000_91e3ebfd77e49c12&SUBMIT_pause99_add_mod_insertit=1
