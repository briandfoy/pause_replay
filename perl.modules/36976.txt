Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:36976
Return-Path: <fq9vbpi02@sneakemail.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 15933 invoked from network); 9 Dec 2004 23:58:25 -0000
Received: from x1.develooper.com (63.251.223.170)
  by lists.develooper.com with SMTP; 9 Dec 2004 23:58:25 -0000
Received: (qmail 18459 invoked by uid 225); 9 Dec 2004 23:58:24 -0000
Delivered-To: modules@perl.org
Received: (qmail 18446 invoked by alias); 9 Dec 2004 23:58:24 -0000
X-Spam-Status: No, hits=-3.6 required=8.0
	tests=BAYES_00,FROM_ENDS_IN_NUMS,FROM_HAS_MIXED_NUMS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from sneakemail.com (HELO monkey.sneakemail.com) (38.113.6.61)
  by la.mx.develooper.com (qpsmtpd/0.28) with SMTP; Thu, 09 Dec 2004 15:58:22 -0800
Received: (qmail 25820 invoked by uid 501); 9 Dec 2004 23:58:18 -0000
Received: (sneakemail censored 19505-20232 #1);  9 Dec 2004 23:58:18 -0000
To: modules@perl.org
Date: Thu, 09 Dec 2004 23:55:15 -0000
In-Reply-To: <m2y8g7uydt.fsf@phoenix.squirrel.nl>
Message-ID: <19505-20232@sneakemail.com>
Subject: Re: PAUSE ID request (BUK; BrowserUk)
MIME-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Approved: news@nntp.perl.org
From: fq9vbpi02@sneakemail.com ("BrowserUk")
References: <m2y8g7uydt.fsf@phoenix.squirrel.nl>

09/12/2004 18:20:30, "Johan Vromans jvromans-at-squirrel.nl 
|BrowserUk@CPAN/CPAN|" <...> wrote:

>"Perl Authors Upload Server" <upload@pause.fiz-chemie.de> writes:
>
>> Request to register new user
>>
>> fullname: BrowserUk
>>   userid: BUK
>>     mail: CENSORED
>> homepage: 
>>      why:
>
>Please use a real name.

Firstly, I'd be more than happy to resurrect the ID [2653] that I created here a 
couple of years ago, but it seems that I've forgotten my password, and long 
since deleted the redirector email ID I used back then due to the volume of spam 
it was receiving--so using the "forgotten password" process doesn't help.

>What would you like to contribute?

I have a tied hash interface to a compact Trie implementation that works just 
like a real hash, including the ability store references. It is obviously 
somewhat slower than a real hash, but uses much less space:

	P:\test>perl CompactTrie.pm 10000
	CompactTrie=GLOB(0x194a528)
	Devel::Size: Calculated sizes for CVs are incomplete
	Devel::Size: Calculated sizes for CVs are incomplete
	CompactTrie: 82827
	Standard hash: 160360

	P:\test>perl CompactTrie.pm 100000
	CompactTrie=GLOB(0x194a528)
	Devel::Size: Calculated sizes for CVs are incomplete
	Devel::Size: Calculated sizes for CVs are incomplete
	CompactTrie: 109180
	Standard hash: 347155

It also has some other nice properties, like each/keys/values iterate in a 
reliable, user specifiable order that is a natural result of iterating a Trie, 
rather than requiring any extra code or internal data structures to produce or 
maintain that ordering as with most of the other "ordered hash" implementations.

I have a complimentary CompactArray implementation that again, trades speed for 
space. Unlike the Dan's existing module, it also can store strings instead of 
numbers as it stores a reference to the string. This also allows it to store 
nested structures.

Both are pure Perl modules, but use a couple of B::* calls and a Internals::* 
call to manipulate the refcounts of any references stored to prevent them from 
being GC'd whilst they continue to hold a packed reference to them.

I have a fuzzy string search (ala: index()), implementation that appears to be 
(much) quicker than anything else currently available. Could be useful to the 
Bio::* guys.

I have a almost fully working function that addresses the inability of 
threads::shared::share() to share a hash or array without discarding it current 
contents. Ie. It recursively traverses, copies and shares any contents in the 
structure it's argument references.

I have no interest in contributing to the Acme::* namespace.

Lots more bits and pieces kicking around that might make useful modules if I get 
around to cleaning them up, and readying them as distributions.

>
>-- Johan
>
>



