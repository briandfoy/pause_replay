Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:9559
Return-Path: <stwrtpj@earthlink.net>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 14521 invoked by uid 76); 7 Jan 2002 01:02:35 -0000
Received: from avocet.mail.pas.earthlink.net (HELO avocet.prod.itd.earthlink.net) (207.217.120.50)
  by onion.perl.org (qpsmtpd/0.05) with SMTP; Mon Jan  7 01:02:35 2002 -0000
Received: from dialup-63.211.240.58.dial1.denver1.level3.net ([63.211.240.58] helo=earthlink.net)
	by avocet.prod.itd.earthlink.net with esmtp (Exim 3.33 #1)
	id 16NOBG-0007dZ-00
	for modules@perl.org; Sun, 06 Jan 2002 17:02:31 -0800
Sender: stwrtpj
Message-ID: <3C38F324.C248EF46@earthlink.net>
Date: Sun, 06 Jan 2002 18:00:20 -0700
X-Mailer: Mozilla 4.76 [en] (X11; U; Linux 2.4.2-2 i686)
X-Accept-Language: en
MIME-Version: 1.0
To: modules@perl.org
Subject: Author registration request
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Approved: news@nntp.perl.org
From: stwrtpj@earthlink.net (Pete Stewart)

Name: Peter J. Stewart
Email: stwrtpj@earthlink.net
Homepage: None
Preferred user ID: PSTEWART

Planned contributions:

A long time ago, I used to use a Commodore 64. On the C64 I had a
program called Adventure Construction Set (ACS). ACS, as its name
suggests, gave you a framework for designing your own adventure. It
allowed you to design maps, characters, objects, graphics, etc. Many
hours of my life were consumed by ACS, whose only problem was that it
was painfully slow and required you to be an octopus with as many times
as you had to swap disks.

I always wanted to have something like ACS again to build my own
adventure games, and within the last year I decided to get off my butt
and actually do it. I chose to work in Perl as it was a way to refine my
knowledge of the language, as well as get things done quickly.

Recently, I decided to reorganize my code into modules to make them
easier to work with, and I figured, why not CPAN-ize them and see if
anyone else may want to use it?

This will be an ongoing project for me, so it will be some time before I
realize my ultimate goal. However, I do have two modules that are nearly
ready for release, after I finish test suites and documentation for
them. The suggested name for the first is Games::Object. This provides a
base class for game objects. It allows you to define arbitrary
attributes on objects, and set up rules for updating these attributes
automatically. For example, you could set up an attribute to always
"tend to" a certain value. You could, say, define an attribute to
represent a character's health that creeps by 1 towards its max each
turn, simulating healing. It also provides a basic load/save ability,
making it easy to code load game and save game functionality. There's
really a lot more to this, but this is supposed to be a "brief"
description of my contributions :)

The second object is Games::TileMap. This allows you to create and
manage graphical maps of fixed-size cells, for use in creating map
displays, based upon a Tk::Canvas widget. It provides some basic memory
management for images, as well as allow you to define mouse bindings on
the map, scrolling viewing areas, etc.

I have a third module in the wings that I am still working on called
Games::Object::Map. It links the other two modules together and allows
you to create maps from plain text template files.

Please let me know if the names I have picked for the modules sounds
good. I figured that selecting the Games hierarchy was a no-brainer. I
considered Games::ACS::Object and Games::ACS::TileMap for the module
names, since there are likely going to be more modules and perhaps it is
better if they are grouped under a single name. My only concern would be
that this would lead to awkwardly long module names. Opinions?


Pete Stewart
