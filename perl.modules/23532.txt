Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:23532
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 42640 invoked by uid 76); 13 Sep 2003 10:09:48 -0000
Received: from qmailr@one.develooper.com (HELO ran-out.mx.develooper.com) (64.81.84.115) by onion.perl.org (qpsmtpd/0.26) with SMTP; Sat, 13 Sep 2003 03:09:48 -0700
Received: (qmail 1115 invoked by uid 225); 13 Sep 2003 10:09:46 -0000
Delivered-To: modules@perl.org
Received: (qmail 1110 invoked by uid 507); 13 Sep 2003 10:09:46 -0000
Received: from [212.40.160.59] (HELO pause.perl.org) (212.40.160.59) by one.develooper.com (qpsmtpd/0.27-dev) with ESMTP; Sat, 13 Sep 2003 03:09:44 -0700
Received: from pause.perl.org (localhost [127.0.0.1])	by pause.perl.org (8.12.3/8.12.3/Debian-6.4) with ESMTP id h8DA8ptc030029;	Sat, 13 Sep 2003 12:08:51 +0200
Received: (from nobody@localhost)	by pause.perl.org (8.12.3/8.12.3/Debian-6.4) id h8DA8ogU030027;	Sat, 13 Sep 2003 12:08:51 +0200
Date: Sat, 13 Sep 2003 12:08:51 +0200
Message-ID: <200309131008.h8DA8ogU030027@pause.perl.org>
Subject: Module submission Regexp::Genex
Reply-To: modules@perl.org
To: modules@perl.org, bowmanbs@cpan.org
X-Spam-Check-By: one.develooper.com
X-Spam-Status: No, hits=1.1 required=7.0 tests=CARRIAGE_RETURNS,SPAM_PHRASE_00_01 version=2.44
X-SMTPD: qpsmtpd/0.26, http://develooper.com/code/qpsmtpd/
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Regexp::Genex
  DSLIP:       cdpfp
  description: Get strings matching a regex, using a regex
  userid:      BOWMANBS (Brad Bowman)
  chapterid:   11 (String_Lang_Text_Proc)
  communities:
    Idea & prior art search at perlmonks nodes: 284513 286981

  similar:
    String::Random

  rationale:

    I'm have a prelimiary version working which I'll upload soonish.
    The basic idea is on the perlmonks link, although I'm using
    YAPE::Regex to automate it.

    Naming ------------------------------------------ Regexp::Genex
    because the module is more focussed on the regex than the resulting
    strings. Genex is the name I started using. (Admittedly, I like the
    Reality Bites connotations)

    I prefer it to Regexp::Generator because that sounds like what
    Regexp::List & Regexp::PreSuf are doing. There's also
    Regex::Generate in parrot.

    I want to avoid these false associations but am open to better
    ideas.

    Synposis ------------------------------------------ This stuff is
    going more or less:

    use Regexp::Genex qw(strings regex rx_string count);

    my $rx = shift || '^a(b|c)d{2,3}$' || qr/^ reg(ular\s?)?
    ex(p)?(ression)? $/x;

    print "'", join("', '", strings($rx)), "'\n"; # 'abddd', 'abdd',
    'acddd', 'acdd'

    my $target = 'a' x 2; # limits total quantifiers, greed is search
    order print "got '$_'\n" for( $target =~ regex('^a(b|c)d*?$'); #
    'ab', 'abd', 'abdd', 'abddd', 'ac', 'acd', 'acdd', 'acddd' do {
    print 'len ',length($target),' => count ',count($rx); } while (
    $target += 'a' x 3 ); # len 3 => count 8, len 6 => count 14, len 9
    => 20 # count = 2 * (len + 1)

    print rx_string($rx); # 'aaaaaaaaa' =~ /(?x-ims: # ^(?> (?{ @_ =
    (); '' }) ) # Initialize $^R & @_ # (?: (?{ $^R.'a' }) ) # a # ( #
    (?: (?{ $^R.'b' }) ) # b # |(?: (?{ $^R.'c' }) ) # c # ) # (?: . (?{
    $^R.'d' }) ){0,20}? # d*? # # (?{ push @_, $^R }) (?!) # Save &
    backtrack # ) # /x;

    Utility ------------------------------------------- Test and debug
    your regex. Generate test data. Generate combinations. Generate data
    according to a lexical pattern (urls, etc) Edit the regex code to do
    different things (eg. limit it) Analyse someone else's qr// object.
    Use the strings to create a DFA :)

    Unlike String::Random, the strings aren't random :) they're what
    the regex engine would look for. They're ordered and exhaustive to
    the limit of target string size.

    I also plan to do something sensible to other regex elements. eg.
    non-anchored has implicit .* at start and end, '.', \d, [a-d]
    produce random matches (exhaustive to much),

  enteredby:   BOWMANBS (Brad Bowman)
  enteredon:   Sat Sep 13 10:08:48 2003 GMT

The resulting entry would be:

Regexp::
::Genex           cdpfp Get strings matching a regex, using a regex  BOWMANBS


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=ab400000_65be145aa1ab4093&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=ab400000_65be145aa1ab4093&SUBMIT_pause99_add_mod_insertit=1
