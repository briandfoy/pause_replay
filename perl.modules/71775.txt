Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:71775
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 17160 invoked from network); 29 Jun 2010 14:50:52 -0000
Received: from x1.develooper.com (207.171.7.70)
  by x6.develooper.com with SMTP; 29 Jun 2010 14:50:52 -0000
Received: (qmail 24276 invoked by uid 225); 29 Jun 2010 14:50:52 -0000
Delivered-To: modules@perl.org
Received: (qmail 24270 invoked by alias); 29 Jun 2010 14:50:51 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.fiz-chemie.de) (195.37.231.65)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Tue, 29 Jun 2010 07:50:50 -0700
Received: from pause.fiz-chemie.de (localhost.localdomain [127.0.0.1])
	by pause.fiz-chemie.de (8.13.8/8.13.8/Debian-3) with ESMTP id o5TEoV0D016185;
	Tue, 29 Jun 2010 16:50:31 +0200
Received: (from nobody@localhost)
	by pause.fiz-chemie.de (8.13.8/8.13.8/Submit) id o5TEoVs4016184;
	Tue, 29 Jun 2010 16:50:31 +0200
Date: Tue, 29 Jun 2010 16:50:31 +0200
Message-ID: <201006291450.o5TEoVs4016184@pause.fiz-chemie.de>
Subject: Module submission AutoRole
Reply-To: modules@perl.org
To: modules@perl.org, rhandom@cpan.org
X-Virus-Checked: Checked
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       AutoRole
  DSLIP:       Mdppp
  description: Compiletime OR runtime mixin of traits/roles
  userid:      RHANDOM (Paul Seamons)
  chapterid:   27 (Pragma)
  communities:
    Internal work discussions and on perlmonks

  similar:
    Any of the Role/Trait/Mixin modules.

  rationale:

    This module has been used internally for a number of months. It is
    somewhat similar to other role/mixin/traits modules, except that
    AutoRole only: 1) loads the module when necessary; and 2) doesn't
    require the role/mixin/trait module conform to any predefined
    standard. In many ways AutoRole can behave like an inside out
    Exporter where the methods/subroutines getting installed are listed
    by the requesting module - not the external module.

    The module getting referenced won't be loaded until one of the
    AutoRole subs is requested. As part of the generic mechanism
    AutoRole works for subs or methods. As simple example could be:

    use AutoRole Time::HiRes => {time => "time_hires"}; print
    time_hires(),"\n";

    Looking at %INC shows that the HiRes module is not loaded until
    after the time_hires method is called.

    The use of the namespace AutoRole comes from the role nature - but
    also the lack of being focused on simply class based interfaces. It
    is more of a pragma as there is not really any interaction with the
    module outside of the use statement.

    Some of the rationale may be easier to present via the perldoc.
    I've included the current working documentation for the module.

    =head1 SYNOPSIS

    use AutoRole class => 'Bam', how => 'autorequire', methods =>
    [qw(bar baz bim)];

    use AutoRole class => 'Bam', how => 'compile', methods => { bar =>
    1, baz => 1, bim => 'bim_by_some_other_name', };

    use AutoRole class => 'Bam', how => $ENV{'MOD_PERL'} && 'compile',
    # will default to autorequire if not mod_perl method => 'flimflam',

    use AutoRole class => 'Bam', how => 'autoload', # better if you are
    using many many mixin methods methods => [qw(bar baz bim biz boon
    bong brim)];

    use AutoRole Bam => [qw(bar baz bim)]; use AutoRole Bam =>
    autorequire => [qw(bar baz bim)]; # same thing use AutoRole Bam =>
    compile => [qw(bar baz bim)];

    use AutoRole Bam => methods => '*'; # load ALL methods from Bam -
    at compile time use AutoRole Bam => '*'; # same thing use AutoRole
    'Bam'; # same thing use AutoRole Bam => {'*' => qr{^bam_}}; # load
    All methods from Bam that begin with bam_ use AutoRole Bam =>
    qr{^bam_}; # same thing

    use AutoRole Bam => qr{^(?!bam_)}; # load ALL methods not beginning
    with bam_

    =head1 DESCRIPTION

    AutoRole is similar to many of the CPAN variants that handle things
    refered to as Traits, Roles, and Mixins. All of these are fairly
    similar to each other (in Perl land) though there are subtle
    nuances. If you use the type C<how> of compile - there is little
    difference in using AutoRole vs. the CPAN counterparts.

    If you use autorequire or autoload however, you save loading the
    modules until it is necessary to do so. This allows for the creation
    of "heavy" interfaces with very light frontends. AutoRole allows for
    only loading extra modules if that role's interface is used.

    One more win with roles/mixins/traits is that you can keep your
    inheritance tree sane (rather than inheriting from a role class).

    =head1 PARAMETERS

    In many cases the class, how, and method keywords are not needed
    and the intent can be determined based on the types of parameters.
    However, you can always pass the parameter names to be specific.

    =over 4

    =item C<class>

    This represents the class you would like to load the roles from.

    =item C<how>

    Can be one of compile, autorequire, or autoload. Default is
    autorequire if methods are passed, default is compile if no methods
    are passed or if '*' or qr{} are used for methods.

    Option C<compile> will load the module and mix the specified
    subs/methods in as needed at compile time.

    Option C<autorequire> does not load the module at compile time,
    instead it loads a stub subroutine that will require the module,
    re-install the real subroutine in place of the stub, and then goto
    that subroutine (to keep the call stack like it should be).

    Option C<autoload> tries to do as little work as possible by only
    installing an AUTOLOAD subroutine that will load the role methods
    when called. This is a good option over autorequire if you have a
    large number of role methods (it gives more of a runtime hit rather
    than a compiletime hit).

    =item C<methods> or C<method>

    Takes an arrayref or hashref of names or a single method name to
    load. If a hashref is passed, the value may be a different name to
    alias it to, or an arrayref of names to alias to.

    method => 'foo'

    methods => 'foo'

    methods => ['foo'],

    methods => {foo => 1},

    methods => {foo => 'foo'}

    methods => {foo => 'bar'} # installs a method called bar rather
    than foo methods => {foo => ['bar', 'baz']} # installs both bar and
    baz as rather than foo

    You can use the special method name of C<*> to load all of the
    methods from the sub. The downside to this is it will automatically
    change to compile time behavior (because it needs to lookup the list
    of available methods).

    method => '*'

    method => {'*' => 1},

    If the methods are specified with a hashref, the value of a C<*>
    entry may be a regex that will be used to match method names. Note
    however that this retrieval is only one class deep - so if your role
    inherits from a base role you will need to load it separately.

    method => {'*' => qr{^debug}} # loads all methods beginning with
    debug

    methods => {foo => 1, '*' => qr{^bar}, # loads foo and any other
    method beginning with bar }

    If you use C<*> and other aliases at the same time, the other
    aliases win.

    Since it is a common thing to do - you may also pass simply a qr{}
    and it will work like {'*' => qr{}}.

    methods => qr{^debug} # load all methods beginning with debug

    methods => qr{^(?!debug)} # load all methods not beginning with
    debug

    If the how option is C<compile> and no method or methods are
    passed, it will default to '*'. However if no methods are passed on
    autorequire or autoload, it will die.

    =back

    =head1 DIAGNOTICS

    =over 4

    =item C<Missing class name>

    Occurs when the C<class> paramter name is used but no class name
    follows.

    =item C<Missing how type>

    Occurs when the C<how> type is used but no type follows.

    =item C<How type $how is invalid>

    Type can only be compile or autorequire.

    =item C<Method name conflict - ${pkg}::$dest already exists>

    Occurs if you try and use a method name from a role that is already
    defined as a method in your class. You can work around this by using
    the alias feature of the C<method> parameter.

    =item C<Missing list of methods to load>

    Occurs if you fail to pass a list of methods during autorequire or
    autoload. Note that if you don't pass a list under how type
    C<compile> it will default to '*'.

    =back

    =cut

  enteredby:   RHANDOM (Paul Seamons)
  enteredon:   Tue Jun 29 14:50:31 2010 GMT

The resulting entry would be:

AutoRole          Mdppp Compiletime OR runtime mixin of traits/roles RHANDOM


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=c0600000_019029e47d950644&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=c0600000_019029e47d950644&SUBMIT_pause99_add_mod_insertit=1
Peek at the current permissions:
  https://pause.perl.org/pause/authenquery?pause99_peek_perms_by=me&pause99_peek_perms_query=AutoRole
