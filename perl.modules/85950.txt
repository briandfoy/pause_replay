Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:85950
Return-Path: <apache@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 4110 invoked from network); 11 May 2013 10:09:00 -0000
Received: from x1.develooper.com (207.171.7.70)
  by x6.develooper.com with SMTP; 11 May 2013 10:09:00 -0000
Received: (qmail 11876 invoked by uid 225); 11 May 2013 10:08:59 -0000
Delivered-To: modules@perl.org
Received: (qmail 11872 invoked by alias); 11 May 2013 10:08:59 -0000
X-Spam-Status: No, hits=-2.9 required=8.0
	tests=ALL_TRUSTED,BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received: from pause2.develooper.com (HELO pause.perl.org) (207.171.7.119)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sat, 11 May 2013 03:08:53 -0700
Received: by pause.perl.org (Postfix, from userid 48)
	id 1D8AC1F89A; Sat, 11 May 2013 10:08:48 +0000 (UTC)
Subject: Module submission Parallel::DataPipe
Reply-To: modules@perl.org
To: modules@perl.org
Message-ID: <20130511100848.1D8AC1F89A@pause.perl.org>
Date: Sat, 11 May 2013 10:08:48 +0000 (UTC)
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Parallel::DataPipe
  DSLIP:       Rdpfp
  description: Process Data Parallel. IPC pipes. Unix only
  userid:      OKHARCH (Oleksandr Kharchenko)
  chapterid:   5 (Networking_Devices_IPC)
  communities:
    https://github.com/okharch/Parallel-DataPipe

  similar:
    Parallel::Loops, subs::parallel, MCE

  rationale:

    what are the benefits of this module?

    1) because it uses input_iterator it does not have to know all
    input data before starting parallel processing

    2) because it uses merge_data processed data is ready for using in
    main thread immediately.

    1) and 2) remove requirements for memory which is needed to store
    data items before and after parallel work. and allows parallelize
    work on collecting, processing and using processed data.

    3) IPC is implemented using pipes vs. MCE uses Sockets and Loops -
    shared variables. Performance was fast and reliable.

    4) Implementation is small and straightforward - near 150 lines of
    code.

    5) It has one easy to use procedure to make parallel data
    processing conveyor.

    Drawbacks: Unix only. It does not currently work with Windows and
    works faulty with cygwin

  enteredby:   OKHARCH (Oleksandr Kharchenko)
  enteredon:   Sat May 11 10:08:47 2013 GMT

The resulting entry would be:

Parallel::
::DataPipe        Rdpfp Process Data Parallel. IPC pipes. Unix only  OKHARCH


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=3ed00000_62279accb67beb1d&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=3ed00000_62279accb67beb1d&SUBMIT_pause99_add_mod_insertit=1
Peek at the current permissions:
  https://pause.perl.org/pause/authenquery?pause99_peek_perms_by=me&pause99_peek_perms_query=Parallel%3A%3ADataPipe
