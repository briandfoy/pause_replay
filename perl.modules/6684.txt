Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:6684
Return-Path: <geotiger2001@yahoo.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 67504 invoked from network); 23 Jul 2001 20:56:38 -0000
Received: from web12707.mail.yahoo.com (216.136.173.244)
  by onion.valueclick.com with SMTP; 23 Jul 2001 20:56:38 -0000
Message-ID: <20010723205638.99548.qmail@web12707.mail.yahoo.com>
Received: from [208.163.171.237] by web12707.mail.yahoo.com via HTTP; Mon, 23 Jul 2001 13:56:38 PDT
Date: Mon, 23 Jul 2001 13:56:38 -0700 (PDT)
Subject: New user and new modules: Data::Display, Data::Loader, DataFax, Class::MethodBuilder
To: modules@perl.org
Cc: hanming.tu@scp.com
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Spam-Rating: onion.valueclick.com 1.6.2 0/1000/N
Approved: news@nntp.perl.org
From: geotiger2001@yahoo.com (Geo Tiger)

Name: Hanming Tu
Email address: geotiger2001@yahoo.com
Homepage: 
Preferred user-ID: GEOTIGER 

I am planning to contribute/register the following
module names:

Data::Display - 
    This was my first object-oriented Perl program.
The Display module will scan through each records and
fields in the array to collect information about the
content in the array. It creates a column definition
array, builds formating strings, and display the
contents nicely.
     The column definition array built by the module
is actually an array with hash members. It contains
these hash elements ('col', 'typ', 'max', 'min',
'dec', 'req' and 'dsp') for each column. The
subscripts in the array are in the format of
$ary[$col_seq]{$hash_ele}. The hash elements are:
  col - column name
  typ - column type, 'N' for numeric, 'C' for
characters,
        and 'D' for date
  max - maximum length of the records in the column
        (could use 'wid' to record the max length of
the
         records.)
  min - minimum length of the record in the column
        (When 'wid' is used, no 'min' is needed.)
  dft - date format such as YYYY/MM/DD, MON/DD/YYYY,
etc.
  dec - maximun decimal length of the record in the
column
  req - whether there is null or zero length records
in the
        column only 'NOT NULL is shown
  dsp - description of the columns

     The array passed to the module can have the first
row containing column names or have a separate array
containing column definitions. It has to be in the
same format of the array that we describe in the above
if it is referenced to a out side array.
     It also creates and tracks a format information.
The format information contains in a separate array,
which has exactly the same element as the column
definition array.
     It has many "set" and "get" methods to assign and
to query data contained in the object. Here is the
list of methods: (omitted here)


Data::Loader -
    This was my seocnd object-oriented Perl program. 
The Loader module creates data definition language
(DDL) codes for creating tables and control file to be
used to load data into Oracle tables. It creates DDL
codes based on column definitons contained in an array
or read from a definition file. It also has reporting
functions to generate SQL*Load error reports and load
result reports.
     The column definition array could be built from
Data::Display module.  It is actually an array with
hash members and contains these hash elements ('col',
'typ','wid', 'max', 'min', 'dec', 'dft', 'req', and
'dsp') for each column. The subscripts in the array
are in the format of $ary[$col_seq]{$hash_ele}. 
     The module will use column definitons to create
DDL codes and control file using crt_sql and crt_ctl
methods.


DataFax - (still under development)
     a module and its supporting modules to extract,
process and interact with DataFax system - a fax based
remote data capture system. See details about DataFax
system, please see at http://www.datafax.com/.


Class::MethodBuilder - (still under development)
      This module provides a framework to build
methods quickly. It combines the characteristics of
Class::Struct and Class::MethodMaker. It is similar to
Class::MethodMaker using the arguments in 'use' to
build a hash array containing the methods to be built.
The difference is that you can specify method names as
the keys in the use arguments. It includes most of the
generic methods in Class::MethodMaker.


__________________________________________________
Do You Yahoo!?
Make international calls for as low as $.04/minute with Yahoo! Messenger
http://phonecard.yahoo.com/
