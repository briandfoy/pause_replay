Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:67368
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 10752 invoked from network); 27 Aug 2009 07:16:54 -0000
Received: from x1.develooper.com (207.171.7.70)
  by x6.develooper.com with SMTP; 27 Aug 2009 07:16:54 -0000
Received: (qmail 25689 invoked by uid 225); 27 Aug 2009 07:16:54 -0000
Delivered-To: modules@perl.org
Received: (qmail 25683 invoked by alias); 27 Aug 2009 07:16:53 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 27 Aug 2009 00:16:49 -0700
Received: from pause.perl.org (localhost.localdomain [127.0.0.1])
	by pause.perl.org (8.13.8/8.13.8/Debian-3) with ESMTP id n7R7Ghcl002523
	for <modules@perl.org>; Thu, 27 Aug 2009 09:16:43 +0200
Received: (from nobody@localhost)
	by pause.perl.org (8.13.8/8.13.8/Submit) id n7R7Ghhg002522;
	Thu, 27 Aug 2009 09:16:43 +0200
Date: Thu, 27 Aug 2009 09:16:43 +0200
Message-ID: <200908270716.n7R7Ghhg002522@pause.perl.org>
Subject: Module submission IPC::Semaphore::Concurrency
Reply-To: modules@perl.org
To: modules@perl.org
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       IPC::Semaphore::Concurrency
  DSLIP:       adpOp
  description: Concurrency guard using semaphores
  userid:      DERMOTH (Thomas Guyot-Sionnest)
  chapterid:   5 (Networking_Devices_IPC)
  communities:
    http://repo.or.cz/w/IPC-Semaphore-Concurrency.git

  similar:
    IPC::Concurrency

  rationale:

    This namespace seems to be the most logical one and - interestingly
    - I came up with the Concurrency name before even knowing about
    IPC::Concurrency.

    The main difference between IPC::Concurrency and
    IPC::Semaphore::Concurrency is that the latter uses SysV semaphores
    as its implementation. This means there's a bit more flexibility as
    it allows:

    - Arrays of semaphores - Blocking on acquisition - Manual
    acquisition/release even outside of process (IPC::C is bound to a
    pid)

    This module requires IPC::SysV and subclasses IPC::Semaphore. The
    code runs well already (I use it in my Nagios event handlers) but
    desperately need tests and documentation, which I plan to complete
    prior to uploading it on CPAN.

    NB: This is my first take at writing a CPAN module and I'm still a
    bit at lost regarding Perl's way of doing OO programming. Comments
    on the code are very welcome.

  enteredby:   DERMOTH (Thomas Guyot-Sionnest)
  enteredon:   Thu Aug 27 07:16:42 2009 GMT

The resulting entry would be:

IPC::Semaphore::
::Concurrency     adpOp Concurrency guard using semaphores           DERMOTH


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=ef100000_a21386ba280423f7&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=ef100000_a21386ba280423f7&SUBMIT_pause99_add_mod_insertit=1
