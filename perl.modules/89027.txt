Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:89027
Return-Path: <ahlberg.gustav@gmail.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Delivered-To: moderator for modules@perl.org
Received: (qmail 29092 invoked from network); 24 Jan 2014 20:10:36 -0000
Received: from x1.develooper.com (207.171.7.70)
  by x6.develooper.com with SMTP; 24 Jan 2014 20:10:36 -0000
Received: (qmail 10908 invoked by uid 225); 24 Jan 2014 20:10:35 -0000
Delivered-To: modules@perl.org
Delivered-To: modules@cpan.org
Received: (qmail 10904 invoked by uid 103); 24 Jan 2014 20:10:35 -0000
Received: from xx1.dev (10.0.100.115)
  by x1.dev with QMQP; 24 Jan 2014 20:10:35 -0000
Received: from localhost (HELO xx1.develooper.com) (127.0.0.1)
    by xx1.develooper.com (qpsmtpd/0.84/v0.84-36-g0b0e4e9) with ESMTP; Fri, 24 Jan 2014 12:10:35 -0800
Received: from xx1.develooper.com (xx1.develooper.com [127.0.0.1])
	by localhost (Postfix) with SMTP id 692C62E8A83
	for <modules@cpan.org>; Fri, 24 Jan 2014 12:10:35 -0800 (PST)
Received: from mail-ie0-f182.google.com (mail-ie0-f182.google.com [209.85.223.182])
	by xx1.develooper.com (Postfix) with ESMTP id EE91C11EB86
	for <modules@cpan.org>; Fri, 24 Jan 2014 12:10:33 -0800 (PST)
Received: by mail-ie0-f182.google.com with SMTP id lx4so3391571iec.13
        for <modules@cpan.org>; Fri, 24 Jan 2014 12:10:33 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:date:message-id:subject:from:to:content-type;
        bh=+ZwL009Xnw5ZYTGlEMhScA2wp/kfitfOZowIIpw7Sxw=;
        b=WbKM1hpatjSLEjrP/UnGJDMpluAuNSMuwEb82AQCwcUwIoTPh9JD4Ukn0kJ/rLc9yO
         Jb1Fbx5RIiX4TWOyOaCENCy2Y3A6fksKqPuskKzVKR73VUrj+LWfrwImqCUQuaujPx1q
         Ldo0qxOmckcJZBcG13r5GkKO5aWZmcE8QA7QB4azKYzT3nF277njfnsY/0XdVYAXYRXW
         fNb/YVUcXYdSA0DtCCEnubrYsPNUWhPTGQ72XEnRAxTJ6MqkIioKvcGs/pBia9edYeUL
         rsVhvukxsTCgs/9DICQoQNiJaYjy7djsUcAxrpZtzCst5iGw+nBC8qNZ4CyDuvFDNzBL
         aYKg==
MIME-Version: 1.0
X-Received: by 10.50.143.33 with SMTP id sb1mr6254569igb.44.1390594232908;
 Fri, 24 Jan 2014 12:10:32 -0800 (PST)
Received: by 10.42.223.9 with HTTP; Fri, 24 Jan 2014 12:10:32 -0800 (PST)
Date: Fri, 24 Jan 2014 21:10:32 +0100
Message-ID: <CAPnBOYySrhu2jpifk7Kb7yoSbQhAX30x1w79f8-vxcb=O0tDFg@mail.gmail.com>
Subject: Problems with SeqBoot.pm
To: modules@cpan.org
Content-Type: multipart/alternative; boundary=001a1134b38a47be6904f0bcf3fc
X-PMX-Version: 5.6.1.2065439, Antispam-Engine: 2.7.2.376379, Antispam-Data: 2014.1.24.200314
X-PMX-Spam: Gauge=IIIIIIII, Probability=8%, Report='
 HTML_50_70 0.1, BODY_SIZE_10000_PLUS 0, CTYPE_MULTIPART_NO_QUOTE 0, DKIM_SIGNATURE 0, URI_ENDS_IN_HTML 0, WEBMAIL_SOURCE 0, __ANY_URI 0, __CP_URI_IN_BODY 0, __CT 0, __CTYPE_HAS_BOUNDARY 0, __CTYPE_MULTIPART 0, __CTYPE_MULTIPART_ALT 0, __FRAUD_WEBMAIL 0, __FRAUD_WEBMAIL_FROM 0, __FROM_GMAIL 0, __HAS_FROM 0, __HAS_HTML 0, __HAS_MSGID 0, __HELO_GMAIL 0, __HTML_FONT_BLUE 0, __MIME_HTML 0, __MIME_VERSION 0, __PHISH_SPEAR_HTTP_RECEIVED 0, __PHISH_SPEAR_STRUCTURE_1 0, __RDNS_GMAIL 0, __SANE_MSGID 0, __TO_MALFORMED_2 0, __TO_NO_NAME 0, __URI_NO_MAILTO 0, __URI_NO_WWW 0, __URI_NS , __YOUTUBE_RCVD 0, __zen.spamhaus.org_ERROR '
Approved: news@nntp.perl.org
From: ahlberg.gustav@gmail.com (Gustav Ahlberg)

--001a1134b38a47be6904f0bcf3fc
Content-Type: text/plain; charset=ISO-8859-1

Hi,

I am trying to parse alignments to Seqboot in the PHYLIP package using
Bioperl. as seen here
http://doc.bioperl.org/bioperl-run/lib/Bio/Tools/Run/Phylo/Phylip/SeqBoot.html

For some reason it doesnt read in the alignment. I have done exactly as in
the example. I have a deadline on my master thesis within days. and I have
no idea how to fix this



Use of uninitialized value in concatenation (.) or string at
/opt/local/lib/perl5/site_perl/5.12.4/Bio/Tools/Run/Phylo/Phylip/SeqBoot.pm
line 373.

Use of uninitialized value in concatenation (.) or string at
/opt/local/lib/perl5/site_perl/5.12.4/Bio/Tools/Run/Phylo/Phylip/SeqBoot.pm
line 381.

Missing command in piped open at
/opt/local/lib/perl5/site_perl/5.12.4/Bio/Tools/Run/Phylo/Phylip/SeqBoot.pm
line 381.

print() on closed filehandle SeqBoot at
/opt/local/lib/perl5/site_perl/5.12.4/Bio/Tools/Run/Phylo/Phylip/SeqBoot.pm
line 383.



#!/usr/bin/perl -w


use strict;

use warnings;

use BIO::Perl;

use Bio::SeqIO;

use Bio::AlignIO;

use Bio::Tools::Run::Phylo::Phylip::SeqBoot;

use Bio::Tools::Phylo::PAML::Result;

use Bio::Tools::Phylo::PAML;

use Bio::Tools::Run::Alignment::Clustalw;

use Bio::Tools::Run::Phylo::PAML::Codeml;

BEGIN { $ENV{CLUSTALDIR} = '/usr/local/bin/clustalw2/'}

BEGIN { $ENV{PALMDIR} = '~/paml3.14/codelm'};


eval {

    # Multiple Sequence Alignment programs

    require Bio::Tools::Run::Alignment::Clustalw;

};


use Getopt::Long;

my $input="";


GetOptions('i=s'  => \$input);


if(! defined $input)   {

    print "Usage:\nperl  -i cdsfile  \n";

    exit;

}

print $input;

my $cluster =  $input;



my %s=();

my $num=0;

my $head="";

my $seq ="";

#  Bootstrapalign.pl

#

#

#  Created by Gustav Ahlberg on 24/01/14.

#


#Create a SimpleAlign object

my @params = ('ktuple' => 2, 'matrix' => 'BLOSUM');

my $factory = Bio::Tools::Run::Alignment::Clustalw->new(@params);

my $inputfilename = $cluster;

my $aln = $factory->align($inputfilename); # $aln is a SimpleAlign object.

my $out = Bio::AlignIO->new(-file => ">./tmp/$cluster.aln", -format =>
'fasta');

$out -> write_aln($aln);


my $input2 = "./tmp/$cluster.aln";


#print $aln;



# Use seqboot to generate bootstap alignments

my @params = ('datatype'=>'SEQUENCE','replicates'=>100);

my $seq = Bio::Tools::Run::Phylo::Phylip::SeqBoot->new(@params);



my $aln_ref = $seq->run($aln);


foreach my $ai(@{$aln_ref}){

    print my $aio->write_aln($ai);

}

#

#my $aio =
Bio::AlignIO->new(-file=>">alignment.bootstrap",-format=>"phylip");

#foreach my $ai(@{$aln_ref}){

#    $aio->write_aln($ai);

#}


# To prevent PHYLIP from truncating sequence names:

# Step 1. Shelf the original names:

#my ($aln_safe, $ref_name)=                  #  $aln_safe has serial names

#        $input2->set_displayname_safe();    #  $ref_name holds orginal
names

# Step 2. Run PHYLIP programs:

#$aln_ref = $seq->run($aln_safe);            #  Use $aln_safe instead of
$aln

# Step 3. Retrieve orgininal names

#$aio = Bio::AlignIO->new(

#-file=>">alignment.bootstrap",

#-format=>"fasta");               #  FASTA output to view full names

#foreach my $ai(@{$aln_ref}){

#    my $new_aln=$ai->restore_displayname($ref_name); #  Restore names

#    $aio->write_aln($new_aln);

#}

--001a1134b38a47be6904f0bcf3fc
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">







<p class=3D"">Hi,<br><br>I am trying to parse alignments to Seqboot in the =
PHYLIP package using Bioperl. as seen here=A0<a href=3D"http://doc.bioperl.=
org/bioperl-run/lib/Bio/Tools/Run/Phylo/Phylip/SeqBoot.html">http://doc.bio=
perl.org/bioperl-run/lib/Bio/Tools/Run/Phylo/Phylip/SeqBoot.html</a><br>
<br>For some reason it doesnt read in the alignment. I have done exactly as=
 in the example. I have a deadline on my master thesis within days. and I h=
ave no idea how to fix this<br><br><br><br>Use of uninitialized value in co=
ncatenation (.) or string at /opt/local/lib/perl5/site_perl/5.12.4/Bio/Tool=
s/Run/Phylo/Phylip/SeqBoot.pm line 373.</p>

<p class=3D"">Use of uninitialized value in concatenation (.) or string at =
/opt/local/lib/perl5/site_perl/5.12.4/Bio/Tools/Run/Phylo/Phylip/SeqBoot.pm=
 line 381.</p>
<p class=3D"">Missing command in piped open at /opt/local/lib/perl5/site_pe=
rl/5.12.4/Bio/Tools/Run/Phylo/Phylip/SeqBoot.pm line 381.</p>
<p class=3D"">print() on closed filehandle SeqBoot at /opt/local/lib/perl5/=
site_perl/5.12.4/Bio/Tools/Run/Phylo/Phylip/SeqBoot.pm line 383.<br><br><br=
><br>







</p><p class=3D""><font color=3D"#0000ff">#!/usr/bin/perl -w</font></p><p c=
lass=3D""><font color=3D"#0000ff"><br></font></p><p class=3D""><font color=
=3D"#0000ff"><span class=3D"">use</span> strict;</font></p><p class=3D""><f=
ont color=3D"#0000ff"><span class=3D"">use</span> warnings;</font></p>
<p class=3D""><font color=3D"#0000ff"><span class=3D"">use</span> BIO::Perl=
;</font></p><p class=3D""><font color=3D"#0000ff"><span class=3D"">use</spa=
n> Bio::SeqIO;</font></p><p class=3D""><font color=3D"#0000ff"><span class=
=3D"">use</span> Bio::AlignIO;</font></p>
<p class=3D""><font color=3D"#0000ff"><span class=3D"">use</span> Bio::Tool=
s::Run::Phylo::Phylip::SeqBoot;</font></p><p class=3D""><font color=3D"#000=
0ff"><span class=3D"">use</span> Bio::Tools::Phylo::PAML::Result;</font></p=
><p class=3D"">
<font color=3D"#0000ff"><span class=3D"">use</span> Bio::Tools::Phylo::PAML=
;</font></p><p class=3D""><font color=3D"#0000ff"><span class=3D"">use</spa=
n> Bio::Tools::Run::Alignment::Clustalw;</font></p><p class=3D""><font colo=
r=3D"#0000ff"><span class=3D"">use</span> Bio::Tools::Run::Phylo::PAML::Cod=
eml;</font></p>
<p class=3D""><font color=3D"#0000ff">BEGIN { $ENV{CLUSTALDIR} =3D <span cl=
ass=3D"">&#39;/usr/local/bin/clustalw2/&#39;</span>}</font></p><p class=3D"=
"><font color=3D"#0000ff">BEGIN { $ENV{PALMDIR} =3D <span class=3D"">&#39;~=
/paml3.14/codelm&#39;</span>};</font></p>
<p class=3D""><font color=3D"#0000ff"><br></font></p><p class=3D""><font co=
lor=3D"#0000ff">eval<span class=3D""> {</span></font></p><p class=3D""><fon=
t color=3D"#0000ff"><span class=3D"">=A0 =A0 </span># Multiple Sequence Ali=
gnment programs</font></p>
<p class=3D""><font color=3D"#0000ff">=A0 =A0 <span class=3D"">require</spa=
n> Bio::Tools::Run::Alignment::Clustalw;</font></p><p class=3D""><font colo=
r=3D"#0000ff">};</font></p><p class=3D""><font color=3D"#0000ff"><br></font=
></p><p class=3D"">
<font color=3D"#0000ff"><span class=3D"">use</span> Getopt::Long;</font></p=
><p class=3D""><font color=3D"#0000ff"><span class=3D"">my</span> $input=3D=
<span class=3D"">&quot;&quot;</span>;</font></p><p class=3D""><font color=
=3D"#0000ff"><br>
</font></p><p class=3D""><font color=3D"#0000ff">GetOptions(<span class=3D"=
">&#39;i=3Ds&#39;</span>=A0 =3D&gt; \$input);</font></p><p class=3D""><font=
 color=3D"#0000ff"><br></font></p><p class=3D""><font color=3D"#0000ff"><sp=
an class=3D"">if</span>(! <span class=3D"">defined</span> $input) =A0 {</fo=
nt></p>
<p class=3D""><font color=3D"#0000ff"><span class=3D"">=A0 =A0 </span><span=
 class=3D"">print</span><span class=3D""> </span>&quot;Usage:\nperl=A0 -i c=
dsfile=A0 \n&quot;<span class=3D"">;</span></font></p><p class=3D""><font c=
olor=3D"#0000ff">=A0 =A0 <span class=3D"">exit</span>;</font></p>
<p class=3D""><font color=3D"#0000ff">}</font></p><p class=3D""><font color=
=3D"#0000ff"><span class=3D"">print</span> $input;</font></p><p class=3D"">=
<font color=3D"#0000ff"><span class=3D"">my</span> $cluster =3D=A0 $input;<=
/font></p><p class=3D"">
<font color=3D"#0000ff"><br></font></p><p class=3D""><font color=3D"#0000ff=
"><br></font></p><p class=3D""><font color=3D"#0000ff"><span class=3D"">my<=
/span> %s=3D();</font></p><p class=3D""><font color=3D"#0000ff"><span class=
=3D"">my</span> $num=3D<span class=3D"">0</span>;</font></p>
<p class=3D""><font color=3D"#0000ff"><span class=3D"">my</span> $head=3D<s=
pan class=3D"">&quot;&quot;</span>;</font></p><p class=3D""><font color=3D"=
#0000ff"><span class=3D"">my</span> $seq =3D<span class=3D"">&quot;&quot;</=
span>;</font></p>
<p class=3D""><font color=3D"#0000ff">#=A0 Bootstrapalign.pl</font></p><p c=
lass=3D""><font color=3D"#0000ff"># =A0</font></p><p class=3D""><font color=
=3D"#0000ff">#</font></p><p class=3D""><font color=3D"#0000ff">#=A0 Created=
 by Gustav Ahlberg on 24/01/14.</font></p>
<p class=3D""><font color=3D"#0000ff">#</font></p><p class=3D""><font color=
=3D"#0000ff"><br></font></p><p class=3D""><font color=3D"#0000ff">#Create a=
 SimpleAlign object</font></p><p class=3D""><font color=3D"#0000ff"><span c=
lass=3D"">my</span> @params =3D (<span class=3D"">&#39;ktuple&#39;</span> =
=3D&gt; <span class=3D"">2</span>, <span class=3D"">&#39;matrix&#39;</span>=
 =3D&gt; <span class=3D"">&#39;BLOSUM&#39;</span>);</font></p>
<p class=3D""><font color=3D"#0000ff"><span class=3D"">my</span> $factory =
=3D Bio::Tools::Run::Alignment::Clustalw-&gt;<span class=3D"">new</span>(@p=
arams);</font></p><p class=3D""><font color=3D"#0000ff"><span class=3D"">my=
</span> $inputfilename =3D $cluster;</font></p>
<p class=3D""><font color=3D"#0000ff"><span class=3D"">my</span> $aln =3D $=
factory-&gt;align($inputfilename); <span class=3D""># $aln is a SimpleAlign=
 object.</span></font></p><p class=3D""><font color=3D"#0000ff"><span class=
=3D"">my</span> $out =3D Bio::AlignIO-&gt;<span class=3D"">new</span>(-file=
 =3D&gt; <span class=3D"">&quot;&gt;./tmp/$cluster.aln&quot;</span>, -<span=
 class=3D"">format</span> =3D&gt; <span class=3D"">&#39;fasta&#39;</span>);=
</font></p>
<p class=3D""><font color=3D"#0000ff">$out -&gt; write_aln($aln);</font></p=
><p class=3D""><font color=3D"#0000ff"><br></font></p><p class=3D""><font c=
olor=3D"#0000ff"><span class=3D"">my</span><span class=3D""> $input2 =3D </=
span>&quot;./tmp/$cluster.aln&quot;<span class=3D"">;</span></font></p>
<p class=3D""><font color=3D"#0000ff"><br></font></p><p class=3D""><font co=
lor=3D"#0000ff">#print $aln;</font></p><p class=3D""><font color=3D"#0000ff=
"><br></font></p><p class=3D""><font color=3D"#0000ff"><br></font></p><p cl=
ass=3D""><font color=3D"#0000ff"># Use seqboot to generate bootstap alignme=
nts</font></p>
<p class=3D""><font color=3D"#0000ff"><span class=3D"">my</span><span class=
=3D""> @params =3D (</span>&#39;datatype&#39;<span class=3D"">=3D&gt;</span=
>&#39;SEQUENCE&#39;<span class=3D"">,</span>&#39;replicates&#39;<span class=
=3D"">=3D&gt;</span><span class=3D"">100</span><span class=3D"">);</span></=
font></p>
<p class=3D""><font color=3D"#0000ff"><span class=3D"">my</span> $seq =3D B=
io::Tools::Run::Phylo::Phylip::SeqBoot-&gt;<span class=3D"">new</span>(@par=
ams);</font></p><p class=3D""><font color=3D"#0000ff"><br></font></p><p cla=
ss=3D""><font color=3D"#0000ff"><br>
</font></p><p class=3D""><font color=3D"#0000ff"><span class=3D"">my</span>=
 $aln_ref =3D $seq-&gt;run($aln);</font></p><p class=3D""><font color=3D"#0=
000ff"><br></font></p><p class=3D""><font color=3D"#0000ff"><span class=3D"=
">foreach</span> <span class=3D"">my</span> $ai(@{$aln_ref}){</font></p>
<p class=3D""><font color=3D"#0000ff">=A0 =A0 <span class=3D"">print</span>=
 <span class=3D"">my</span> $aio-&gt;write_aln($ai);</font></p><p class=3D"=
"><font color=3D"#0000ff">}</font></p><p class=3D""><font color=3D"#0000ff"=
>#</font></p><p class=3D"">
<span style=3D"color:rgb(0,0,255)">#my $aio =3D Bio::AlignIO-&gt;new(-file=
=3D&gt;&quot;&gt;alignment.bootstrap&quot;,-format=3D&gt;&quot;phylip&quot;=
);</span><br></p><p class=3D""><font color=3D"#0000ff">#foreach my $ai(@{$a=
ln_ref}){</font></p>
<p class=3D""><font color=3D"#0000ff">#=A0 =A0 $aio-&gt;write_aln($ai);</fo=
nt></p><p class=3D""><font color=3D"#0000ff">#}</font></p><p class=3D""><fo=
nt color=3D"#0000ff"><br></font></p><p class=3D""><font color=3D"#0000ff">#=
 To prevent PHYLIP from truncating sequence names:</font></p>
<p class=3D""><font color=3D"#0000ff"># Step 1. Shelf the original names:</=
font></p><p class=3D""><font color=3D"#0000ff">#my ($aln_safe, $ref_name)=
=3D=A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 =A0 #=A0 $aln_safe has serial names</fon=
t></p><p class=3D""><font color=3D"#0000ff">#=A0 =A0 =A0 =A0 $input2-&gt;se=
t_displayname_safe();=A0 =A0 #=A0 $ref_name holds orginal names</font></p>
<p class=3D""><font color=3D"#0000ff"># Step 2. Run PHYLIP programs:</font>=
</p><p class=3D""><font color=3D"#0000ff">#$aln_ref =3D $seq-&gt;run($aln_s=
afe);=A0 =A0 =A0 =A0 =A0 =A0 #=A0 Use $aln_safe instead of $aln</font></p><=
p class=3D""><font color=3D"#0000ff"># Step 3. Retrieve orgininal names</fo=
nt></p>
<p class=3D""><font color=3D"#0000ff">#$aio =3D Bio::AlignIO-&gt;new(</font=
></p><p class=3D""><font color=3D"#0000ff">#-file=3D&gt;&quot;&gt;alignment=
.bootstrap&quot;,</font></p><p class=3D""><font color=3D"#0000ff">#-format=
=3D&gt;&quot;fasta&quot;); =A0 =A0 =A0 =A0 =A0 =A0 =A0 #=A0 FASTA output to=
 view full names</font></p>
<p class=3D""><font color=3D"#0000ff">#foreach my $ai(@{$aln_ref}){</font><=
/p><p class=3D""><font color=3D"#0000ff">#=A0 =A0 my $new_aln=3D$ai-&gt;res=
tore_displayname($ref_name); #=A0 Restore names</font></p><p class=3D""><fo=
nt color=3D"#0000ff">#=A0 =A0 $aio-&gt;write_aln($new_aln);</font></p>
<p class=3D"">























































































</p><p class=3D""><font color=3D"#0000ff">#}</font></p></div>

--001a1134b38a47be6904f0bcf3fc--
