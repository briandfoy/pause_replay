Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:47631
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 26469 invoked from network); 1 Mar 2006 11:15:34 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 1 Mar 2006 11:15:34 -0000
Received: (qmail 9180 invoked by uid 225); 1 Mar 2006 11:15:34 -0000
Delivered-To: modules@perl.org
Received: (qmail 9175 invoked by alias); 1 Mar 2006 11:15:33 -0000
X-Spam-Status: No, hits=-2.5 required=8.0
	tests=BAYES_00,FORGED_RCVD_HELO
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 01 Mar 2006 03:15:30 -0800
Received: from pause.perl.org (localhost [127.0.0.1])
	by pause.perl.org (8.13.4/8.13.4/Debian-3) with ESMTP id k21BF8fn031770;
	Wed, 1 Mar 2006 12:15:08 +0100
Received: (from nobody@localhost)
	by pause.perl.org (8.13.4/8.13.4/Submit) id k21BF8ZV031766;
	Wed, 1 Mar 2006 12:15:08 +0100
Date: Wed, 1 Mar 2006 12:15:08 +0100
Message-ID: <200603011115.k21BF8ZV031766@pause.perl.org>
Subject: Module submission Class::STL::Containers
Reply-To: modules@perl.org
To: modules@perl.org, gaffie@cpan.org
X-Virus-Checked: Checked
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Class::STL::Containers
  DSLIP:       bdpOg
  description: STL-like object management classes
  userid:      GAFFIE (Mario Gaffiero)
  chapterid:   6 (Data_Type_Utilities)
  communities:

  similar:

  rationale:

    These modules provide object container management with a framework
    similar to STL (Standard Template Library from C++). The usual
    container types are provided (list, vector, deque, queue, stack,
    priority_queue and also, tree) together with some basic algorithms
    (find_if, remove_if, foreach) and a very basic iterator type. This
    package is usefull to get up and going quickly with Perl OO program
    development.

    SYNOPSIS

    use Class::STL::Containers;

    # List container... my $l1 = Class::STL::Containers::List->new(); #
    create a list object. $l1->push_back($l1->factory(data => 'first'));
    # append elements to the list. $l1->push_back($l1->factory(data =>
    'second')); # use factory() to create object of correct element
    type. $l1->push_back($l1->factory(data => 'third'));
    $l1->push_back($l1->factory(data => 'fourth'));
    $l1->push_back($l1->factory(data => 'fifth')); print "Size:",
    $l1->size(), "\n"; # Size:5 $l1->reverse(); # reverse order elements
    in list. $l1->front()->print(MyPrint->new('front:')); # print
    element at front. $l1->back()->print(MyPrint->new('backt:')); #
    print element at back. $l1->foreach(MyPrint->new('DATA:')); # print
    each element. my @arr = $l1->to_array(); # return array of all
    elements. $l1->clear(); # delete all elements from container. print
    "Size:", $l1->size(), "\n"; # Size:0 print '$l1 container is ',
    $l1->empty() ? 'empty' : 'not empty', "\n"; # $l1 container is empty

    # Print Unary Function { package MyPrint; use base
    qw(Class::STL::Utilities::UnaryFunction); sub do { my $self = shift;
    my $elem = shift; print $self->arg(), $elem->data(), "\n"; } }

    # Deque container... my $d = Class::STL::Containers::Deque->new();
    $d->push_back($d->factory(data => 'first'));
    $d->push_back($d->factory(data => 'second'));
    $d->push_back($d->factory(data => 'third'));
    $d->push_back($d->factory(data => 'fourth'));
    $d->push_back($d->factory(data => 'fifth'));
    $d->push_front($d->factory(data => 'seventh')); $d->pop_front(); #
    remove element at front. $d->pop_back(); # remove element at back.
    $d->foreach(MyPrint->new('DATA:'));

    # Algorithms -- find_if() print "Element 'second' was ",
    $l1->find_if(MyFind->new("second")) ? 'found' : 'not found', "\n";

    # Find Unary Function { package MyFind; use base
    qw(Class::STL::Utilities::UnaryFunction); sub do { my $self = shift;
    my $elem = shift; return $elem->data() eq $self->arg() ? $elem : 0;
    } }

    # Algorithms -- foreach() l1->foreach(MyPrint->new("DATA:"));

    # Vector container... my $v =
    Class::STL::Containers::Vector->new();
    $v->push_back($v->factory(data => 'first'));
    $v->push_back($v->factory(data => 'second'));
    $v->push_back($v->factory(data => 'third'));
    $v->push_back($v->factory(data => 'fourth'));
    $v->push_back($v->factory(data => 'fifth')); my $e = $v->at(0); #
    return pointer to first element.
    $e->print(MyPrint->new('Element-0:')); # Element-0:first $e =
    $v->at($v->size()-1); # return pointer to last element.
    $e->print(MyPrint->new('Element-last:')); # Element-last:fifth $e =
    $v->at(2); # return pointer to 3rd element (idx=2).
    $e->print(MyPrint->new('Element-2:')); # Element-2:third

    # Priority Queue my $p =
    Class::STL::Containers::PriorityQueue->new();
    $p->push($p->factory(priority => 10, data => 'ten'));
    $p->push($p->factory(priority => 2, data => 'two'));
    $p->push($p->factory(priority => 12, data => 'twelve'));
    $p->push($p->factory(priority => 3, data => 'three'));
    $p->push($p->factory(priority => 11, data => 'eleven'));
    $p->push($p->factory(priority => 1, data => 'one'));
    $p->push($p->factory(priority => 1, data => 'one-2'));
    $p->push($p->factory(priority => 12, data => 'twelve-2'));
    $p->push($p->factory(priority => 20, data => 'twenty'),
    $p->factory(priority => 0, data => 'zero')); print "\$p->size()=",
    $p->size(), "\n"; $p->top()->print(MyPrint->new('$p->top:'));
    $p->top()->priority(7); # change priority for top element.
    $p->refresh(); # refresh required after priority change. $p->pop();
    # remove element with highest priority.
    $p->top()->print(MyPrint->new('$p->top:'));
    $p->foreach(MyPrint->new('DATA:'));

    # Algorithms -- remove_if()
    $v->remove_if($v->equal_to($v->back())); # remove element equal to
    back() -- ie remove last element. $v->remove_if($v->matches('^fi'));
    # remove all elements that match reg-ex '^fi'

    # Sort list according to elements cmp() function $v->sort();

    # Swap two elements $v->swap($v->front(), $v->back());

    # Tree containers my $t1 = Class::STL::Containers::Tree->new($l1);
    my $t2 = Class::STL::Containers::Tree->new($l2); my $tree =
    Class::STL::Containers::Tree->new(); # Create a tree container.
    $tree->push_back($tree->factory($t1));
    $tree->push_back($tree->factory($t2));

    # Search for element ('pink') in tree if (my $f =
    $tree->find_if(MyFind->new("pink"))) { print "FOUND:", $f->data(),
    "\n"; } else { print "'pink' NOT FOUND", "\n"; }

    my $tarr = $tree->to_array(); # traverse tree returning all element
    nodes.

    # Queue containers -- FIFO my $v =
    Class::STL::Containers::Queue->new(); $v->push($v->factory(data =>
    'first')); $v->push($v->factory(data => 'second'));
    $v->push($v->factory(data => 'third')); $v->push($v->factory(data =>
    'fourth')); $v->push($v->factory(data => 'fifth'));
    $v->back()->print(MyPrint->new('Back:')); # Back:fifth
    $v->front()->print(MyPrint->new('Front:')); # Front:first $v->pop();
    # pop element first in $v->push($v->factory(data => 'sixth'));
    $v->back()->print(MyPrint->new('Back:')); # Back:sixth
    $v->front()->print(MyPrint->new('Front:')); # Front:second

    #

  enteredby:   GAFFIE (Mario Gaffiero)
  enteredon:   Wed Mar  1 11:15:03 2006 GMT

The resulting entry would be:

Class::STL::
::Containers      bdpOg STL-like object management classes           GAFFIE


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=16c00000_6b3a347f9dd6c6a6&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=16c00000_6b3a347f9dd6c6a6&SUBMIT_pause99_add_mod_insertit=1
