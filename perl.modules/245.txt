Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:245
Return-Path: <John.Redford@fmr.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 28635 invoked from network); 25 Oct 1999 17:02:42 -0000
Received: from gw34e.fmr.com (HELO gw34i.fmr.com) (192.223.207.76)
  by tmtowtdi.perl.org with SMTP; 25 Oct 1999 17:02:42 -0000
Received: (from smtp@localhost)
	by gw34i.fmr.com (8.8.7/8.8.7) id NAA06277
	for <modules@perl.org>; Mon, 25 Oct 1999 13:02:32 -0400 (EDT)
Received: from msgbos101nts.fmr.com(137.199.100.30) by gw34i.fmr.com via smap (V2.0)
	id xma006092; Mon, 25 Oct 99 13:01:58 -0400
Received: by msgbos101nts.fmr.com with Internet Mail Service (5.5.2448.0)
	id <40GNN38C>; Mon, 25 Oct 1999 13:02:03 -0400
Message-ID: <C139F4D49384D2118EB60008C7A4337B016FA9FA@MSGBOS675NTS.fmr.com>
To: "'andreas.koenig@anima.de'" <andreas.koenig@anima.de>
Cc: modules@perl.org
Subject: RE: Spawn module
Date: Mon, 25 Oct 1999 13:01:56 -0400
MIME-Version: 1.0
X-Mailer: Internet Mail Service (5.5.2448.0)
Content-Type: text/plain;
	charset="iso-8859-1"
Approved: news@nntp.perl.org
From: John.Redford@fmr.com ("Redford, John")

Proc::Spawn would be very good. I think I even meant to name it that at some
point in the past.

-----Original Message-----
From: andreas.koenig@anima.de [mailto:andreas.koenig@anima.de]
Sent: Monday, October 25, 1999 11:29 AM
To: Redford, John
Cc: modules@perl.org
Subject: Re: Spawn module


>>>>> On Mon, 25 Oct 1999 10:29:25 -0400, "Redford, John"
<John.Redford@fmr.com> said:

 > I would like to publish another module of mine. This module is
(presently)
 > named Spawn. It exports two routines. 'spawn' and 'spawn_pty'. The usage
is:
 >   ($pid, $in_fh, $out_fh, $err_fh) = spawn( "command" | ["array", "of",
 > "command", "words"] );
 >   ($pid, $fh) = spawn_pty( "command" | ["array", "of", "command",
"words"]
 > );

 > I suppose this does not seem very dissimilar to Open3. The main
differences
 > are the calling convention (I don't believe that exposing GLOBs is ever a
 > really good idea), and the 'pty' option.

Would you mind Proc::Spawn?

The module list has already

Proc::
::Background      RdpO OS independent background process objects    BZAJAC
::ExitStatus      cdpf Interpret and act on wait() status values    ROSCH
::Forkfunc        Rdpf Simple lwall-style fork wrapper              MUIR
::ProcessTable    adcO Unix process table information               DURIST
::SafePipe        cdpf popen() and `` without calling the shell     ROSCH
::Simple          adpO Fork wrapper with objects                    MSCHILLI
::SyncExec        cdpf Spawn processes but report exec() errors     ROSCH
::times           adpf By-name interface to process times function  TOMC


-- 
andreas
