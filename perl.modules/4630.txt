Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:4630
Return-Path: <dada@perl.it>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 22905 invoked from network); 7 Mar 2001 12:02:31 -0000
Received: from unknown (HELO fe-1.inet.it) (212.239.0.34)
  by tmtowtdi.perl.org with SMTP; 7 Mar 2001 12:02:31 -0000
Received: (from trusted@localhost)
	by fe-1.inet.it (8.9.3/8.9.3) id NAA134622
	for <modules@perl.org>; Wed, 7 Mar 2001 13:02:30 +0100
Received: from unknown(194.185.18.130) by fe-1.inet.it via I-SMTP
	id queue/s-194.185.18.130-of70ia; Wed Mar  7 13:02:29 2001
Date: Wed, 7 Mar 2001 13:07:40 +0100
X-Mailer: The Bat! (v1.39) Educational
Reply-To: Aldo Calpini <dada@perl.it>
X-Priority: 3 (Normal)
Message-ID: <17547.010307@perl.it>
To: modules@perl.org
Subject: proposal - Tie::AliasHash
Mime-Version: 1.0
Content-Type: multipart/mixed; boundary="----------B413D241AEDC935"
Approved: news@nntp.perl.org
From: dada@perl.it (Aldo Calpini)

------------B413D241AEDC935
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

hello,

I have a proposal for a new module, called
Tie::AliasHash. it provides a tied hash with 'alias'
keys (or even a 'jolly' key). the stripped down
synopsis is:

  use Tie::AliasHash;
  tie %hash, 'Tie::AliasHash';

  $hash{ [ 'foo', 'bar' ] } = "xxx";
  print $hash{'foo'}; # xxx
  print $hash{'bar'}; # xxx

  $hash{'bar'} = "yyy";
  print $hash{'foo'}; # yyy
  print $hash{'bar'}; # yyy

further information in the attached POD file.

comments on every aspect (namespace, documentation,
implementation) are very welcome. should no comment
pop up, I will assume the proposal is welcome and
proceed to CPAN upload. I already proposed the module
on comp.lang.perl.modules and at least one person
said it would be useful to him :-)

cheers,
Aldo

__END__
$_=q,just perl,,s, , another ,,s,$, hacker,,print;
------------B413D241AEDC935
Content-Type: application/octet-stream; name="AliasHash.pod"
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename="AliasHash.pod"

PWhlYWQxIE5BTUUNCg0KVGllOjpBbGlhc0hhc2ggLSBIYXNoIHdpdGggYWxpYXNlcyBrZXkgKG11
bHRpcGxlIGtleXMsIG9uZSB2YWx1ZSkNCg0KPWhlYWQxIFNZTk9QU0lTDQoNCiAgdXNlIFRpZTo6
QWxpYXNIYXNoOw0KDQogIHRpZSAlaGFzaCwgJ1RpZTo6QWxpYXNIYXNoJzsNCgkNCiAgJGhhc2h7
ICdmb28nLCAnYmFyJyB9ID0gJ2Jheic7DQoJDQogIHByaW50ICRoYXNoe2Zvb307ICMgcHJpbnRz
ICdiYXonDQogIHByaW50ICRoYXNoe2Jhcn07ICMgcHJpbnRzICdiYXonIHRvbw0KDQogICRoYXNo
e2Jhcn0gPSAnemFiJzsgIyAkaGFzaHtmb299IGlzIGNoYW5nZWQgdG9vDQogIHByaW50ICRoYXNo
e2Zvb307ICMgcHJpbnRzICd6YWInDQoNCg0KPWhlYWQxIERFU0NSSVBUSU9ODQoNCkI8VGllOjpB
bGlhc0hhc2g+IGNyZWF0ZXMgaGFzaGVzIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGUga2V5cyBmb3Ig
YSBzaW5nbGUNCnZhbHVlLiBUaGlzIG1lYW5zIHRoYXQgc29tZSBrZXlzIGFyZSBqdXN0ICdhbGlh
c2VzJyBmb3Igb3RoZXIga2V5cy4NCg0KVGhlIGV4YW1wbGUgc2hvd24gaW4gdGhlIHN5bm9wc3lz
IGFib3ZlIGNyZWF0ZXMgYSBrZXkgJ2ZvbycgYW5kIGFuIA0KYWxpYXMga2V5ICdiYXInLiBUaGUg
dHdvIGtleXMgc2hhcmUgdGhlIHNhbWUgdmFsdWUsIHNvIHRoYXQgZmV0Y2hpbmcgDQplaXRoZXIg
b2YgdGhlbSB3aWxsIGFsd2F5cyByZXR1cm4gdGhlIHNhbWUgdmFsdWUsIGFuZCBzdG9yaW5nIGEg
dmFsdWUgaW4NCm9uZSBvZiB0aGVtIHdpbGwgY2hhbmdlIGJvdGguDQoNClRoZSBvbmx5IGRpZmZl
cmVuY2UgYmV0d2VlbiB0aGUgdHdvIGtleXMgaXMgdGhhdCAnYmFyJyBpcyBub3QgcmVwb3J0ZWQN
CmJ5IGtleXMoKSBhbmQgZWFjaCgpOg0KDQogIHVzZSBUaWU6OkFsaWFzSGFzaDsNCiAgdGllICVo
YXNoLCAnVGllOjpBbGlhc0hhc2gnOw0KICB0aWVkKCVoYXNoKS0+YWRkX2FsaWFzKCAnZm9vJywg
J2JhcicgKTsNCiAgZm9yZWFjaCAka2V5IChrZXlzICVoYXNoKSB7IHByaW50ICIka2V5XG4iOyB9
ICMgcHJpbnRzICdmb28nDQoNClRvIGdldCB0aGUgJ3JlYWwnIGtleXMgYW5kIHRoZSBhbGlhc2Vz
IHRvZ2V0aGVyLCB1c2UgdGhlIEM8YWxsa2V5cz4NCmZ1bmN0aW9uOg0KDQogIHVzZSBUaWU6OkFs
aWFzSGFzaDsNCiAgdGllICVoYXNoLCAnVGllOjpBbGlhc0hhc2gnOw0KICB0aWVkKCVoYXNoKS0+
YWRkX2FsaWFzKCAnZm9vJywgJ2JhcicgKTsNCiAgZm9yZWFjaCAka2V5ICh0aWVkKCVoYXNoKS0+
YWxsa2V5cykgeyBwcmludCAiJGtleVxuIjsgfSAjIHByaW50cyAnZm9vJyBhbmQgJ2JhcicNCg0K
WW91IGNhbiBjcmVhdGUgYWxpYXMga2V5cyB3aXRoIDMgbWV0aG9kczoNCg0KPW92ZXIgNA0KDQo9
aXRlbSAqDQpwcmUtZGVjbGFyaW5nIHRoZW0gd2hpbGUgdGllaW5nIHRoZSBoYXNoDQoNClRoZSAn
dGllJyBjb25zdHJ1Y3RvciBhY2NlcHRzIGFuIG9wdGlvbmFsIGxpc3Qgb2Yga2V5IG5hbWVzIGFu
ZCBhbGlhc2VzLg0KVGhlIHN5bm9wc2lzIGlzOg0KDQogIHRpZSAlSEFTSCwgJ1RpZTo6QWxpYXNI
YXNoJywgDQogICAgS0VZID0+IEFMSUFTLA0KICAgIEtFWSA9PiBbQUxJQVMsIEFMSUFTLCBBTElB
UywgLi4uXSwNCiAgICAuLi4NCg0KPWl0ZW0gKg0KZXhwbGljaXRseSB3aXRoIHRoZSBhZGRfYWxp
YXMgbWV0aG9kDQoNCiAgdGllZCglaGFzaCktPmFkZF9hbGlhcyggS0VZLCBBTElBUyApOw0KICB0
aWVkKCVoYXNoKS0+YWRkX2FsaWFzKCBLRVksIEFMSUFTLCBBTElBUywgQUxJQVMsIC4uLiApOw0K
DQo9aXRlbSAqDQppbXBsaWNpdGx5IHdpdGggYSBtdWx0aXBsZS1rZXkgaGFzaCBhc3NpZ25lbWVu
dA0KDQogICRoYXNoeyBLRVksIEFMSUFTIH0gPSBWQUxVRTsNCiAgJGhhc2h7IEtFWSwgQUxJQVMs
IEFMSUFTLCBBTElBUywgLi4uIH0gPSBWQUxVRTsNCg0KVGhlIGxpc3Qgb2Yga2V5cyBhbmQgYWxp
YXNlcyBjYW4gYmUgZWl0aGVyIGFuIGFycmF5IHJlZmVyZW5jZSwgZWcuOg0KDQogICRoYXNoeyBb
ICdmb28nLCAnYmFyJywgJ2JheicgXSB9ID0gJHZhbHVlOw0KICAkaGFzaHsgXEBmb29iYXJiYXog
fSA9ICR2YWx1ZTsNCg0Kb3IgYW4gZXhwbGljaXQgbGlzdCwgZWcuOg0KDQogICRoYXNoeyBxdyhm
b28gYmFyIGJheikgfSA9ICR2YWx1ZTsNCiAgJGhhc2h7IEBmb29iYXJiYXogfSA9ICR2YWx1ZTsN
Cg0KQmUgd2FybmVkIHRoYXQsIHdpdGggdGhlIGxhc3QgZXhhbXBsZSwgUGVybCB1c2VzIHRoZSBD
PCQ7PiB2YXJpYWJsZSANCihvciBzdWJzY3JpcHQgc2VwYXJhdG9yKSwgd2hpY2ggZGVmYXVsdHMg
dG8gJ1wwMzQnIChBU0NJSSAyOCkuIFRoaXMgDQpjYW4gY2F1c2UgcHJvYmxlbXMgaWYgeW91IHBs
YW4gdG8gdXNlIGtleXMgd2l0aCBhcmJpdHJhcnkgQVNDSUkNCmNoYXJhY3RlcnMuIEFsd2F5cyB1
c2UgdGhlIGZpcnN0IGZvcm0gd2hlbiBpbiBkb3VidC4gQ29uc3VsdA0KTDxwZXJsdmFyPiBmb3Ig
bW9yZSBpbmZvcm1hdGlvbi4NCg0KPWJhY2sNCg0KPWhlYWQyIEVYUE9SVA0KDQpOb25lIGJ5IGRl
ZmF1bHQuIFlvdSBjYW4gb3B0aW9uYWxseSBleHBvcnQgdGhlIEM8YWxsa2V5cz4gZnVuY3Rpb24N
CnRvIHlvdXIgbWFpbiBuYW1lc3BhY2UsIHNvIHRoYXQgaXQgY2FuIGJlIHVzZWQgbGlrZSB0aGUg
YnVpbHRpbiBDPGtleXM+Lg0KDQogIHVzZSBUaWU6OkFsaWFzSGFzaCAnYWxsa2V5cyc7DQogIHRp
ZSAlaGFzaCwgJ1RpZTo6QWxpYXNIYXNoJzsNCiAgZm9yZWFjaCAka2V5IChhbGxrZXlzICVoYXNo
KSB7IHByaW50ICIka2V5XG4iOyB9DQoNCj1oZWFkMiBNRVRIT0RTDQoNCj1vdmVyIDQNCg0KPWl0
ZW0gYWRkX2FsaWFzKCBLRVksIEFMSUFTLCBbQUxJQVMsIEFMSUFTLCAuLi5dICkNCg0KQWRkIG9u
ZSBvciBtb3JlIEFMSUFTIGZvciBLRVkuIElmIEtFWSBpdHNlbGYgaXMgYW4gYWxpYXMsIHRoZSAN
CmFsaWFzZXMgYXJlIGFkZGVkIHRvIHRoZSByZWFsIGtleSB3aGljaCBLRVkgcG9pbnRzIHRvLg0K
DQo9aXRlbSBhbGlhc2VzKCBLRVkgKQ0KDQpSZXR1cm5zIGEgbGlzdCBvZiBhbGwgdGhlIGFsaWFz
ZXMgZGVmaW5lZCBmb3IgS0VZLiBJZiBLRVkgaXRzZWxmIGlzDQphbiBhbGlhcywgcmV0dXJucyB0
aGUgcmVhbCBrZXkgcG9pbnRlZCBieSBLRVksIGFzIHdlbGwgYXMgYW55IG90aGVyDQphbGlhcyAo
dGh1cyBleGNsdWRpbmcgS0VZIGl0c2VsZikgaXQgaGFzLg0KDQo9aXRlbSBhbGxrZXlzDQoNClJl
dHVybnMgYWxsIHRoZSAocmVhbCkga2V5cyBvZiB0aGUgaGFzaCwgYXMgd2VsbCBhcyBhbGwgdGhl
IGFsaWFzZXMuDQoNCj1pdGVtIGlzX2FsaWFzKCBLRVkgKQ0KDQpSZXR1cm5zIHRydWUgaWYgdGhl
IHNwZWNpZmllZCBLRVkgaXMgYW4gYWxpYXMsIGZhbHNlIG90aGVyd2lzZSAoZWl0aGVyDQppZiBL
RVkgZG9lcyBub3QgZXhpc3RzIGluIHRoZSBoYXNoLCBvciBpdCBpcyBhIHJlYWwga2V5KS4NCg0K
PWl0ZW0gaXNfa2V5KCBLRVkgKQ0KDQpSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCBLRVkg
aXMgYSByZWFsIGtleSwgZmFsc2Ugb3RoZXJ3aXNlIChlaXRoZXINCmlmIEtFWSBkb2VzIG5vdCBl
eGlzdHMgaW4gdGhlIGhhc2gsIG9yIGl0IGlzIGFuIGFsaWFzIGZvciBhbm90aGVyIGtleSkuDQoN
Cj1pdGVtIHJlbW92ZSggS0VZICkNCg0KUmVtb3ZlIEtFWSBmcm9tIHRoZSBoYXNoOiBpZiBLRVkg
aXMgYSByZWFsIGtleSwgaXQgaXMgcmVtb3ZlZCB3aXRoDQphbGwgaXRzIGFsaWFzZXMuIElmIEtF
WSBpcyBhbiBhbGlhcywgQjxvbmx5IHRoZSBhbGlhcyBpcyByZW1vdmVkPi4NClRoaXMgaXMgZGlm
ZmVyZW50IGZyb20gdGhlIGJ1aWx0aW4gQzxkZWxldGU+LCBzZWUgTDxDQVZFQVRTPiBiZWxvdy4N
Cg0KPWl0ZW0gcmVtb3ZlX2FsaWFzKCBBTElBUyApDQoNClJlbW92ZXMgdGhlIHNwZWNpZmllZCBB
TElBUyBmcm9tIGl0cyByZWFsIGtleS4gQUxJQVMgaXMgbm8gbG9uZ2VyIGFuDQphbGlhcyBhbmQg
Y2FuIGJlIGFzc2lnbmVkIGl0cyBvd24gdmFsdWUuIFRoZSByZWFsIGtleSB3aGljaCBBTElBUw0K
dXNlZCB0byBwb2ludCB0byBpcyBsZWZ0IHVuY2hhbmdlZC4NCg0KPWl0ZW0gcmVtb3ZlX2FsaWFz
ZXMoIEtFWSApDQoNClJlbW92ZXMgYWxsIHRoZSBhbGlhc2VzIGRlZmluZWQgZm9yIEtFWS4NCg0K
PWl0ZW0gcmVtb3ZlX2pvbGx5KCApDQoNClJlbW92ZXMgdGhlICdqb2xseScga2V5IGZyb20gdGhl
IGhhc2guIE9wZXJhdGlvbnMgb24gbm9uLWV4aXN0YW50IGtleXMgDQphcmUgcmVzdG9yZWQgdG8g
bm9ybWFsaXR5Lg0KDQo9aXRlbSBzZXRfam9sbHkoIEtFWSApDQoNClNldHMgdGhlICdqb2xseScg
a2V5IHRvIEtFWS4gV2hlbiB5b3Ugc2V0IGEgam9sbHkga2V5LCBhbGwgZmV0Y2ggYW5kIHN0b3Jl
IA0Kb3BlcmF0aW9ucyBvbiBub24tZXhpc3RhbnQga2V5cyB3aWxsIGJlIGRvbmUgb24gS0VZIGlu
c3RlYWQuDQoNCj1iYWNrDQoNCj1oZWFkMSBDQVZFQVRTDQoNClRoaXMgbW9kdWxlIGNhbiBnZW5l
cmF0ZSBhIHdvbmRlcmZ1bCBhbW91bnQgb2YgY29uZnVzaW9uIGlmDQpub3QgdXNlZCBwcm9wZXJs
eS4gVGhlIHBhY2thZ2Ugc2hvdWxkIHJlYWxseSBoYXZlIGEgYmlnDQonSEFORExFIFdJVEggQ0FS
RScgc3RpY2tlciBvbiBpdC4gT3RoZXIgdGhhbiBwYXlpbmcgc3BlY2lhbA0KYXR0ZW50aW9uIHRv
IHdoYXQgeW91J3JlIGRvaW5nLCB5b3Ugc2hvdWxkIGJlIGF3YXJlIG9mIHRoZQ0KZm9sbG93aW5n
IHN1YnRsZW5lc3NlczoNCg0KPW92ZXIgNA0KDQo9aXRlbSAqDQp0cmFuc2l0aXZpdHkNCg0KQWxp
YXNlcyBhcmUgJ3RyYW5zaXRpdmUnLCBhbmQgYWx3YXlzIHJlc29sdmUgdG8gdGhlaXIgYWxpYXNl
ZA0Ka2V5LiBUaGlzIG1lYW5zIHRoYXQgaWYgeW91IHdyaXRlOg0KDQogIHVzZSBUaWU6OkFsaWFz
SGFzaDsNCiAgdGllICVoYXNoLCAnVGllOjpBbGlhc0hhc2gnOw0KICB0aWVkKCVoYXNoKS0+YWRk
X2FsaWFzKCAnZm9vJywgJ2JhcicgKTsNCiAgdGllZCglaGFzaCktPmFkZF9hbGlhcyggJ2Jhcics
ICdiYXonICk7DQoNCkM8JGhhc2h7YmF6fT4gaXMgY3JlYXRlZCBhcyBhbiBhbGlhcyBmb3IgQzwk
aGFzaHtmb299Piwgbm90IGZvciANCkM8JGhhc2h7YmFyfT4gKHdoaWNoIGlzbid0IGEgcmVhbCBr
ZXkpLiBUaGlzIGFsc28gbWVhbnMgdGhhdCBpZiB5b3UNCmxhdGVyIGNoYW5nZSBDPCRoYXNoe2Jh
cn0+IHRvIHBvaW50IHRvIHNvbWV0aGluZyBlbHNlLCBCPHlvdSBoYXZlbid0DQpjaGFuZ2VkPiBD
PCRoYXNoe2Jhen0+Og0KDQogIHRpZWQoJWhhc2gpLT5hZGRfYWxpYXMoICdndXAnLCAnYmFyJyAp
Ow0KICAjICRoYXNoe2Jhcn0gaXMgbm93IHJlYWxseSAtLT4gJGhhc2h7Z3VwfQ0KICAjICRoYXNo
e2Jhen0gaXMgc3RpbGwgICAgICAtLT4gJGhhc2h7Zm9vfQ0KDQo9aXRlbSAqDQpkZWxldGUNCg0K
VGhlIGJ1aWx0aW4gQzxkZWxldGU+IGZ1bmN0aW9uIHJlc29sdmVzIGFsaWFzZXMgdG8gcmVhbCBr
ZXlzLCBzbyBpdA0KZGVsZXRlcyBldmVyeXRoaW5nIGV2ZW4gd2hlbiBjYWxsZWQgb24gYW4gYWxp
YXM6DQoNCiAgdXNlIFRpZTo6QWxpYXNIYXNoOw0KICB0aWUgJWhhc2gsICdUaWU6OkFsaWFzSGFz
aCc7DQogIHRpZWQoJWhhc2gpLT5hZGRfYWxpYXMoICdmb28nLCAnYmFyJyApOw0KICANCiAgZGVs
ZXRlICRoYXNoe2Jhcn07ICMgZGVsZXRlcyAkaGFzaHtmb299IHRvbyENCg0KVG8gZGVsZXRlIGFu
IGFsaWFzIGxlYXZpbmcgaXRzIGtleSBpbnRhY3QsIHVzZSB0aGUgQzxyZW1vdmVfYWxpYXM+DQpt
ZXRob2QgaW5zdGVhZDoNCg0KICB1c2UgVGllOjpBbGlhc0hhc2g7DQogIHRpZSAlaGFzaCwgJ1Rp
ZTo6QWxpYXNIYXNoJzsNCiAgdGllZCglaGFzaCktPmFkZF9hbGlhcyggJ2ZvbycsICdiYXInICk7
DQogIA0KICB0aWVkKCVoYXNoKS0+cmVtb3ZlX2FsaWFzKCAnYmFyJyApOyAjICRoYXNoe2Zvb30g
cmVtYWlucyBpbnRhY3QNCg0KPWl0ZW0gKg0KZXhpc3RzDQoNClRoZSBidWlsdGluIEM8ZXhpc3Rz
PiBmdW5jdGlvbiByZXR1cm5zIHRydWUgb24gYWxpYXNlcyB0b286DQoNCiAgdXNlIFRpZTo6QWxp
YXNIYXNoOw0KICB0aWUgJWhhc2gsICdUaWU6OkFsaWFzSGFzaCc7DQogIHRpZWQoJWhhc2gpLT5h
ZGRfYWxpYXMoICdmb28nLCAnYmFyJyApOw0KICANCiAgcHJpbnQgZXhpc3RzICRoYXNoeydmb28n
fTsgIyBUUlVFDQogIHByaW50IGV4aXN0cyAkaGFzaHsnYmFyJ307ICMgVFJVRQ0KDQpUbyBkaXN0
aW5ndWlzaCBiZXR3ZWVuIGFsaWFzZXMgYW5kIHJlYWwga2V5cywgdXNlIHRoZSBDPGlzX2tleT4N
Cm1ldGhvZDoNCg0KICBwcmludCBleGlzdHMgJGhhc2h7J2Zvbyd9IGFuZCB0aWVkKCVoYXNoKS0+
aXNfa2V5KCdmb28nKTsgIyBUUlVFDQogIHByaW50IGV4aXN0cyAkaGFzaHsnYmFyJ30gYW5kIHRp
ZWQoJWhhc2gpLT5pc19rZXkoJ2JhcicpOyAjIEZBTFNFDQoNCj1pdGVtICoNCmFsbGtleXMNCg0K
SWYgeW91IGV4cG9ydCBDPGFsbGtleXM+IGludG8geW91ciBtYWluIG5hbWVzcGFjZSwgaXQgY2Fu
IGJlIHVzZWQNCmFzIHRoZSBidWlsdGluIEM8a2V5cz4gaW4gdGhlIGZvbGxvd2luZyBjb2RlOg0K
DQogIHVzZSBUaWU6OkFsaWFzSGFzaCAnYWxsa2V5cyc7DQogIHRpZSAlaGFzaCwgJ1RpZTo6QWxp
YXNIYXNoJzsNCiAgZm9yZWFjaCAka2V5IChhbGxrZXlzICVoYXNoKSB7IHByaW50ICIka2V5XG4i
OyB9DQoNCkJ1dCBub3RlIHRoYXQgQzxhbGxrZXlzPiBpcyBhbHdheXMgYSBmdW5jdGlvbiBjYWxs
LCBzbyB0aGlzIGRvZXMgbm90IA0Kd29yayBhcyB5b3UgZXhwZWN0Og0KDQogIGZvcmVhY2ggJGtl
eSAoc29ydCBhbGxrZXlzICVoYXNoKSB7IHByaW50ICIka2V5XG4iOyB9DQoNCllvdSBoYXZlIHRv
IGZvb2wgQzxzb3J0Piwgb3IgaXQgd2lsbCB1c2UgQzxhbGxrZXlzPiBhcyBpdHMgc29ydCByb3V0
aW5lLg0KVGhpcyBjYW4gYmUgZG9uZSBieSBwcm92aWRpbmcgYW4gZXhwbGljaXQgc29ydCByb3V0
aW5lLCBvciBmb3JjaW5nIHRoZQ0KcmVzdWx0IG9mIEM8YWxsa2V5cz4gdG8gYmUgaW50ZXJwcmV0
ZWQgYXMgYW4gYXJyYXkgYnkgDQpyZWZlcmVuY2luZy1kZXJlZmVyZW5jaW5nIGl0LCBvciB3aXRo
IGEgdHdvLXN0ZXAgb3BlcmF0aW9uIHdoZXJlIHlvdQ0KZmlyc3QgYXNzaWduIEM8YWxsa2V5cz4g
dG8gYW4gYXJyYXksIGFuZCB0aGVuIG9wZXJhdGUgb24gaXQ6DQoNCiAgZm9yZWFjaCAka2V5IChz
b3J0IHsgJGEgY21wICRiIH0gYWxsa2V5cyAlaGFzaCkgeyBwcmludCAiJGtleVxuIjsgfQ0KICBm
b3JlYWNoICRrZXkgKHNvcnQgQHtbIGFsbGtleXMgJWhhc2ggXX0pIHsgcHJpbnQgIiRrZXlcbiI7
IH0NCg0KICBAYWxsa2V5cyA9IGFsbGtleXMgJWhhc2g7DQogIGZvcmVhY2ggJGtleSAoc29ydCBA
YWxsa2V5cykgeyBwcmludCAiJGtleVxuIjsgfQ0KDQo9aXRlbSAqDQp0aGUgJ2pvbGx5JyBrZXkN
Cg0KVGhlIG1vc3QgcG90ZW50aWFsbHkgY29uZnVzaW5nIGZlYXR1cmUgb2YgdGhpcyBtb2R1bGUg
aXMgdGhlICdqb2xseScNCmtleS4gV2hlbiB5b3Ugc2V0IGEgdmFsdWUgZm9yIGl0LCBhbGwgJ3Vu
a25vd24nIGtleXMgYmVjb21lIGFsaWFzZXMNCmZvciB0aGUgam9sbHkga2V5LiBUaGlzIG1lYW5z
IHRoYXQgQjx5b3UgY2FuJ3QgY3JlYXRlIG5ldyBrZXlzPiBpbg0KdGhlIGhhc2gsIGJlY2F1c2Ug
aWYgYSBrZXkgZG9lcyBub3QgZXhpc3RzLCB0aGUgdmFsdWUgd2lsbCBiZSANCidyZWRpcmVjdGVk
JyB0byB0aGUgam9sbHkga2V5Lg0KDQpXZSBtYWtlIGFuIGV4YW1wbGUgb2YgaG93IHRoaXMgd29y
a3MgYW5kIGZvciB3aGF0IGNhbiBiZSB1c2VmdWwuDQpTdXBwb3NlIHlvdSBoYXZlIGEgdGFibGUg
b2YgcmVjb3JkcyB3aXRoIGEgJ2NpdHknIGZpZWxkLiBZb3Ugd2FudA0KdG8gY291bnQgdGhlIG9j
Y3VycmVuY2llcyBmb3IgUm9tZSwgUGFyaXMgYW5kIExvbmRvbiAocG9zc2libHkNCmV4cHJlc3Nl
ZCBpbiBkaWZmZXJlbnQgbGFuZ3VhZ2VzKSwgYW5kIGNvdW50IGV2ZXJ5IG90aGVyIGNpdHkgYXMg
DQonT3RoZXInLiANCg0KICB0aWUgJWNpdGllcywgJ1RpZTo6QWxpYXNIYXNoJzsNCiAgDQogICRj
aXRpZXN7WydSb21lJywgJ1JvbWEnLCAnUm9tJ119ID0gMDsNCiAgJGNpdGllc3tbJ1BhcmlzJywg
J1BhcmlnaSddfSA9IDA7DQogICRjaXRpZXN7WydMb25kb24nLCAnTG9uZHJhJywgJ0xvbmRyZXMn
XX0gPSAwOw0KICAkY2l0aWVzeydPdGhlcid9ID0gMDsNCiAgdGllZCglY2l0aWVzKS0+c2V0X2pv
bGx5KCdPdGhlcicpOw0KDQogIHdoaWxlKCRjaXR5ID0gZ2V0X2NpdHkoKSkgew0KICAgICAgJGNp
dGllc3skY2l0eX0rKzsNCiAgfQ0KICBmb3JlYWNoICRjaXR5IChzb3J0IGtleXMgJWNpdGllcykg
ew0KICAgICAgcHJpbnQgIiRjaXR5Olx0JGNpdGllc3skY2l0eX1cbiI7DQogIH0NCg0KQSBwb3Nz
aWJsZSBvdXRwdXQgZm9yIHRoZSBhYm92ZSBzY3JpcHQgY2FuIGJlOg0KDQogIExvbmRvbjogNA0K
ICBPdGhlcjogIDkyDQogIFBhcmlzOiAgNw0KICBSb21lOiAgIDE2DQoNCkFsc28gbm90ZSB0aGF0
IHRoZSB1c2Ugb2YgdGhlIGpvbGx5IGtleSBpcyBsaW1pdGVkIHRvIGZldGNoIGFuZCBzdG9yZSwg
DQppdCBkb2VzIG5vdCBhZmZlY3Qgb3RoZXIgaGFzaCBvcGVyYXRpb25zLCBsaWtlIGV4aXN0cywg
ZGVsZXRlLCBlYWNoLA0Ka2V5cyBhbmQgdmFsdWVzLg0KDQo9YmFjaw0KDQo9aGVhZDEgSElTVE9S
WQ0KDQo9b3ZlciA0DQoNCj1pdGVtIHYxLjAwICgwNyBNYXIgMjAwMSkNCg0KRmlyc3QgcmVsZWFz
ZWQgdmVyc2lvbg0KDQo9aXRlbSB2MC4wMSAoMjAgRmViIDIwMDEpDQoNCk9yaWdpbmFsIHZlcnNp
b247IGNyZWF0ZWQgYnkgaDJ4cyAxLjIwIHdpdGggb3B0aW9ucw0KDQogIC1DQVhuIFRpZTo6QWxp
YXNIYXNoDQoNCj1iYWNrDQoNCj1oZWFkMSBBVVRIT1INCg0KQWxkbyBDYWxwaW5pIDxkYWRhQHBl
cmwuaXQ+DQoNCj1jdXQNCg==
------------B413D241AEDC935--


