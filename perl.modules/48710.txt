Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:48710
Return-Path: <tom@nurknet.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Delivered-To: moderator for modules@perl.org
Received: (qmail 1966 invoked from network); 5 May 2006 23:15:02 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 5 May 2006 23:15:02 -0000
Received: (qmail 22143 invoked by uid 225); 5 May 2006 19:15:01 -0000
Delivered-To: modules@perl.org
Received: (qmail 22129 invoked by alias); 5 May 2006 19:15:00 -0000
X-Spam-Status: No, hits=-1.2 required=8.0
	tests=BAYES_00,HTML_10_20,HTML_MESSAGE,SPF_HELO_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from relay02.roc.ny.frontiernet.net (HELO relay02.roc.ny.frontiernet.net) (66.133.182.165)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Fri, 05 May 2006 12:14:57 -0700
Received: from [127.0.0.1] (67-137-111-146.dsl2.brv.mn.frontiernet.net [67.137.111.146])
	by relay02.roc.ny.frontiernet.net (Postfix) with ESMTP id 47F1C370426;
	Fri,  5 May 2006 19:14:50 +0000 (UTC)
Message-ID: <445BA425.6090608@nurknet.com>
Date: Fri, 05 May 2006 14:14:45 -0500
User-Agent: Thunderbird 1.5.0.2 (Windows/20060308)
MIME-Version: 1.0
To:  modules@perl.org
Subject: Re: Module submission Class::Methodist
References: <200605050101.k45119SY031750@pause.perl.org> 
In-Reply-To: <200605050101.k45119SY031750@pause.perl.org> 
Content-Type: multipart/alternative;
 boundary="------------020702030702070706090406"
X-Virus-Scanned: by amavisd-new-2.3.2 (20050629) at filter02.roc.ny.frontiernet.net
X-Virus-Checked: Checked
Approved: news@nntp.perl.org
From: tom@nurknet.com (Tom Nurkkala)

--------------020702030702070706090406
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit

brian d foy wrote:
>> The following module was proposed for inclusion in the Module List:
>>
>>   modid:       Class::Methodist
>>   DSLIP:       MdpOp
>>   description: Define class members and methods
>>   userid:      NURK (Tom Nurkkala)
>>     
>
> How's this one different from all of the other modules that already do
> this? Does your module name have any significance related to how it
> does its magic?
>
>   
Hi Brian --

The class is simple without being simplistic.  I've tried to avoid the 
kind of complexity inherent in some of the other modules.  For example, 
Class::MakeMethods is very powerful but also very verbose and requires 
familiarity with a bevy of subclasses to use it effectively.  Rather 
than easing the implementation of classes, MakeMethods feels like it 
trades the complexity of writing classes by hand and for the complexity 
of using MakeMethods.  Class::Methodist is much more modest in scope, 
but makes construction of typical classes simple and convenient -- it 
doesn't get in the way by its sheer bulk.

I wrote Methodist as a supporting module for construction of a much 
larger OO Perl package (a multi-platform, multi-target build 
configuration system that extends to over 15,000+ lines of Perl).  By 
extending Methodist to meet real-world requirements in developing the 
larger package, I believe it addresses a considerable fraction of the 
needs of the average Perl developer.  And what isn't addressed can be 
easily added as the underlying implementation is a straightforward 
blessed hash reference.  (I had considered reimplementing the package 
using Damian's "inside-out" classes, but despite the obvious advantages 
of his model in terms of encapsulation and performance, my larger system 
was nearly complete.)

The package also seeks to perform as well as a hand-written blessed hash 
reference class.  I have profiled it extensively in actual use and made 
substantial modifications to ensure good performance.  For example, the 
method "beget" (inspired by the standard "bless") was adopted after 
identifying run-time bottlenecks pertaining to instance initialization 
in which I was making a run-time check in many of the accessors to make 
sure the object was initialized (e.g., to make sure lists were 
constructed prior to an accessor invocation).  Although simple, this 
approach proved costly, and the addition of beget() allowed instance 
initialization to take place in one location in the module and as a 
pleasant side effect, provided a convenient way to express instance 
initialization in the derived-class constructor.

Other advantages of Class::Methodist stem from my selection of methods 
for each instance variable type.  For example, in other Class:: 
packages, the list-valued methods defined in the class usually seek to 
emulate complete Perl list semantics, particularly random access to 
individual elements.  My experience is that in a thoroughly OO 
application, list-valued instance variables are often used to store 
collections of other values or objects that are then operated on en 
masse rather than indexed sequentially -- for example using a Perl map 
invocation.  As a result, Methodist doesn't provide a direct addressable 
method to access an array instance variable.  I have not found this to 
be a limitation in practice, and the reduced complexity seems 
beneficial.  Of course, this decision limits the applicability somewhat; 
for example, Methodist would not be the proper choice for building a 
matrix algebra package (but Perl may not be the right choice there in 
the first place).

As for the name, it is perhaps cutesy, but it conveys the clear purpose 
of the module.  It also ties in well, I think, with the notion of 
objects being blessed and (in Methodist) being begotten via the beget 
method.  Finally, I am trained as a theologian (MA) as well as a 
computer scientist (PhD), and although I graduated from a Baptist 
seminary, the name Methodist was better suited to the problem domain.

thanks,
tom.

-- 
Dr. Tom Nurkkala
Lakeville, MN
tom@nurknet.com
http://www.cs.umn.edu/~nurkkala


--------------020702030702070706090406
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html;charset=ISO-8859-1" http-equiv="Content-Type">
</head>
<body bgcolor="#ffffff" text="#000000">
brian d foy wrote:
<blockquote cite="midmd5:64756D6D79206D657373616765206964" type="cite">
  <blockquote type="cite">
    <pre wrap="">The following module was proposed for inclusion in the Module List:

  modid:       Class::Methodist
  DSLIP:       MdpOp
  description: Define class members and methods
  userid:      NURK (Tom Nurkkala)
    </pre>
  </blockquote>
  <pre wrap=""><!---->
How's this one different from all of the other modules that already do
this? Does your module name have any significance related to how it
does its magic?

  </pre>
</blockquote>
Hi Brian --<br>
<br>
The class is simple without being simplistic.&nbsp; I've tried to avoid the
kind of complexity inherent in some of the other modules.&nbsp; For example,
Class::MakeMethods is very powerful but also very verbose and requires
familiarity with a bevy of subclasses to use it effectively.&nbsp; Rather
than easing the implementation of classes, MakeMethods feels like it
trades the complexity of writing classes by hand and for the complexity
of using MakeMethods.&nbsp; Class::Methodist is much more modest in scope,
but makes construction of typical classes simple and convenient -- it
doesn't get in the way by its sheer bulk.<br>
<br>
I wrote Methodist as a supporting module for construction of a much
larger OO Perl package (a multi-platform, multi-target build
configuration system that extends to over 15,000+ lines of Perl).&nbsp; By
extending Methodist to meet real-world requirements in developing the
larger package, I believe it addresses a considerable fraction of the
needs of the average Perl developer.&nbsp; And what isn't addressed can be
easily added as the underlying implementation is a straightforward
blessed hash reference.&nbsp; (I had considered reimplementing the package
using Damian's "inside-out" classes, but despite the obvious advantages
of his model in terms of encapsulation and performance, my larger
system was nearly complete.)<br>
<br>
The package also seeks to perform as well as a hand-written blessed
hash reference class.&nbsp; I have profiled it extensively in actual use and
made substantial modifications to ensure good performance.&nbsp; For
example, the method "beget" (inspired by the standard "bless") was
adopted after identifying run-time bottlenecks pertaining to instance
initialization in which I was making a run-time check in many of the
accessors to make sure the object was initialized (e.g., to make sure
lists were constructed prior to an accessor invocation).&nbsp; Although
simple, this approach proved costly, and the addition of beget()
allowed instance initialization to take place in one location in the
module and as a pleasant side effect, provided a convenient way to
express instance initialization in the derived-class constructor.<br>
<br>
Other advantages of Class::Methodist stem from my selection of methods
for each instance variable type.&nbsp; For example, in other Class::
packages, the list-valued methods defined in the class usually seek to
emulate complete Perl list semantics, particularly random access to
individual elements.&nbsp; My experience is that in a thoroughly OO
application, list-valued instance variables are often used to store
collections of other values or objects that are then operated on en
masse rather than indexed sequentially -- for example using a Perl map
invocation.&nbsp; As a result, Methodist doesn't provide a direct
addressable method to access an array instance variable.&nbsp; I have not
found this to be a limitation in practice, and the reduced complexity
seems beneficial.&nbsp; Of course, this decision limits the applicability
somewhat; for example, Methodist would not be the proper choice for
building a matrix algebra package (but Perl may not be the right choice
there in the first place).<br>
<br>
As for the name, it is perhaps cutesy, but it conveys the clear purpose
of the module.&nbsp; It also ties in well, I think, with the notion of
objects being blessed and (in Methodist) being begotten via the beget
method.&nbsp; Finally, I am trained as a theologian (MA) as well as a
computer scientist (PhD), and although I graduated from a Baptist
seminary, the name Methodist was better suited to the problem domain.<br>
<br>
thanks,<br>
tom.<br>
<br>
<pre class="moz-signature" cols="72">-- 
Dr. Tom Nurkkala
Lakeville, MN
<a class="moz-txt-link-abbreviated" href="mailto:tom@nurknet.com">tom@nurknet.com</a>
<a class="moz-txt-link-freetext" href="http://www.cs.umn.edu/~nurkkala">http://www.cs.umn.edu/~nurkkala</a>
</pre>
</body>
</html>

--------------020702030702070706090406--

