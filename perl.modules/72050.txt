Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:72050
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 10989 invoked from network); 25 Jul 2010 01:24:55 -0000
Received: from x1.develooper.com (207.171.7.70)
  by x6.develooper.com with SMTP; 25 Jul 2010 01:24:55 -0000
Received: (qmail 6992 invoked by uid 225); 25 Jul 2010 01:24:55 -0000
Delivered-To: modules@perl.org
Received: (qmail 6988 invoked by alias); 25 Jul 2010 01:24:55 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.fiz-chemie.de) (195.37.231.65)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sat, 24 Jul 2010 18:24:54 -0700
Received: from pause.fiz-chemie.de (localhost.localdomain [127.0.0.1])
	by pause.fiz-chemie.de (8.13.8/8.13.8/Debian-3) with ESMTP id o6P1Nv6c005211;
	Sun, 25 Jul 2010 03:23:57 +0200
Received: (from nobody@localhost)
	by pause.fiz-chemie.de (8.13.8/8.13.8/Submit) id o6P1NvD3005209;
	Sun, 25 Jul 2010 03:23:57 +0200
Date: Sun, 25 Jul 2010 03:23:57 +0200
Message-ID: <201007250123.o6P1NvD3005209@pause.fiz-chemie.de>
Subject: Module submission Autocache
Reply-To: modules@perl.org
To: modules@perl.org, wiggly@cpan.org
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Autocache
  DSLIP:       adphp
  description: Automatic caching framework for Perl
  userid:      WIGGLY (Nigel A Rantor)
  chapterid:   6 (Data_Type_Utilities)
  communities:
    http://github.com/wiggly/autocache

  similar:
    Memoize, Cache::*

  rationale:

    This code started out as a refactoring of the caching of a rather
    large website.

    This is a framework that allows developers to cache results from
    functions declaratively. It will eventually provide access to
    modules such as Cache::* family.

    It splits the work of caching into two distinct areas, strategies
    and stores.

    Stores control the actual storage of cached results, eviction and
    persistence.

    Strategies allow the developer to decide how things get cached.
    Cost-based caching allows you to only cache results that take over a
    certain amount of time to generate. Refresh allows values to be
    updated at some later point, for example after all data has been
    sent to a client, or when there is little other work to do in a POE
    queue.

    In the simplest case it is as easy to use as Memoize, without
    having to worry about scalar vs. list context.

    The below will use an in-process memory store and simple strategy.

    autocache 'my_slow_function';

    Most of the power comes from the fact that the way in which a
    particular function is cached can be configured through dependency
    injection, and therefore requires no code changes, making it easy to
    play with using different types of back-end store and caching
    options.

  enteredby:   WIGGLY (Nigel A Rantor)
  enteredon:   Sun Jul 25 01:23:57 2010 GMT

The resulting entry would be:

Autocache         adphp Automatic caching framework for Perl         WIGGLY


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=47100000_faf9632fd71b2f44&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=47100000_faf9632fd71b2f44&SUBMIT_pause99_add_mod_insertit=1
Peek at the current permissions:
  https://pause.perl.org/pause/authenquery?pause99_peek_perms_by=me&pause99_peek_perms_query=Autocache
