Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:4806
Return-Path: <ram@chram.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 4487 invoked from network); 25 Mar 2001 16:49:06 -0000
Received: from agrenoble-101-1-1-84.abo.wanadoo.fr (HELO lyon.ram.loc) (193.251.23.84)
  by tmtowtdi.perl.org with SMTP; 25 Mar 2001 16:49:06 -0000
Received: from nice.ram.loc (nice.ram.loc [192.168.0.3])
	by lyon.ram.loc (8.9.3/8.9.3/Debian 8.9.3-21) with ESMTP id SAA24597;
	Sun, 25 Mar 2001 18:48:36 +0200
Received: from nice.ram.loc (localhost [127.0.0.1])
	by nice.ram.loc (8.9.3/8.9.3/Debian 8.9.3-21) with ESMTP id SAA25236;
	Sun, 25 Mar 2001 18:48:36 +0200
To: modules@perl.org
Cc: christophe@dehaudt.org
Subject: ANNOUNCE: Released Devel::Datum & Getargs::Long
X-Mailer: MH [version 6.8]
Organization: Home, Grenoble, France
Date: Sun, 25 Mar 2001 18:48:36 +0200
Message-ID: <25234.985538916@nice.ram.loc>
Sender: ram@chram.org
Approved: news@nntp.perl.org
From: Raphael_Manfredi@pobox.com (Raphael Manfredi)

I have finally taken the time to release two important modules, which
are building blocks for other modules of mine that are still pending
release in the wait queue... I just lack time ticks to process them ;-)

They don't work with 5.6.0, so don't even try it.  They work with 5.005_03
of course, and where tested OK by myself with 5.6.1-TRIAL1 on Linux.

The first module is Getargs::Long, which gives easy named parameter usage
in routines, with optional type checking of the arguments:

    use Getargs::Long;

    sub f {
        my ($x, $y ,$z) = getargs(@_, qw(x=ARRAY y=i z=s));
        ....
    }

    # And now for the call...  Argument order does not matter, of course
    f(-x => ['a', 'b'], -y => 1, -z => "foo");

The second module is Devel::Datum (it uses Getargs::Long) which provides
some support for Programming by Contract, and flexible tracing abilities,
which can be configured via a mini-language.  Devel::Datum cooperates with
Log::Agent for its tracing routines.

It is very different from Class::Contract, in that it does not alienate
the Perl syntax too much, although it adds some clutter of its own:

    use Devel::Datum qw(:all on);

    sub routine {
        DFEATURE my $f_, "optional message";
        my ($a, $b) = @_;
        DREQUIRE $a > $b, "a > b";
        $a += 1; $b += 1;
        DASSERT $a > $b, "ordering a > b preserved";
        my $result = $b - $a;
        DENSURE $result < 0;
        return DVAL $result;
    }

The Devel::Datum module is a co-development between Christophe Dehaudt and I.
It is derived from a C/C++ runtime called... DATUM, authored by the same
people...

Raphael Manfredi & Christophe Dehaudt
