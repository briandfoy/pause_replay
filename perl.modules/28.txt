Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:28
Return-Path: <John.Redford@fmr.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 11118 invoked from network); 14 Oct 1999 14:47:12 -0000
Received: from gw16e.fmr.com (HELO gw16i.fmr.com) (192.223.252.80)
  by tmtowtdi.perl.org with SMTP; 14 Oct 1999 14:47:12 -0000
Received: (from smtp@localhost)
	by gw16i.fmr.com (8.8.7/8.8.7) id KAA22799
	for <modules@perl.org>; Thu, 14 Oct 1999 10:47:10 -0400 (EDT)
Received: from msgmro101nts.fmr.com(172.26.2.64) by gw16i.fmr.com via smap (V2.0)
	id xma022639; Thu, 14 Oct 99 10:46:44 -0400
Received: by msgmro101nts.fmr.com with Internet Mail Service (5.5.2448.0)
	id <46YY2HF9>; Thu, 14 Oct 1999 10:46:43 -0400
Message-ID: <C139F4D49384D2118EB60008C7A4337B57848B@MSGBOS675NTS.fmr.com>
To: "'John Porter'" <jdporter@min.net>
Cc: modules@perl.org
Subject: RE: NameSpace module
Date: Thu, 14 Oct 1999 10:46:37 -0400
MIME-Version: 1.0
X-Mailer: Internet Mail Service (5.5.2448.0)
Content-Type: text/plain;
	charset="iso-8859-1"
Approved: news@nntp.perl.org
From: John.Redford@fmr.com ("Redford, John")

$ns = new NameSpace();    # The current package's namespace.
$ns = new NameSpace("Foo::Bar");    # The named package's namespace. 

$value = $ns->get("SomeFunction", "CODE");
$ns->set("MyFunction", $value);

On "get", you have to specify what kind of thing you want. The "set" method
simply determines what kind of thing you have & does the appropriate thing
with it.

There is also 'exists', which is like 'get', only it returns a boolean
value.

		-----Original Message-----
		From:	'John Porter' [mailto:jdporter@min.net]
		Sent:	Thursday, October 14, 1999 10:16 AM
		To:	Redford, John
		Cc:	modules@perl.org
		Subject:	Re: NameSpace module

		Redford, John wrote:
		> Well, the problem I see there is that without the "object"
to encapsulate
		> the syntax for package naming, you get more or less the
same interface you
		> have anyway.
		> 
		> I don't see any real advantage to providing
		> 	set(*{"$pkg\::$name"}, $value);
		> over the normal
		> 	*{"$pkg\::$name"} = $value;

		Well, what does the syntax you propose look like?

		Can you give a small sample of the module's usage?

		-- 
		John Porter
