Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:34210
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 18682 invoked from network); 18 Aug 2004 19:11:51 -0000
Received: from x1.develooper.com (63.251.223.170)
  by lists.develooper.com with SMTP; 18 Aug 2004 19:11:51 -0000
Received: (qmail 18249 invoked by uid 225); 18 Aug 2004 19:11:50 -0000
Delivered-To: modules@perl.org
Received: (qmail 18244 invoked by alias); 18 Aug 2004 19:11:49 -0000
X-Spam-Status: No, hits=-4.9 required=8.0
	tests=BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
  by la.mx.develooper.com (qpsmtpd/0.27.1) with ESMTP; Wed, 18 Aug 2004 12:11:47 -0700
Received: from pause.perl.org (localhost [127.0.0.1])
	by pause.perl.org (8.12.3/8.12.3/Debian-6.6) with ESMTP id i7IJBgKt015608
	for <modules@perl.org>; Wed, 18 Aug 2004 21:11:42 +0200
Received: (from nobody@localhost)
	by pause.perl.org (8.12.3/8.12.3/Debian-6.6) id i7IJBgBd015606;
	Wed, 18 Aug 2004 21:11:42 +0200
Date: Wed, 18 Aug 2004 21:11:42 +0200
Message-ID: <200408181911.i7IJBgBd015606@pause.perl.org>
Subject: Module submission PROP
Reply-To: modules@perl.org
To: modules@perl.org
X-Virus-Checked: Checked
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       PROP
  DSLIP:       bdpOo
  description: Persistent Relational Objects (in) Perl
  userid:      AWGIBBS (Andrew William Gibbs)
  chapterid:    7 (Database_Interfaces)
  communities:
    PerlMonks

  similar:
    presumably all of the RDBMS-OO mappers on
    http://poop.sourceforge.net/

  rationale:

    The purpose of this module is to provide a robust and extensible
    framework for object and relational persistence in a way that is
    compatible with any SQL capable RDBMS, and that fails gracefully and
    intelligently. It is implemented in the form of object oriented Perl
    code that lives on top of the Perl DBI, and uses artful sub-classing
    to obtain functionality for different DBDs. While it is true that
    other modules have attempted to provide such functionality, this
    module goes to great pains to invent a better wheel, since as of yet
    nobody has created one that is entirely satisfactory.

    One of the things at which this module excels is encouraging good
    table structure. It insists on proper table normalization, employs
    surrogate primary keys, and externalizes linkage information, making
    sure that there are solid boundaries between the tables that
    represent objects and the ones that represent relationships.

    Another strong selling point is the efficiency of the underlying
    engine. While many existing modules perform "lazy loading", i.e.
    loading objects and then separately loading relatives for each one
    with its own query, this module provides a rich structure for
    executing large queries in batches, assembling fragments of streams
    into objects and their relatives. This has a dramatic effect on
    holding down the number of queries made to the database, as the
    total number of queries grows with respect to the number of
    different relationships being loaded, as opposed to the number of
    objects being loaded. For example, if you load 100 objects along
    with their relatives for each of three different relationships, then
    the engine issues a total of four queries. If you instead load 1000
    objects and the relatives for each of three different relationships,
    there are still only four queries. Furthermore, the engine scales
    well, as it operates by handing you back an iterator, and performing
    large queries in multiple reasonably sized blocks, assembling the
    results behind the scenes, unbeknownst to the user who just sees a
    constant stream of objects.

    Perhaps the feature with the widest appeal is the intensive
    exception handling this module does in an attempt to facilitate
    debugging. Object oriented exceptions are used, and are propagated
    throughout all levels of the module so when problems crop up,
    instead of a cryptic error message from the bowels of the engine,
    one receives an in depth retrace of the stack at the time of the
    crash, and contextual information that is appended at every level
    during exception re-throwing. The result is that errors can be
    diagnosed with extreme rapidity. Also of note is the callback
    function framework that allows users to specify restrictions on the
    values that various fields accept. On top of all this, there is a
    special debugging mode that may be engaged during development that,
    while sucking up extra CPU cycles, allows for much more stringent
    error catching.

    At this point the module is extremely mature. It has been developed
    over the past couple months in the course of my duties as an
    employee at the US Department of Commerce's National Institute of
    Standards and Technology. It has approval from management to be
    released to the public domain, and is sufficiently generalized that
    it suits their purposes while being widely applicable to the
    programming problems of anyone attempting to deploy a system that
    uses persistent objects and relationships.

    If this module were to be placed under some other namespace, then I
    suppose DBIx::PROP would do. However, I think people have a lot of
    pre-conceptions about how DBIx::* modules work, and thus to avoid
    the prejudice it would be nice for it to have its own name space.
    The querying engine for this module is in particular quite robust
    and flexible, surpassing what is offered by most other modules and
    doing so in a clean object oriented fashion.

  enteredby:   AWGIBBS (Andrew William Gibbs)
  enteredon:   Wed Aug 18 19:11:38 2004 GMT

The resulting entry would be:

PROP              bdpOo Persistent Relational Objects (in) Perl      AWGIBBS


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=e9600000_4559a6a5a48f0615&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=e9600000_4559a6a5a48f0615&SUBMIT_pause99_add_mod_insertit=1
