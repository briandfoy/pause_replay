Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:82881
Return-Path: <mst@shadowcat.co.uk>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 9540 invoked from network); 23 Oct 2012 21:10:53 -0000
Received: from x1.develooper.com (207.171.7.70)
  by x6.develooper.com with SMTP; 23 Oct 2012 21:10:53 -0000
Received: (qmail 28049 invoked by uid 225); 23 Oct 2012 21:10:52 -0000
Delivered-To: modules@perl.org
Received: (qmail 28045 invoked by alias); 23 Oct 2012 21:10:52 -0000
X-Spam-Status: No, hits=-1.2 required=8.0
	tests=BAYES_00,SPF_SOFTFAIL
X-Spam-Check-By: la.mx.develooper.com
Received: from agaton.scsys.co.uk (HELO agaton.scsys.co.uk) (89.16.177.50)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Tue, 23 Oct 2012 14:10:49 -0700
Received: from matthewt by agaton.scsys.co.uk with local (Exim 4.72)
	(envelope-from <mst@shadowcat.co.uk>)
	id 1TQlkK-0000Ik-Om; Tue, 23 Oct 2012 22:10:44 +0100
Date: Tue, 23 Oct 2012 22:10:44 +0100
To: Alfie John <alfie@h4c.kr>
Cc: modules@perl.org
Subject: Re: Module submission Data::PathSimple
Message-ID: <20121023211044.GX6412@newagaton.scsys.co.uk>
References: <201210131234.q9DCYOJp005719@pause.fiz-chemie.de>
 <221020122322238384%brian.d.foy@gmail.com>
 <20121023092947.GI20714@linode1.alfiejohn.com>
 <20121023153731.GT6412@newagaton.scsys.co.uk>
 <20121023204937.GJ20714@linode1.alfiejohn.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20121023204937.GJ20714@linode1.alfiejohn.com>
User-Agent: Mutt/1.5.20 (2009-06-14)
Approved: news@nntp.perl.org
From: mst@shadowcat.co.uk (Matt S Trout)

On Wed, Oct 24, 2012 at 07:49:37AM +1100, Alfie John wrote:
> As for integrating set() into Data::SPath. I guess I could have created a
> wrapper around it as my get() would just fill in the import subroutines with my
> preferences and just copy/paste my set() in. The biggest drawback here (which
> is a killer IMHO) is having a dependency. My get() subroutine is 32 lines and
> set() 56 lines. Do I really want to rely on another peice of code for the sake
> of 56 lines? No I don't. The less dependencies the better IMHO and I think the
> majority would agree too.

Audrey Tang once said:

"perl5 is just syntax. CPAN is the language."

After I wrote Devel::Declare we amended it to:

"perl5 is just a VM. CPAN is the language."

C-level dependencies can be annoying. App::FatPacker et. al. make small, pure
perl dependencies as close to free as they're going to get.

You're entirely welcome to disagree, but "I think the majority would agree"
comes into the unfounded assertion category - and leads people to avoid
dependencies "just becase", thereby resulting in CPAN soup where you have
three modules doing very similar things in a particular piece of code that
all behave -slightly- differently, at which point DW(anybody)M goes out the
window because the 'what' that it does changes between sections of the same
codebase.

Damian made a substantial effort to try and provide a 'one common way' for
a lot of things with Perl Best Practices and other works; quoting him while
working towards undoing some if this work seems a trifle unfair.

But ... it's still your module, hence my naming suggestions went in a
separate email to the 'grumpy old man' stuff above :)

-- 
Matt S Trout - Shadowcat Systems - Perl consulting with a commit bit and a clue

http://shadowcat.co.uk/blog/matt-s-trout/   http://twitter.com/shadowcat_mst/

Email me now on mst (at) shadowcat.co.uk and let's chat about how our Catalyst
commercial support, training and consultancy packages could help your team.
