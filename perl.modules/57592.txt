Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:57592
Return-Path: <Ron.Isaacson@morganstanley.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Delivered-To: moderator for modules@perl.org
Received: (qmail 6578 invoked from network); 6 Nov 2007 22:33:30 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 6 Nov 2007 22:33:30 -0000
Received: (qmail 520 invoked by uid 225); 6 Nov 2007 22:33:29 -0000
Delivered-To: modules@perl.org
Received: (qmail 508 invoked by alias); 6 Nov 2007 22:33:29 -0000
X-Spam-Status: No, hits=-6.6 required=8.0
	tests=BAYES_00,RCVD_IN_DNSWL_MED
X-Spam-Check-By: la.mx.develooper.com
Received: from hqmtabh4.ms.com (HELO hqmtabh4.ms.com) (205.228.12.104)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Tue, 06 Nov 2007 14:33:21 -0800
Received: from hqmtabh4 (localhost.ms.com [127.0.0.1])
	by hqmtabh4.ms.com (output Postfix) with ESMTP id 0F5C44803A
	for <modules@perl.org>; Tue,  6 Nov 2007 17:33:16 -0500 (EST)
Received: from ny37im01.ms.com (hqmail2.ms.com [144.14.31.40])
	by hqmtabh4.ms.com (internal Postfix) with ESMTP id EA09D91401B
	for <modules@perl.org>; Tue,  6 Nov 2007 17:33:15 -0500 (EST)
Received: from RONISAACXP2.morganstanley.com (dynamic-144-203-211-54 [144.203.211.54])
	by ny37im01.ms.com (Sendmail MTA Hub) with ESMTP id lA6MXFr27974
	for <modules@perl.org>; Tue, 6 Nov 2007 17:33:15 -0500 (EST)
Date: Tue, 06 Nov 2007 17:33:15 -0500
Message-ID: <mytrrolw.wl_Ron.Isaacson@morganstanley.com>
To: modules@perl.org
Subject: New module for timezone conversion
User-Agent: Wanderlust/2.12.2 (99 Luftballons) XEmacs/21.4 (Jumbo Shrimp)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
X-Anti-Virus: Kaspersky Anti-Virus for MailServers 5.5.15/RELEASE, bases: 06112007 #424611, status: clean
Approved: news@nntp.perl.org
From: Ron.Isaacson@morganstanley.com (Ron Isaacson)

Hello --

I'm starting work on a new module to do timezone conversion, and would
like your advice on naming.

I know, I know -- your first question, of course, would be "why do we
need another timezone-related module"? In our environment, we
frequently need to convert a specific time. For example, 2007/11/06
11:00am America/New_York is what time in Europe/London?

Existing libraries that deal with timezones, including Time::Zone,
Date::Manip, and DateTime::TimeZone, generally suffer from one or more
of these problems:

  - Based on hardcoded timezone data. This can be incomplete or
    ambiguous. For example, Date::Manip always treats "CST" as USA
    Central Standard Time (-0600), but this is only one of four things
    it could really be. Locality strings (like "Asia/Shanghai") are
    much more stable, but not widely supported.

  - Based on static snapshots of timezone data. This presents quite a
    maintenance challenge. DateTime::TimeZone needs to be rebuilt to
    reflect changes in the underlying Olson database, and that's not
    practical in an enterprise environment.

  - Describes abstract timezones, not actual times (not DST-aware). If
    you're in NY, and ask Date::Manip's Date_ConvTZ to convert from
    UTC to local, the answer you get will be based on the timezone in
    effect when you ASK, not based on the time you're converting. (In
    other words, if New York is currently observing EDT, and you use
    Date_ConvTZ to convert to "local", the answer you get will be EDT,
    even if New York will be observing EST when the time in question
    occurs.)

I've consulted with a colleague here who happens to be something of an
expert on the subject, and he tells me that in all his years, he's
found only one method of reliably converting a time from one locality
to another: let libc do it for you. The idiom is of the form:

  $ENV{TZ} = $src_tz; POSIX::tzset();
  $tmp = str2time ($in);

  $ENV{TZ} = $dst_tz; POSIX::tzset();
  $out = time2str ($fmt, $tmp);

This has the benefit of using the locally-installed zoneinfo database
directly, meaning it requires no (additional) maintenance, and
supports all of the same timezone strings as everything else running
on your system. When DST rules change, as they have a habit of doing,
you simply update /usr/share/[lib/]zoneinfo and everything Just Works.

Two downsides: it doesn't work on Windows (or any other system where
libc provides limited timezone support), and the use of $ENV{TZ} makes
it potentially not thread-safe.

Without getting into the details of how those problems would be
addressed, I'm going to propose an API:

  my $conv = Timezone::Converter::new();
  my $out  = $conv->convert
    (
     time   => $in,      # epoch secs, or anything groked by Date::Parse
     from   => $src_tz,  # defaults to local / ignored for epoch secs
     to     => $dst_tz,  # for output representation
     format => $fmt,     # any token string supported by strftime
    );

Name suggestions and other comments are welcome. Thank you!

--
Ron Isaacson
Morgan Stanley
ron.isaacson@morganstanley.com / (212) 276-1144
