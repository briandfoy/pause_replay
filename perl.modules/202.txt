Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:202
Return-Path: <mike808@mo.net>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 13490 invoked from network); 23 Oct 1999 15:59:24 -0000
Received: from mail.mvp.net (209.96.20.11)
  by tmtowtdi.perl.org with SMTP; 23 Oct 1999 15:59:24 -0000
Received: from mo.net (DialIP2-158.mvp.net [209.96.12.158])
	by mail.mvp.net (8.9.0/8.9.0) with ESMTP id LAA08986;
	Sat, 23 Oct 1999 11:04:08 -0500 (CDT)
Message-ID: <3811DA8B.378C805E@mo.net>
Date: Sat, 23 Oct 1999 10:55:55 -0500
X-Mailer: Mozilla 4.7 [en] (WinNT; I)
X-Accept-Language: en
MIME-Version: 1.0
To: modules@perl.org,
        Perl-XML Mailing List <perl-xml@listserv.activestate.com>
Subject: Namespace request: XML::XSL
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Approved: news@nntp.perl.org
From: mike808@mo.net (Michael King)

I am almost ready (about 75%, or within two weeks) to release a 100% Perl 
port of an XSL transform engine for Perl.

This is the server-side piece that takes an XML document and applies
an XSL stylesheet to it, typically producing a plain HTML document.
It could be used to produce plain text, PDFs, RTF, etc. depending
on the stylesheet.

I felt it was problematic for Perl solutions to be slinging all this
XML between servlets and external systems, yet Java seems to be the
only place where the final step in the processing must happen for those
non-XML aware browsers (lynx, opera, Netscape - i.e. everything except
MSIE4+)
to actually *use* XML all the way to the desktop.

In order to allow Perl to participate in this arena, and since this is
a typical "glue" application, and we're slinging text, it just seemed
unusual that there was no solution available yet.

So I set out to write one. As a bonus, an external scripting engine
(xsl:script tag) in the XSL stylesheet processor can use Perl. :)

I haven't worked out the details for JavaScript support, but, I can
gladly leave that for someone else to add later.

I'd like to formally request the "XML::XSL" namespace for this module.
It will require the XML::DOM module (duh!).

I would think later JavaScript support (xsl:script) could be something 
like "XML::XSL::JavaScript" if that is needed.

This processor will implement the current XSLT specification from the W3C
located at http://www.w3.org/TR/1999/WD-xslt-19990421.html

Whew! It's been a fun project, and I'm anxious to get it out the door.
If you'd like to test it out or help out, send me an email.

The first version will work. The revision will concentrate on speed
optimization, and taking more advantage of perl-specific strengths
applied to the task at hand.

Comments?

Michael King
Perl Infrastructure Specialist
mike808@mo.net
