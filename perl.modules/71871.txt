Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:71871
Return-Path: <tchrist@perl.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Delivered-To: moderator for modules@perl.org
Received: (qmail 13436 invoked from network); 9 Jul 2010 15:58:30 -0000
Received: from x1.develooper.com (207.171.7.70)
  by x6.develooper.com with SMTP; 9 Jul 2010 15:58:30 -0000
Received: (qmail 4769 invoked by uid 225); 9 Jul 2010 15:58:30 -0000
Delivered-To: modules@perl.org
Received: (qmail 4764 invoked by alias); 9 Jul 2010 15:58:29 -0000
X-Spam-Status: No, hits=-0.0 required=8.0
	tests=T_RP_MATCHES_RCVD
X-Spam-Check-By: la.mx.develooper.com
Received: from mail.perl.com (HELO chthon.perl.com) (199.45.135.9)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Fri, 09 Jul 2010 08:58:28 -0700
Received: from chthon (tchrist@localhost [127.0.0.1])
	by chthon.perl.com (8.14.3/8.13.3) with ESMTP id o69FvPvT014646;
	Fri, 9 Jul 2010 09:57:29 -0600 (MDT)
To: Perl Module Namespace Tsars <modules@perl.org>
Cc: Larry Wall <larry@wall.org>, Damian Conway <damian@conway.org>,
        Nathan Torkington <nathan@torkington.com>,
        Allison Randal <allison@oreilly.com>,
        Johan Vromans <jvromans@squirrel.nl>, Graham Barr <gbarr@pobox.com>,
        Abigail <abigail@abigail.be>, Lincoln Stein <lincoln.stein@gmail.com>,
        Tim Bunce <Tim.Bunce@pobox.com>, Michael Schwern <schwern@pobox.com>,
        Gisle Aas <gisle@ActiveState.com>, Mark Jason Dominus <mjd@plover.com>,
        Andy Wardley <abw@wardley.org>, Brian Ingerson <INGY@cpan.org>
Subject: Seeking the mother of all pass-by-named-parameter modules
Mime-Version: 1.0
Content-Transfer-Encoding: 8bit
Content-Type: text/plain; charset=ISO-8859-1
Date: Fri, 09 Jul 2010 09:57:25 -0600
Message-ID: <16197.1278691045@chthon>
Approved: news@nntp.perl.org
From: tchrist@perl.com (Tom Christiansen)

Reply-to:   Whomever you please, including nobody--just please include me. :)
Forward-to: Wherever seems appropriate

  [ *Do* please forgive the intrusion in your holiday-time.  Ignore
    this altogether if nothing comes to mind, or if you have better things
    to do, or if--well, whatever.  Honest. ]

O Great Module Cabal!

You have all written code that does some, even most, of what I'm looking
for, but I can't see where any of these mighty efforts have produced a CPAN
module encapsulating your work.  I hope I'm just going blind, and it's there.

I'm looking for something akin to Getopt::Long for dealing with subroutines
using pass-by-named-parameters.

And yes, I *do* know how to do this the obvious and quick-and-dirty way:

    http://docstore.mik.ua/orelly/perl/cookbook/ch10_08.htm

But I'd like something with rather more rigour than *that* fruit-borscht
approach provides, if you take my meaning.  My top-ten wish-list includes:

   1.  Standard per-function defaults easily specified
   2.  Mandatory checks for unwanted parameters
   3.  Autogeneration of a proper usage string
   4.  Optional type-checking, either of the [$@%&*] sort or user-definable
   5.  Optional aliasing
   6.  Optional abbreviability
   7.  Optional case-ignorance, *but* see next
   8.  Isn't it ((long) past) time we consider NFD, even NFKD, equivalence?
   9.  Possible latitude/lassitude on the silly /^\p{Pd}{1,2}(?=\P{Pd})/ stuff
  10.  Possible latitude/lassitude on \p{Pd} vs \p{Pc} (unsure on this
       one, as I rather like Damian's arguments WRT the matter)

This seems like a pretty basic tool required for building robust code from
the point of view of good-and-paranoid software engineering.  But a glance
through CPAN turned up nothing notable nor recent.  Did I just miss it?  Is
there some more "standard" and commonly used module I'm ignorant of?

Surely there must be!

Notions?  Shall I just steal one of yours?  *Whose*?

Getopt::Long does share features I'd like in my hypothetical, fancy
pass-by-named-parameter module, but perhaps not all of them.  But it's
more tuned to @ARGV than to @_, or at least, I think it is.

--tom

  PS: *Please* don't yell at me if the answer is staring me in the face.

 PPS:  I know, I know: it's *my* itch, so I should scratch it.  But I 
       thought I'd best check for existing wheels before crafting mine own.

PPPS:  Here are all \p{Pd} code points:

        002D  HYPHEN-MINUS
        058A  ARMENIAN HYPHEN
        05BE  HEBREW PUNCTUATION MAQAF
        1400  CANADIAN SYLLABICS HYPHEN
        1806  MONGOLIAN TODO SOFT HYPHEN
        2010  HYPHEN
        2011  NON-BREAKING HYPHEN
        2012  FIGURE DASH
        2013  EN DASH
        2014  EM DASH
        2015  HORIZONTAL BAR
        2E17  DOUBLE OBLIQUE HYPHEN
        2E1A  HYPHEN WITH DIAERESIS
        301C  WAVE DASH
        3030  WAVY DASH
        30A0  KATAKANA-HIRAGANA DOUBLE HYPHEN
        FE31  PRESENTATION FORM FOR VERTICAL EM DASH
        FE32  PRESENTATION FORM FOR VERTICAL EN DASH
        FE58  SMALL EM DASH
        FE63  SMALL HYPHEN-MINUS
        FF0D  FULLWIDTH HYPHEN-MINUS

       Whereas here are all \p{Pc} code points:

        005F  LOW LINE
        203F  UNDERTIE
        2040  CHARACTER TIE
        2054  INVERTED UNDERTIE
        FE33  PRESENTATION FORM FOR VERTICAL LOW LINE
        FE34  PRESENTATION FORM FOR VERTICAL WAVY LOW LINE
        FE4D  DASHED LOW LINE
        FE4E  CENTRELINE LOW LINE
        FE4F  WAVY LOW LINE
        FF3F  FULLWIDTH LOW LINE
