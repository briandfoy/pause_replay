Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:59787
Return-Path: <webmaster@simplemood.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 6607 invoked from network); 28 Mar 2008 18:11:45 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by x6.develooper.com with SMTP; 28 Mar 2008 18:11:45 -0000
Received: (qmail 19482 invoked by uid 225); 28 Mar 2008 18:11:44 -0000
Delivered-To: modules@perl.org
Delivered-To: modules@cpan.org
Received: (qmail 19474 invoked by alias); 28 Mar 2008 18:11:44 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,HTML_MESSAGE
X-Spam-Check-By: la.mx.develooper.com
Received: from la.mx.develooper.com (HELO x1.develooper.com) (63.251.223.176)
    by la.mx.develooper.com (qpsmtpd/0.28) with SMTP; Fri, 28 Mar 2008 11:11:39 -0700
Received: (qmail 19432 invoked from network); 28 Mar 2008 18:11:35 -0000
Received: from x16.dev (10.0.100.26)
  by x1.dev with QMQP; 28 Mar 2008 18:11:35 -0000
X-Spam-Level: *
Received: from smtp112.sbc.mail.mud.yahoo.com (HELO smtp112.sbc.mail.mud.yahoo.com) (68.142.198.211)
    by 16.mx.develooper.com (qpsmtpd/0.43rc1) with SMTP; Fri, 28 Mar 2008 11:11:30 -0700
Received: (qmail 40519 invoked from network); 28 Mar 2008 18:11:19 -0000
Received: from unknown (HELO ?10.0.1.2?) (drmuey@att.net@70.140.36.232 with plain)
  by smtp112.sbc.mail.mud.yahoo.com with SMTP; 28 Mar 2008 18:11:19 -0000
X-Yahoo-Newman-Property: ymail-3
Message-ID: <472D2669-C317-44FA-97B3-E90491896E4F@simplemood.com>
To: modules@cpan.org
In-Reply-To: <621BA58C-AFAE-4537-892B-52615AF96E53@simplemood.com>
Content-Type: multipart/alternative; boundary=Apple-Mail-2-787407206
Mime-Version: 1.0 (Apple Message framework v919.2)
Subject: Re: "Almost" ::Tiny name space inquiry
Date: Fri, 28 Mar 2008 13:11:13 -0500
References: <621BA58C-AFAE-4537-892B-52615AF96E53@simplemood.com>
X-Mailer: Apple Mail (2.919.2)
X-Virus-Checked: Checked by ClamAV on 16.mx.develooper.com
X-Virus-Checked: Checked
X-Old-Spam-Check-By: 16.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,HTML_MESSAGE
Approved: news@nntp.perl.org
From: webmaster@simplemood.com (Dan Muey)

--Apple-Mail-2-787407206
Content-Type: text/plain;
	charset=US-ASCII;
	format=flowed;
	delsp=yes
Content-Transfer-Encoding: 7bit

Or how about:

9) XS is only allowed if the larger module is XS

?

On Mar 27, 2008, at 10:08 PM, Dan Muey wrote:

> Howdy all,
>
> I hate to bother but I can;t seem to find the answer to this and/or  
> want to do this properly:
>
> As far aI understand '::Tiny' modules:
>
> The rules for the Tiny suffix are as follows.
>
> 1. The module should be implemented in "as little code as possible"
> 2. The module should implement a useful subset of functionality
> 3. The module should use at least 1/10th the amount of memory  
> overhead, ideally less than 100k
> 4. The module MUST have no non-core dependencies
> 5. The module MUST be only one single .pm file
> 6. The module should be back-compatible to at least 5.004
> 7. The module should omit functionality rather than implement it  
> incorrectly.
> 8. If applicable, the module should be compatible with the larger  
> module.
> I've got a module that fits all of that except one: its XS
> And as I interpret it, #5 implicitly means no XS. Am I correct in  
> that?
> Assuming yes, then, my real question is this:
> If I have XYZ::Tiny, but I want XS what should it be called?  
> XYZ::TinyXS,  XYZ::Tiny::XS, XYZ::Subset, XZY::MostlyTiny,  
> XYZ::Micro,  etc
> Any suggestions are appreciated!
> Perhaps, a rule number 9:
> 9. If it's 1-8 except #5 is violated by it being XS you must use  
> Tiny::XS (or whatever the powers that be say it shoudl be at the end  
> of this thread)
> thanks!
> --
> Dan Muey


--Apple-Mail-2-787407206
Content-Type: text/html;
	charset=US-ASCII
Content-Transfer-Encoding: quoted-printable

<html><body style=3D"word-wrap: break-word; -webkit-nbsp-mode: space; =
-webkit-line-break: after-white-space; ">Or how about:<div><br =
class=3D"webkit-block-placeholder"></div><div>9) XS is only allowed if =
the larger module is XS</div><div><br =
class=3D"webkit-block-placeholder"></div><div>?</div><div><br><div><div>On=
 Mar 27, 2008, at 10:08 PM, Dan Muey wrote:</div><br =
class=3D"Apple-interchange-newline"><blockquote type=3D"cite"><div =
style=3D"word-wrap: break-word; -webkit-nbsp-mode: space; =
-webkit-line-break: after-white-space; ">Howdy all,<div><br =
class=3D"webkit-block-placeholder"></div><div>I hate to bother but I =
can;t seem to find the answer to this and/or want to do this =
properly:</div><div><br class=3D"webkit-block-placeholder"></div><div>As =
far aI understand '::Tiny' modules:</div><div><br =
class=3D"webkit-block-placeholder"></div><div><span =
class=3D"Apple-style-span" style=3D"font-family: Verdana; font-size: =
14px; "><pre>The rules for the Tiny suffix are as follows.

1. The module should be implemented in "as little code as possible"
2. The module should implement a useful subset of functionality
3. The module should use at least 1/10th the amount of memory overhead, =
ideally less than 100k
4. The module MUST have no non-core dependencies
5. The module MUST be only one single .pm file
6. The module should be back-compatible to at least 5.004
7. The module should omit functionality rather than implement it =
incorrectly.
8. If applicable, the module should be compatible with the larger =
module.</pre><pre><font class=3D"Apple-style-span" face=3D"Helvetica" =
size=3D"3"><span class=3D"Apple-style-span" style=3D"font-size: 12px; =
white-space: normal;">I've got a module that fits all of that except =
one: its XS</span></font></pre><pre><font class=3D"Apple-style-span" =
face=3D"Helvetica" size=3D"3"><span class=3D"Apple-style-span" =
style=3D"font-size: 12px; white-space: normal;">And as I interpret it, =
#5 implicitly means no XS. Am I correct in =
that?</span></font></pre><pre><font class=3D"Apple-style-span" =
face=3D"Helvetica" size=3D"3"><span class=3D"Apple-style-span" =
style=3D"font-size: 12px; white-space: normal;">Assuming yes, then, my =
real question is this:</span></font></pre><pre><font =
class=3D"Apple-style-span" face=3D"Helvetica" size=3D"3"><span =
class=3D"Apple-style-span" style=3D"font-size: 12px; white-space: =
normal;">If I have XYZ::Tiny, but I want XS what should it be called? =
XYZ::TinyXS, &nbsp;XYZ::Tiny::XS, XYZ::Subset, XZY::MostlyTiny, =
XYZ::Micro, &nbsp;etc&nbsp;</span></font></pre><pre><font =
class=3D"Apple-style-span" face=3D"Helvetica" size=3D"3"><span =
class=3D"Apple-style-span" style=3D"font-size: 12px; white-space: =
normal;">Any suggestions are appreciated!</span></font></pre><pre><font =
class=3D"Apple-style-span" face=3D"Helvetica" size=3D"3"><span =
class=3D"Apple-style-span" style=3D"font-size: 12px; white-space: =
normal;">Perhaps, a rule number 9:</span></font></pre><pre><font =
class=3D"Apple-style-span" face=3D"Helvetica" size=3D"3"><span =
class=3D"Apple-style-span" style=3D"font-size: 12px; white-space: =
normal;">9. If it's 1-8 except #5 is violated by it being XS you must =
use Tiny::XS (or whatever the powers that be say it shoudl be at the end =
of this thread)&nbsp;</span></font></pre><pre><font =
class=3D"Apple-style-span" face=3D"Helvetica" size=3D"3"><span =
class=3D"Apple-style-span" style=3D"font-size: 12px; white-space: =
normal;">thanks!</span></font></pre><pre><font class=3D"Apple-style-span" =
face=3D"Helvetica" size=3D"3"><span class=3D"Apple-style-span" =
style=3D"font-size: 12px; white-space: =
normal;">--</span></font></pre><pre><font class=3D"Apple-style-span" =
face=3D"Helvetica" size=3D"3"><span class=3D"Apple-style-span" =
style=3D"font-size: 12px; white-space: normal;">Dan =
Muey</span></font></pre></span></div></div></blockquote></div><br></div></=
body></html>=

--Apple-Mail-2-787407206--
