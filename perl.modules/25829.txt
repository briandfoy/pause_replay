Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:25829
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 85984 invoked by uid 76); 21 Jan 2004 01:18:42 -0000
Received: from qmailr@one.develooper.com (HELO ran-out.mx.develooper.com) (64.81.84.115) by onion.perl.org (qpsmtpd/0.26) with SMTP; Tue, 20 Jan 2004 17:18:42 -0800
Received: (qmail 11384 invoked by uid 225); 21 Jan 2004 01:18:41 -0000
Delivered-To: modules@perl.org
Received: (qmail 11377 invoked by uid 507); 21 Jan 2004 01:18:41 -0000
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110) by one.develooper.com (qpsmtpd/0.27-dev) with ESMTP; Tue, 20 Jan 2004 17:18:10 -0800
Received: from pause.perl.org (localhost [127.0.0.1])	by pause.perl.org (8.12.3/8.12.3/Debian-6.6) with ESMTP id i0L1Hmcj023900;	Wed, 21 Jan 2004 02:17:48 +0100
Received: (from nobody@localhost)	by pause.perl.org (8.12.3/8.12.3/Debian-6.6) id i0L1HmPE023898;	Wed, 21 Jan 2004 02:17:48 +0100
Date: Wed, 21 Jan 2004 02:17:48 +0100
Message-ID: <200401210117.i0L1HmPE023898@pause.perl.org>
Subject: Module submission Locale::KeyedText
Reply-To: modules@perl.org
To: modules@perl.org, duncand@cpan.org
X-Spam-Check-By: one.develooper.com
X-Spam-Status: No, hits=1.1 required=7.0 tests=CARRIAGE_RETURNS,SPAM_PHRASE_00_01 version=2.44
X-SMTPD: qpsmtpd/0.26, http://develooper.com/code/qpsmtpd/
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Locale::KeyedText
  DSLIP:       bdpOl
  description: Refer to user messages in programs by keys
  userid:      DUNCAND (Darren Duncan)
  chapterid:   13 (Internationalization_Locale)
  communities:
    modules@perl.org

  similar:
    Locale::Maketext, Locale::gettext, Locale::PGetText, DBIx::BabelKit

  rationale:

    I have already uploaded this module, fully tested and documented,
    on CPAN; that should say what it does and how it works.

    A short answer for ways my module is distinct:

    1. My module is quite simple and currently pure perl; the code is
    only 5K in size (any other weight is the documentation or tests) and
    has no external dependencies. It knows nothing about word/phrase
    plurality. 2. All message keys in the lexicon are not meant to be
    human readable, so if you ever want to change what the user sees,
    you don't have to change copies in the code too. 3. All variables in
    lexicon messages are named rather than positional; this means that
    the code doesn't have to make separate calls for each language when
    the same variables appear in different orders. 4. My module can
    handle lexicons based on criteria other than user language; for
    example, developing user vs end user (eg: the code can spit out many
    variable values with useful info; the first user type would show
    them all, the other would show less; the code doesn't have to know).
    5. Multiple lexicons can be combined from different sources, and one
    (eg, with a main program) can override parts of another (eg, a
    library the program uses). 6. There are other differences.

    A slightly longer or different answer:

    One of the main distinctions of my module over similar modules is
    that text is always looked up by a key which is not meant to be
    meaningful for a user. Whereas, with the other modules like
    "gettext" it looks like you are supposed to pass in english text and
    they translate it, which could produce ambiguous results or
    associations. Or alternately, the other modules require your text
    data to be stored in a format other than Perl files. Or alternately
    they have a compiled C component or otherwise have external
    dependencies; Locale::KeyedText has no external dependencies (it is
    very simple). There are other differences. Where other solutions
    take variables, they seem to be positional (like with 'sprintf');
    whereas, Locale::KeyedText has named variables, which can be used in
    any order, or not used at all, or used multiple times.
    Locale::KeyedText is generally a simpler solution than alternatives,
    and doesn't know about language specific details like encodings or
    plurality.

  enteredby:   DUNCAND (Darren Duncan)
  enteredon:   Wed Jan 21 01:17:47 2004 GMT

The resulting entry would be:

Locale::
::KeyedText       bdpOl Refer to user messages in programs by keys   DUNCAND


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=85500000_981214e3d43690e8&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=85500000_981214e3d43690e8&SUBMIT_pause99_add_mod_insertit=1
