Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:51856
Return-Path: <kenneth@olwing.se>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Delivered-To: moderator for modules@perl.org
Received: (qmail 13336 invoked from network); 20 Nov 2006 16:07:18 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 20 Nov 2006 16:07:18 -0000
Received: (qmail 26319 invoked by uid 225); 20 Nov 2006 16:07:17 -0000
Delivered-To: modules@perl.org
Delivered-To: modules@cpan.org
Received: (qmail 26308 invoked by alias); 20 Nov 2006 16:07:17 -0000
X-Spam-Status: No, hits=0.2 required=8.0
	tests=BAYES_40,HTML_30_40,HTML_MESSAGE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of kenneth@olwing.se designates 192.71.58.59 as permitted sender)
Received: from hotelroom3.mainloop.net (HELO hotelroom3.mainloop.net) (192.71.58.59)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Mon, 20 Nov 2006 08:07:11 -0800
Received: (qmail 15328 invoked from network); 19 Nov 2006 19:19:40 +0100
Received: from 2-17.bredband.transit.se (HELO ken1lap) (82.214.2.17)
  by www-hotelroom3.mainloop.net with SMTP; 19 Nov 2006 19:19:40 +0100
Message-ID: <002c01c70c07$46d5ce70$8119fea9@ken1lap>
To: <modules@cpan.org>
Subject: Suggestions for naming please?
Date: Sun, 19 Nov 2006 19:19:38 +0100
MIME-Version: 1.0
Content-Type: multipart/alternative;
	boundary="----=_NextPart_000_0029_01C70C0F.A81E4FB0"
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 6.00.2900.2869
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2962
X-Virus-Checked: Checked
Approved: news@nntp.perl.org
From: kenneth@olwing.se (=?iso-8859-1?Q?Kenneth_=D6lwing?=)

------=_NextPart_000_0029_01C70C0F.A81E4FB0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

Hi,

As an excuse for trying the 'classes' module (by RMUHLE), and also as =
something to use in a larger effort later, I created a Perl =
implementation of a 'progress monitor' based on the same concept found =
in the Eclipse (Java) framework. See =
http://www.eclipse.org/articles/Article-Progress-Monitors/article.html =
for some information on usage of this in Eclipse.

In short, an interface is defined with generic methods to start, 'make =
progress' and end etc. This is not so revolutionary, and other Perl =
impls around the concept of a 'progress bar' exist. However, the ideas =
behind the ProgressMonitor concept goes further - the intent is that a =
framework can and should use the interface 'everywhere' action is going =
on that the user could benefit from seeing progress on. The medium for =
presenting the progress can be very different though; in Eclipse, there =
are impls for both cmdline and various GUI progress reports. A key =
concept is also that of using a 'SubProgressMonitor' to correctly farm =
out some of a tasks allotted work to a subtask, and still have a correct =
report due to automatic scaling of the progress 'ticks'.

In my implementation, I also use the concept of an interface that =
theoretically can be implemented in a Tk environment just as well as in =
a cmdline environment.

I provide impls for writing to a stream (e.g. STDOUT), or as callbacks =
for any code to do whatever they like with the result. The formatting of =
the progress is also interface based, and I have impls for a plain =
spinner, counter, percentage, bar, ETA etc, all of which can be wired =
together in any configuration to create a string. Very flexible and =
configurable. Also, a subtask wrapper is there.

I'm having trouble coming up with a good naming that will work on =
CPAN...currently it's called plainly 'ProgressReporting::*'. It doesn't =
quite fit in into namespaces such as Term:: (as it's not limited to =
that). I think it is basically a miscellaneous util, perhaps living in =
'UI::' land (as the intent is ultimately to help provide a user =
interface of some sort). Perhaps 'UI::Feedback::*'...??? Or maybe just =
'Misc::ProgressMonitor::*' or similar is ok?

Any suggestions?

TIA,

ken1
------=_NextPart_000_0029_01C70C0F.A81E4FB0
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Diso-8859-1">
<META content=3D"MSHTML 6.00.5730.11" name=3DGENERATOR>
<STYLE></STYLE>
</HEAD>
<BODY bgColor=3D#ffffff>
<DIV><FONT face=3DArial size=3D2>Hi,</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>As an excuse for trying the 'classes' =
module (by=20
RMUHLE), and also as something to use in a larger effort later, I =
created a=20
Perl&nbsp;implementation of a 'progress monitor' based on the same =
concept found=20
in the Eclipse (Java) framework. See <A=20
href=3D"http://www.eclipse.org/articles/Article-Progress-Monitors/article=
.html">http://www.eclipse.org/articles/Article-Progress-Monitors/article.=
html</A>&nbsp;for=20
some information on usage of this in Eclipse.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>In short, an interface is defined with =
generic=20
methods to start, 'make progress' and end etc. This is not so =
revolutionary, and=20
other Perl impls&nbsp;around the concept of a 'progress bar' exist. =
However, the=20
ideas behind the ProgressMonitor concept goes further - the intent is =
that a=20
framework can and should use the interface 'everywhere' action is going =
on that=20
the user could benefit from seeing progress on. The medium for =
presenting the=20
progress can be very different though; in Eclipse, there are impls for =
both=20
cmdline and various GUI progress reports. A key concept is also that of =
using a=20
'SubProgressMonitor' to correctly farm out some of a tasks allotted work =
to a=20
subtask, and still have a correct report due to automatic scaling of the =

progress 'ticks'.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>In my implementation, I also use the =
concept of an=20
interface that theoretically can be implemented in a Tk environment just =
as well=20
as in a cmdline environment.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>I provide impls for writing to a stream =
(e.g.=20
STDOUT), or as callbacks for any code to do whatever they like with the =
result.=20
The formatting of the progress is also interface based, and I have impls =
for a=20
plain spinner, counter, percentage, bar, ETA etc, all of which can be =
wired=20
together in any configuration to create a string. Very flexible and=20
configurable. Also, a subtask wrapper is there.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>I'm having trouble coming up with a =
good naming=20
that will work on CPAN...currently it's called plainly =
'ProgressReporting::*'.=20
It doesn't quite fit in into namespaces such as Term:: (as it's not =
limited to=20
that). I think it is basically a miscellaneous util, perhaps living in =
'UI::'=20
land (as the intent is ultimately to help provide a user interface of =
some=20
sort). Perhaps 'UI::Feedback::*'</FONT><FONT face=3DArial =
size=3D2>...??? Or maybe=20
just 'Misc::ProgressMonitor::*' or similar is ok?</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>Any suggestions?</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>TIA,</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>ken1</FONT></DIV></BODY></HTML>

------=_NextPart_000_0029_01C70C0F.A81E4FB0--

