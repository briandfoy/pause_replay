Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:59620
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 9330 invoked from network); 18 Mar 2008 20:48:06 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by x6.develooper.com with SMTP; 18 Mar 2008 20:48:06 -0000
Received: (qmail 31270 invoked by uid 225); 18 Mar 2008 20:48:06 -0000
Delivered-To: modules@perl.org
Received: (qmail 31266 invoked by alias); 18 Mar 2008 20:48:05 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Tue, 18 Mar 2008 13:48:03 -0700
Received: from pause.perl.org (localhost.localdomain [127.0.0.1])
	by pause.perl.org (8.13.4/8.13.4/Debian-3sarge3) with ESMTP id m2IKlvf4024807
	for <modules@perl.org>; Tue, 18 Mar 2008 21:47:57 +0100
Received: (from nobody@localhost)
	by pause.perl.org (8.13.4/8.13.4/Submit) id m2IKlvTU024806;
	Tue, 18 Mar 2008 21:47:57 +0100
Date: Tue, 18 Mar 2008 21:47:57 +0100
Message-ID: <200803182047.m2IKlvTU024806@pause.perl.org>
Subject: Module submission Sub::Lambda
Reply-To: modules@perl.org
To: modules@perl.org
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Sub::Lambda
  DSLIP:       adpfp
  description: Syntactic sugar for lambdas in Perl
  userid:      TOYVO (Anton Tayanovskyy)
  chapterid:   3 (Development_Support)
  communities:
    comp.lang.perl.modules

  similar:
    Acme::Lambda Language::Functional

  rationale:

    To write lambdas in Perl one usually resorts to

    sub { my ($a1,$a2,$a3)=@_; body($a1,$a2,$a3) }

    The syntax is rather heavy, especially for nested lambdas.
    Consider:

    sub { my ($a) = @_; sub { my ($b) = @_; ($a+$b) }}

    Instead, I suggest a lightweight function fn that allows a sugared
    form, like this:

    fn a => fn b => q( $a+$b )

    Together with ap, for application, the syntax allows to express
    complex things, like the applicative-order Y combinator, easily:

    my $Y = fn m => ap( (fn f => ap m => fn a => ap qw(f f a)) => (fn f
    => ap m => fn a => ap qw(f f a)) );

    fn also pattern-matches on lists, for instance:

    *len = fn -x => q{ scalar(@x) };

    Many more examples are in the POD.

    The approach with fn is more powerful than Acme::Lambda, as it
    allows nesting. The performance penalty is minimized as fn is
    implemented through a single eval, and memoized, which means the
    eval happens only once.

    I hope this tiny module will be a helpful convenience for those who
    are used to functional programming.

    --Anton

  enteredby:   TOYVO (Anton Tayanovskyy)
  enteredon:   Tue Mar 18 20:47:55 2008 GMT

The resulting entry would be:

Sub::
::Lambda          adpfp Syntactic sugar for lambdas in Perl          TOYVO


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=6e310000_bd850b31c35b841e&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=6e310000_bd850b31c35b841e&SUBMIT_pause99_add_mod_insertit=1
