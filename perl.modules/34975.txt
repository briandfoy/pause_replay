Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:34975
Return-Path: <darren@DarrenDuncan.net>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 18837 invoked from network); 18 Sep 2004 00:18:41 -0000
Received: from x1.develooper.com (63.251.223.170)
  by lists.develooper.com with SMTP; 18 Sep 2004 00:18:41 -0000
Received: (qmail 1513 invoked by uid 225); 18 Sep 2004 00:18:41 -0000
Delivered-To: modules@perl.org
Received: (qmail 1508 invoked by alias); 18 Sep 2004 00:18:40 -0000
X-Spam-Status: No, hits=-4.8 required=8.0
	tests=BAYES_00,RCVD_IN_SORBS_DUL
X-Spam-Check-By: la.mx.develooper.com
Received: from palladium2.baremetal.com (HELO pd2.baremetal.com) (208.184.111.59)
  by la.mx.develooper.com (qpsmtpd/0.27.1) with ESMTP; Fri, 17 Sep 2004 17:18:38 -0700
Received: from [24.108.166.215] (S0106000393c33758.gv.shawcable.net [24.108.166.215])
	by pd2.baremetal.com (8.12.10/8.12.9) with ESMTP id i8I03dn7032694;
	Fri, 17 Sep 2004 17:03:41 -0700
Mime-Version: 1.0
Message-ID: <p05200f00bd7126dc4930@[24.108.166.215]>
In-Reply-To: <200409172308.i8HN8Bn6006119@pd2.baremetal.com>
References: <p05200f01bd70de9257cb@[24.108.166.215]>
 <170920041505305079%comdog@panix.com>
 <p05200f00bd70f7592651@[24.108.166.215]>
 <170920041700266783%comdog@panix.com>
 <p05200f00bd71150c1c41@[24.108.166.215]>
 <200409172308.i8HN8Bn6006119@pd2.baremetal.com>
Date: Fri, 17 Sep 2004 17:18:30 -0700
To: modules@perl.org, _brian_d_foy <comdog@panix.com>
Subject: something different (was Re: Module submission SQL::SyntaxModel)
Cc: darren@DarrenDuncan.net (Darren Duncan)
Content-Type: text/plain; charset="us-ascii" ; format="flowed"
X-Scanned-By: MIMEDefang 2.36
Approved: news@nntp.perl.org
From: darren@DarrenDuncan.net (Darren Duncan)

Okay, I've decided to retract my registration request, since it 
doesn't look like we're going to come to a solution today that we are 
both happy with.  And that should take the weight off of your 
shoulders.

This is my new plan:

1. Release another version or three of my module under its existing 
un-registered name; these will incorporate a few significant but 
evolutionary design changes, after which the apparent purpose or 
unique features of the module may seem different than before.  Some 
documentation updates would be included, to better explain what is 
going on.

2. I will do another round of public RFC discussion, on 
modules@perl.org plus several other topic-relevant lists, gathering 
input from multiple people about what would be a good module name. 
Perhaps the shift in the module's functionality over the last 12 
months would indeed warrant a different name.

3. After I have a majority of respondants agreeing, and my liking the 
choice, I will resubmit a formal registration request.

The whole plan may take only a few weeks, and I welcome you, Brian, 
to take part in the RFC.

To give you an idea where things are going, I am going to see if I 
can use the word "Schema" in the module name instead of "Syntax". 
For example, "SQL::SchemaModel" is something I may be happy with.  It 
rolls off the tongue roughly the same, and I can continue to use the 
"SSM" abbreviation everywhere.

Moreover, while I avoided "Schema" before because it seemed too 
limiting (the module's for what's in schemas plus what isn't in 
them), I realize that it may become appropriate, because my module 
evolution is shifting things so that everything is inside a schema; 
if not in a database catalog, then the collection of SQL stored on 
the application/client side I am coming to call app-side schemas as 
well, due to the way I am conceptually wrapping it in SQL routines.

One problem is that there is a pre-existing module called 
"SQL::Schema" which hasn't been updated in over 4 years (Apr 25, 
2000) and people may get confused from the similar-starting names 
(and a worse problem would exist if I used "SQL::Schema::Model"). 
This module is very different from mine as it appears to store raw 
SQL kind of like SQL::Snippit and it has a different Perl module for 
each schema object type or component thereof.

Moreover, DBIx::DBSchema would also sound too similar.

Do you see those similarities as being a problem?

At 6:23 PM -0500 9/17/04, _brian_d_foy wrote:
>I don't understand what you mean by that.  It sounds less
>descriptive to me because it is more general.
>
>Ah, your documentation, along with the description of the
>module, talk about trees quite a bit.

I talk about trees a lot because that is an attempt to simplify what 
is really happening in order for people to better understand how to 
use the module.  Moreover, I use a tree as a convenient format for 
serializing the structure for debugging purposes; it is the best way 
I see for a human to tell at a glance what is in their models.  The 
structure is more of a graph, actually, which is how the full 
normalization (no duplication of details) is accomplished.

-- Darren Duncan

P.S. Has there been any precedent for un-registering existing modules 
that were previously approved and later regretted?
