Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:10338
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 52132 invoked by uid 76); 25 Feb 2002 17:02:02 -0000
Received: from root@dubravka.kbx.de (HELO pause.perl.org) (212.40.160.59)
  by onion.perl.org (qpsmtpd/0.06) with SMTP; Mon Feb 25 17:02:02 2002 -0000
Received: (from nobody@localhost)
	by pause.perl.org (8.9.3/8.9.3) id SAA08529;
	Mon, 25 Feb 2002 18:01:59 +0100
Date: Mon, 25 Feb 2002 18:01:59 +0100
Message-ID: <200202251701.SAA08529@pause.perl.org>
Reply-To: modules@perl.org
Subject: Module submission Sub::Usage
To: modules@perl.org, hasant@cpan.org
Approved: news@nntp.perl.org
From: upload@p11.speed-link.de ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Sub::Usage
  DSLIP:       bdpfp
  description: Issue subroutine/module usage
  userid:      HASANT (Hasanuddin Tamir)
  chapterid:    3 (Development_Support)
  communities:
    comp.lang.perl.modules

  similar:

  rationale:

    Sub::Usage supercedes my previous submission on registering
    Usage::Sub. They're still the same module, though. Matthew Sachs in
    clpmodules pointed me to the Sub root namespace and suggested to
    rename the module, so here is, Sub::Usage.

    Sub::Usage is a subroutine utility. I've seen a lot of people
    checking the subroutine arguments and terminate the subroutine if
    it's called with inappropriate parameters. For example,

    # takes two required and one optional args sub func { @_ >= 2 or
    die "usage: func(ONE, TWO [, THREE])\n"; # process goes on }

    This module provides functions to help printing the usage without
    having to remember or typing the function name. The usage() function
    will confess; warn_hard() and warn_soft() cluck then return undef.
    Well, warn_soft() will check for the value fo $^W first. Examples,

    usage Sub::Usage ':all';

    # takes two required and one optional parameters sub turn_on { @_
    >= 2 or usage 'NAME, COLOR [, INTENSITY]'; # process goes on }

    The error message usage() will produce is something like,

    usage: turn_on(NAME, COLOR [, INTENSITY]);

  enteredby:   HASANT (Hasanuddin Tamir)
  enteredon:   Mon Feb 25 17:01:58 2002 GMT

The resulting entry would be:

Sub::
::Usage           bdpfp Issue subroutine/module usage                HASANT


Thanks for registering,
The Pause Team

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=2b000000_5c08e7007e63acb4&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=2b000000_5c08e7007e63acb4&SUBMIT_pause99_add_mod_insertit=1
