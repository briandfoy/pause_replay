Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:58260
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 28108 invoked from network); 18 Dec 2007 20:33:37 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 18 Dec 2007 20:33:37 -0000
Received: (qmail 25948 invoked by uid 225); 18 Dec 2007 20:33:37 -0000
Delivered-To: modules@perl.org
Received: (qmail 25941 invoked by alias); 18 Dec 2007 20:33:36 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Tue, 18 Dec 2007 12:33:26 -0800
Received: from pause.perl.org (localhost.localdomain [127.0.0.1])
	by pause.perl.org (8.13.4/8.13.4/Debian-3sarge3) with ESMTP id lBIKXKU6002787
	for <modules@perl.org>; Tue, 18 Dec 2007 21:33:20 +0100
Received: (from nobody@localhost)
	by pause.perl.org (8.13.4/8.13.4/Submit) id lBIKXKgo002786;
	Tue, 18 Dec 2007 21:33:20 +0100
Date: Tue, 18 Dec 2007 21:33:20 +0100
Message-ID: <200712182033.lBIKXKgo002786@pause.perl.org>
Subject: Module submission File::Find::Node
Reply-To: modules@perl.org
To: modules@perl.org
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       File::Find::Node
  DSLIP:       bdpOp
  description: Object oriented directory tree traverser
  userid:      SCL (Stephen C. Losen)
  chapterid:   10 (File_Names_Systems_Locking)
  communities:
    email to developer

  similar:
    File::Find File::stat File::DirWalk

  rationale:

    File::Find::Node is an object oriented directory tree traverser
    with essentially all of the capabilities of File::Find and
    File::DirWalk. Unlike File::Find, it is object oriented (no exported
    symbols, no global variables, just methods.)

    Like File::Find and File::DirWalk, File::Find::Node uses callback
    functions to process each item visited in the traversal, and you can
    specify a callback to be called before entering a directory and a
    callback to be called upon leaving a directory. You can also provide
    a filter function to sort and/or remove file names returned by
    readdir() before traversing them. You can control if symbolic links
    are followed.

    Unlike File::Find (which stores the current file name in a global
    variable) and unlike File::DirWalk (which passes a file name to its
    callbacks) File::Find::Node passes a node object to its callbacks.
    This object has a full set of methods to get information about the
    item being visited, including pathname, base name, and stat()
    information. The stat() information is available using methods like
    those in File::stat, eg, $f->dev, $f->ino, $f->uid, $f->mtime, etc.

    File::Find::Node has several new features. The $f->parent method
    returns the parent directory object, so decisions can be based on
    the current item and its parent. The $f->arg method returns a hash
    reference where you can store/access arbitrary data in the object
    (or in the parent via $f->parent->arg). This is a handy way to
    collect per directory stats or to save state information between
    calls to callbacks. The $f->prune method sets a flag to prune a
    directory. (File::DirWalk can prune, but I don't see it documented
    for File::Find) The $f->stop method terminates the traversal (by
    pruning everything on the $f->parent chain). The stat() information
    is stored in the object, which avoids extra calls to stat() and
    lstat(). The $f->refresh method is provided to refresh the saved
    stat() information.

    Some methods were inspired by the Unix find command, such as
    $f->type which returns a lower case letter indicating the file type
    ("f" for file, "d" for directory, "l" for symbolic link, etc.) The
    $f->empty method returns true for an empty file or directory. The
    $f->level method returns the depth level of the item. $f->perm
    returns the permission bits (mode bits masked with 07777).

    File::Find::Node should work on any Unix platform, but no effort
    has been made for non-Unix (mostly because so many methods rely on
    Unix stat() info).

  enteredby:   SCL (Stephen C. Losen)
  enteredon:   Tue Dec 18 20:33:15 2007 GMT

The resulting entry would be:

File::Find::
::Node            bdpOp Object oriented directory tree traverser     SCL


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=83210000_ab0c34f60dc03b83&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=83210000_ab0c34f60dc03b83&SUBMIT_pause99_add_mod_insertit=1
