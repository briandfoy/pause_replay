Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:60753
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 11844 invoked from network); 6 Jun 2008 03:48:24 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by x6.develooper.com with SMTP; 6 Jun 2008 03:48:24 -0000
Received: (qmail 1570 invoked by uid 225); 6 Jun 2008 03:48:23 -0000
Delivered-To: modules@perl.org
Received: (qmail 1566 invoked by alias); 6 Jun 2008 03:48:23 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 05 Jun 2008 20:48:20 -0700
Received: from pause.perl.org (localhost.localdomain [127.0.0.1])
	by pause.perl.org (8.13.8/8.13.8/Debian-3) with ESMTP id m563mFJu005274
	for <modules@perl.org>; Fri, 6 Jun 2008 05:48:15 +0200
Received: (from nobody@localhost)
	by pause.perl.org (8.13.8/8.13.8/Submit) id m563mFHE005273;
	Fri, 6 Jun 2008 05:48:15 +0200
Date: Fri, 6 Jun 2008 05:48:15 +0200
Message-ID: <200806060348.m563mFHE005273@pause.perl.org>
Subject: Module submission PSim
Reply-To: modules@perl.org
To: modules@perl.org
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       PSim
  DSLIP:       cdphp
  description: A perlish version of SimPy
  userid:      BATZ (Matt Spear)
  chapterid:   3 (Development_Support)
  communities:

  similar:
    Sim

  rationale:

    Sim provides a bare-essentials discrete event simulator (DES). This
    module (PSim = Perl Simulator) will provide a DES with more of the
    elements from SimPy (redesigned so they are more perlish, and
    automated). The reason it is not subclassing Sim is Sim assumes a
    standard clock, and this (extending the idea from SimPy) allows
    priorities to the methods at a specific time. Users can either
    derive from Process and add operate ala SimPy or can use the module
    ala Sim with only subroutines. As there isn't a really clean method
    for coroutines in Perl5 (save Coro), this will use a lot of closures
    instead of SimPy's yield syntax. The watchers will automatically
    pull values from the subclasses of Process, or can be called to fill
    in observations (the latter is the Python interface). This is
    another module that has grown out of my research work. Planned
    submodules are: PSim - the DES Process - base class for processes,
    objects that operate over time Generator - sub of Process, schedules
    a method at specified (and random) intervals Node - sub of Process,
    for network sims this would be a basic base class IEvent - base
    class for events, these allow a method to be invoked only when the
    event is fired Event - sub of IEvent fires all registered classes
    QueueEvent - sub of IEvent fires the first registered class with
    priority StackEvent - sub of IEvent fires the last registered class
    with priority Resource - sub of IEvent, same as SimPy except with
    timeouts Level - sub of IEvent, '' Store - sub of IEvent, '' IWatch
    - base class for watchers Monitor - sub of IWatch records
    (automatically in PSim, or via user's code) values and times Tally -
    sub of IWatch recurds counts of how many values fell into a bin
    (again automatically in PSim, or via user's code)

    Example code ("functional" w/o Processes): my $sim = new PSim(); #
    PSim is a singleton, can be accessed with either PSim->new or
    PSim->instance. my $f = 0; $sim->schedule(0 => sub {is($f, 1)}, name
    => 1, priority => 0); # names are very important as unlike SimPy a
    single class can have multiple code executions and with interrupts
    and cancels it would not always be the case that all the events
    should be interrupted/canceled, e.g. only a specific method of a
    class derived from Process should be interrupted (same concept for
    the "functional" interface) $sim->schedule(0 => sub {$f = 1}, name
    =>2, priority => 1); # here priority determines in which order the
    functions execute when there are multiple functions to execute at a
    specified time $sim->schedule(1 => sub { $sim->yield(for => 0.1, cb
    => sub {is($sim->now, 1.1)}) }); # The yield statement allows
    specifying for, and until where for waits for time from now, until
    waits until the time specified, and for can also take an event
    wherein it will wait until the event fires calling the code

  enteredby:   BATZ (Matt Spear)
  enteredon:   Fri Jun  6 03:48:15 2008 GMT

The resulting entry would be:

PSim              cdphp A perlish version of SimPy                   BATZ


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=0c410000_c82c67e8d49e6809&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=0c410000_c82c67e8d49e6809&SUBMIT_pause99_add_mod_insertit=1
