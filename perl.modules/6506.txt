Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:6506
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 8751 invoked from network); 5 Jul 2001 19:39:47 -0000
Received: from dubravka.kbx.de (HELO pause.perl.org) (root@212.40.160.59)
  by onion.valueclick.com with SMTP; 5 Jul 2001 19:39:47 -0000
Received: (from nobody@localhost)
	by pause.perl.org (8.9.3/8.9.3) id VAA11201;
	Thu, 5 Jul 2001 21:39:44 +0200
Date: Thu, 5 Jul 2001 21:39:44 +0200
Message-ID: <200107051939.VAA11201@pause.perl.org>
Reply-To: modules@perl.org
Subject: Module submission Object::Prototyped
To: modules@perl.org, nedkonz@cpan.org
X-Spam-Rating: onion.valueclick.com 1.6.2 0/1000/N
Approved: news@nntp.perl.org
From: upload@p11.speed-link.de ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Object::Prototyped
  DSLIP:       adpOp
  description: Fast prototype-based OO programming in Perl
  userid:      NEDKONZ (Ned Konz)
  chapterid:    6 (Data_Type_Utilities)
  communities:
    Posted to Perlmonks, http://www.perlmonks.org/index.pl?node_id=93955
    . Discussed in mail with author of Class::SelfMethods.

  similar:
    Class::SelfMethods Class::Object Class::Classless

  rationale:

    My approach provides both behavior and data inheritance. Slots can
    be added or removed at will; objects may have multiple parents
    (prototypes). Regular Perl inheritance via $self->SUPER::something
    works.

    Compared to the existing modules Class::SelfMethods and
    Class::Classless, this module is fuller-featured and considerably
    faster (5-135x as fast). Class::Object does not provide either
    inheritance or data access, so it's not even close (the author says
    that it's a proof of concept).

    I think it's probably better to name this Object::Prototyped than
    Class::Prototyped, as this is _not_ class-based programming; it's
    object-based. But I'd go with Class::Prototyped if it's considered
    to be a better idea.

  enteredby:   NEDKONZ (Ned Konz)
  enteredon:   Thu Jul  5 19:39:44 2001 GMT

The resulting entry would be:

Object::
::Prototyped      adpOp Fast prototype-based OO programming in Perl  NEDKONZ


Thanks for registering,
The Pause Team

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=71000000_4837b7198ea7d339&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=71000000_4837b7198ea7d339&SUBMIT_pause99_add_mod_insertit=1
