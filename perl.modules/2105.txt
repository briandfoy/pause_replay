Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:2105
Return-Path: <jacob@smtp.sfinteractive.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 4693 invoked from network); 9 Jun 2000 00:12:34 -0000
Received: from faith.sfinteractive.com (HELO smtp.sfinteractive.com) (jacob@170.1.6.4)
  by tmtowtdi.perl.org with SMTP; 9 Jun 2000 00:12:34 -0000
Received: (from jacob@localhost)
	by smtp.sfinteractive.com (8.9.3/8.9.3) id RAA13014;
	Thu, 8 Jun 2000 17:12:33 -0700
Date: Thu, 8 Jun 2000 17:12:33 -0700
To: modules@perl.org
Cc: engineering@faith.sfinteractive.com
Subject: Request for CPAN registration
Message-ID: <20000608171233.H3166@faith.sfinteractive.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.95.4us
Approved: news@nntp.perl.org
From: jacob@sfinteractive.com (Jacob Davies)


Hi there, this is a request for registration for CPAN.  We have one module
we'd like to contribute now and at least one more to come.

Details as asked for in http://www.perl.com/CPAN-local/modules/04pause.html:

* Name:  Jacob Davies
* Email:  jacob@sfinteractive.com
* Homepage:  http://www.sfinteractive.com/
* Userid:  CROMIS

* Description of what we're planning to contribute:

A module called (right now) Text::SimpleTemplate.  (That name actually
appears to be in use already, although it wasn't when I wrote the first
version of this module more than a year ago... we'll have to figure
out a new name for it, suggestions gladly taken.)

Yes, it's yet another templating module somewhat similar to (at least)
these other modules:

	CGI::FastTemplate
	Text::Template
	Text::FillIn

What does it offer that those don't?  Well, we think it's easier to use, it's
more callback-based (similar to the extended-server-side includes given in
the ORA mod_perl book, although we think our interface and syntax is nicer),
it supports some interesting methods for building lists easily, and it has
documentation and an example application supplied.  It's also been heavily
used inside our company (SF Interactive) for more than a year, our HTML
coders like it, our engineers like it, and people we've given it away to
already like it too.  Some examples of outside sites that are using it are
www.mdronline.com, another is www.greenhome.com, and it's being used on
several non-public intranet sites.  Almost all Perl CGI projects within SF
Interactive in the past year or more have used this module -- there are a
bunch, but at least one notable example is pretty much everything dynamic on
www.snapple.com.

We plan to release under the LGPL:

http://www.gnu.org/copyleft/lesser.html

Some other things we would be interested in releasing in the future:

In progress is a mod_perl module that will provide a way of caching tag
callback functions for speed, and allow generic form handlers to be invoked;
these form handlers would be able to manipulate template tags easily.  The
form handlers will be cached in a manner similar to Apache::Registry, but
would be called using specially-named form parameters; this would allow
arbitrary handlers to be easily invoked without having to recode this
functionality in every CGI or Registry script.  The integration with the
Text::SimpleTemplate module would enable these handlers to largely ignore
the details of what HTML text to produce and concentrate on the actions they
perform or the data they return.  This module is provisionally called
Apache::TagRegistry.

We also have a module that uses Apache::AuthCookie to authenticate based
on a DBI database, called (provisionally) Apache::AuthCookieDBI.  This
module is in use for user authentication on Snapple.com.

* DSLI & Description:

Rdph   Templating module oriented toward HTML

* Where we've discussed this publicly and there has been interest:

This is a difficult one.  Unfortunately I don't read c.l.p.* on any kind of
regular basis anymore.  However, I have talked about this module on the Well
(a conferencing system that has a conference devoted to Perl) and had input
that suggested that something that worked differently to the existing
offerings would be useful.  In developing it, we looked at the available
alternatives and were not happy with how they worked; some placed too much
Perl code into the templates (aka the ASP/JSP problem), others did not
provide callback functions for tags and I believe none offered a relatively
simple interface to producing lists of repeated elements.  We based the
module design on keeping the amount of backend-related stuff that HTML
coders had to deal with to a minimum -- just HTML-style tags that they could
use as they saw fit -- and the amount of HTML-related stuff that programmers
had to deal with to a minimum -- just dumping the data into tags.

We also intend to continue developing and supporting the module, hopefully
with the input of users, and we will be setting up a mailing list and
probably a Sourceforge site for this.

-- 
Jacob Davies
Lead UNIX Engineer
SF Interactive
jacob@sfinteractive.com
