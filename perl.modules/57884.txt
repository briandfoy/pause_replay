Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:57884
Return-Path: <gwhulbert@eol.ca>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Delivered-To: moderator for modules@perl.org
Received: (qmail 18125 invoked from network); 27 Nov 2007 12:46:41 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 27 Nov 2007 12:46:41 -0000
Received: (qmail 27364 invoked by uid 225); 27 Nov 2007 12:46:41 -0000
Delivered-To: modules@perl.org
Received: (qmail 27357 invoked by alias); 27 Nov 2007 12:46:40 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received: from smtp105.rog.mail.re2.yahoo.com (HELO smtp105.rog.mail.re2.yahoo.com) (206.190.36.83)
    by la.mx.develooper.com (qpsmtpd/0.28) with SMTP; Tue, 27 Nov 2007 04:46:34 -0800
Received: (qmail 59181 invoked from network); 27 Nov 2007 12:46:30 -0000
Received: from unknown (HELO cal.cotef.org) (gwhulbert@rogers.com@99.244.79.32 with plain)
  by smtp105.rog.mail.re2.yahoo.com with SMTP; 27 Nov 2007 12:46:30 -0000
X-YMail-OSG: fMXcbv0VM1kliX2Sx0fmZ4EGk.0iOoCFAc8puFR_i7ctgOuMUijgSnIpfBUttoAicg--
Subject: Re: Namespaces
To: modules@perl.org
In-Reply-To: <271120070521369905%brian.d.foy@gmail.com>
References: <1196091909.15390.17.camel@cal.cotef.org>
	 <271120070521369905%brian.d.foy@gmail.com>
Content-Type: text/plain
Date: Tue, 27 Nov 2007 07:46:29 -0500
Message-ID: <1196167589.6833.38.camel@cal.cotef.org>
Mime-Version: 1.0
X-Mailer: Evolution 2.0.4 
Content-Transfer-Encoding: 7bit
Approved: news@nntp.perl.org
From: gwhulbert@eol.ca (Guy Hulbert)

On Tue, 2007-11-27 at 05:21 -0600, brian d foy wrote:

> In article <1196091909.15390.17.camel@cal.cotef.org>, Guy Hulbert
> <gwhulbert@eol.ca> wrote:
> 
> >  One of the classes I've written, might be the same as
> > something already there but there is so much, I have no idea how to find
> > it.  I am therefore thinking of using a second new namespace for some of
> > the more general things.
> 
> Well, you can start by telling us what your module does :)

Ok.  At the moment, I'm still hacking a little bit.

The main thing I am doing is writing an application to do sysadmin.  In
that case the namespace is really for a framework.   I notice a number
of such projects on CPAN, which appear to have been started and
abandoned so I am being quite cautious about publishing anything.  I
intend to keep it as small as possible and done in a way that it should
be easy for other people to write components for it.  I just switched to
git from subversion to make it more open.  I won't ask for namespace
reservation until I have some useful code that is releasable ( ~ 1 week
or so).

Since I am hacking, I tend to redo things and quite by accident, this
weekend, I wrote a rather nice replacement for Class::<something>.  I've
used Class::Struct a bit (>3 years) and I've written raw OO perl but
this is much nicer than doing either.  However, I see there are tons of
Class::<things> and someone may have already written something
equivalent.

Here's how you use it.  Let's just call it 'Class'.

	package SubClass;
	use Class;
	our @ISA = qw ( Class );
	sub _init {
		my $subclass = shift;
		$subclass->_define( qw ( meth1 meth2 ) );
		$subclass;	# must be returned for Class::new()
	}

which provides:

	_meth1(VAL), VAL = _meth1()
	_meth2(VALU), VALU = _meth2()

If you want to override the constructor then:

	sub new {
		my $this = shift;
		my $subclass = $this->SUPER::new();
		...
	}

and so on.  It is sometimes necessary to call $subclass->SUPER::_init()
as well.

This is mostly straight out of Conway but 'Class' keeps track of what is
_defined and allows you to declare things _reserved (not definable) ...
I kept trying to use 'import' as a method with Class::Struct.

This is not earth-shattering and there's probably something similar on
CPAN under Class:: but I have no idea how to find it ... there's too
much to look through.

The main feature of this module is that it encourages use of inheritance
by making it very simple.

-- 
--gh


