Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:34875
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 23927 invoked from network); 16 Sep 2004 22:19:17 -0000
Received: from x1.develooper.com (63.251.223.170)
  by lists.develooper.com with SMTP; 16 Sep 2004 22:19:17 -0000
Received: (qmail 8241 invoked by uid 225); 16 Sep 2004 22:19:17 -0000
Delivered-To: modules@perl.org
Received: (qmail 8218 invoked by alias); 16 Sep 2004 22:19:16 -0000
X-Spam-Status: No, hits=-4.9 required=8.0
	tests=BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
  by la.mx.develooper.com (qpsmtpd/0.27.1) with ESMTP; Thu, 16 Sep 2004 15:19:14 -0700
Received: from pause.perl.org (localhost [127.0.0.1])
	by pause.perl.org (8.12.3/8.12.3/Debian-6.6) with ESMTP id i8GMJ2Kt005342;
	Fri, 17 Sep 2004 00:19:03 +0200
Received: (from nobody@localhost)
	by pause.perl.org (8.12.3/8.12.3/Debian-6.6) id i8GMJ2iv005340;
	Fri, 17 Sep 2004 00:19:02 +0200
Date: Fri, 17 Sep 2004 00:19:02 +0200
Message-ID: <200409162219.i8GMJ2iv005340@pause.perl.org>
Subject: Module submission SQL::SyntaxModel
Reply-To: modules@perl.org
To: modules@perl.org, duncand@cpan.org
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       SQL::SyntaxModel
  DSLIP:       cdpOg
  description: An abstract syntax tree for all types of SQL
  userid:      DUNCAND (Darren Duncan)
  chapterid:   11 (String_Lang_Text_Proc)
  communities:
    dbi-dev, dbi-users, poop-group, dbdi-dev, modules@perl.org,
    victoria-pm, sqlite-users@sqlite.org

  similar:
    SQL::Statement SQL::Translator SQL::YASP SQL::Generator SQL::Schema
    SQL::Abstract SQL::Snippet SQL::Catalog DB::Ent DBIx::Abstract
    DBIx::AnyDBD DBIx::DBSchema DBIx::Namespace DBIx::SearchBuilder
    TripleStore

  rationale:

    See the existing CPAN module documentation for SQL::SyntaxModel (
    http://search.cpan.org/dist/SQL-SyntaxModel/lib/SQL/SyntaxModel.pm )
    for a proper/complete description of what the module is for, unique
    features, how it is structured, and how to use it. Many details are
    also in the Pod-only SQL::SyntaxModel::Language . v0.42 is the
    latest release, and another will be out within days.

    To summarize, SQL::SyntaxModel provides a rigorously structured and
    atomic abstract syntax tree for all kinds of SQL statements,
    including queries, data manipulation, schema manipulation,
    transaction control, privileges, and connections. It is up to date
    with the official SQL-2003 standard and can/does store complete
    schema representations in atomic detail, with such schema objects
    as: domains, sequence generators, tables, views, and routines
    (procedures, functions, triggers), and also catalog objects like
    multiple schemas and users. It also manages
    "client/app-side-schemas" as well, namely SQL/objects that isn't
    stored in a database catalog. SQL::SyntaxModel is designed with
    multi-dbms/rdbms portability in mind, and can also track multiple
    instances of the same catalog or application blueprints, such as for
    when you want to migrate a database from one rdbms product to
    another, or to manage testing plus production copies of a
    database-using application.

    SQL::SyntaxModel differs from all of the other solutions on CPAN
    firstly in that it is a lot more complete and capable than any of
    them. It does not cop out and require you to provide raw SQL
    fragmants for commonly used things like where-clauses. It natively
    supports queries of arbitrary complexity, including those with
    multi-column keys and subqueries. It is highly normalized, and
    stores exactly one copy of all identifiers, so you can rename one in
    just one place and all references to it update automatically. It
    does not have any built-in SQL parsing/generating functions, leaving
    that up to external modules that would do it better; it is simply a
    data structure. Moreover, depending on what database product you use
    or how your application works, each could just read or write the
    SQL::SyntaxModel directly rather than needing serialized-SQL to ever
    exist; it's up to the user. External code could alternately generate
    Perl code to do the same task as the SQL if they wanted to; it's
    easy. My module exists in the same space, but is very different from
    anything that came before.

    SQL::SyntaxModel also has only one external dependency, which is
    invoked just when throwing invalid-input exceptions, so installation
    is easy. Said dependency makes SQL::SyntaxModel trivial to localize
    (only English locale data is bundled). Some other modules have many
    external dependencies, by contrast.

    If there are any further questions, please write me directly, in
    addition to replying to the modules@perl.org list.

  enteredby:   DUNCAND (Darren Duncan)
  enteredon:   Thu Sep 16 22:19:01 2004 GMT

The resulting entry would be:

SQL::
::SyntaxModel     cdpOg An abstract syntax tree for all types of SQL DUNCAND


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=a7700000_ac001bb74e21f12d&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=a7700000_ac001bb74e21f12d&SUBMIT_pause99_add_mod_insertit=1
