Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:49843
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 5556 invoked from network); 14 Jul 2006 19:25:01 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 14 Jul 2006 19:25:01 -0000
Received: (qmail 31097 invoked by uid 225); 14 Jul 2006 19:25:00 -0000
Delivered-To: modules@perl.org
Received: (qmail 31090 invoked by alias); 14 Jul 2006 19:24:59 -0000
X-Spam-Status: No, hits=-2.5 required=8.0
	tests=BAYES_00,FORGED_RCVD_HELO
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Fri, 14 Jul 2006 12:24:43 -0700
Received: from pause.perl.org (localhost.localdomain [127.0.0.1])
	by pause.perl.org (8.13.4/8.13.4/Debian-3sarge1) with ESMTP id k6EJODAW006945;
	Fri, 14 Jul 2006 21:24:13 +0200
Received: (from nobody@localhost)
	by pause.perl.org (8.13.4/8.13.4/Submit) id k6EJOA8X006917;
	Fri, 14 Jul 2006 21:24:10 +0200
Date: Fri, 14 Jul 2006 21:24:10 +0200
Message-ID: <200607141924.k6EJOA8X006917@pause.perl.org>
Subject: Module submission Data::Entropy
Reply-To: modules@perl.org
To: modules@perl.org, zefram@cpan.org
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Data::Entropy
  DSLIP:       adphp
  description: entropy (randomness) management
  userid:      ZEFRAM (Andrew Main (Zefram))
  chapterid:   6 (Data_Type_Utilities)
  communities:

  similar:
    Crypt::Random

  rationale:

    This module manages entropy sources. There is an interface for
    entropy source objects, and a concept of the "current" entropy
    source for algorithms to use (overridable a la "local"). This
    objectified arrangement allows the simultaneous use of entropy
    streams of different quality. It also allows the exact replay of a
    sequence of random numbers, by reading entropy from a pre-built
    file. Raw entropy can be read from any file handle. The entropy
    source class has methods to select random numbers in any range, and
    with variable probabilities, thus allowing fractional bits of
    entropy to be dispensed.

    Related: Crypt::Random provides an interface to /dev/random-alike
    entropy sources. However, it has a functional interface, with no
    advertised encapsulation of entropy sources. (There's some
    undocumented internal encapsulation, but the interesting functions
    exist only as functions rather than object methods.) It can't use
    regular files or already-open file handles, so can't provide
    reproducibility. There are other practical problems too.

    Math::Random::OO superficially appears similar, but this is a red
    herring. Its objectification doesn't encapsulate an entropy source
    per se, but rather a set of parameters to an RNG. A Math::Random::OO
    object might provide only numbers up to 3, for example, and one
    can't then get a number up to 10 from the same source.

    Other vaguely relevant modules: Math::TrulyRandom, Math::RandomOrg,
    and Quantum::Random all get entropy from particular sources.
    Plugging them into Data::Entropy would be nice. Under the current
    design this could be done quite easily with a shim class.

  enteredby:   ZEFRAM (Andrew Main (Zefram))
  enteredon:   Fri Jul 14 19:24:10 2006 GMT

The resulting entry would be:

Data::
::Entropy         adphp entropy (randomness) management              ZEFRAM


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=efb00000_6d2dd4abbbb4e910&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=efb00000_6d2dd4abbbb4e910&SUBMIT_pause99_add_mod_insertit=1
