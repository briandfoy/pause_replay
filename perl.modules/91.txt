Newsgroups: perl.perl5.porters,perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.perl5.porters:2469 perl.modules:91
Return-Path: <mike808@mo.net>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 29480 invoked from network); 18 Oct 1999 04:07:46 -0000
Received: from mail.mvp.net (209.96.20.11)
  by tmtowtdi.perl.org with SMTP; 18 Oct 1999 04:07:46 -0000
Received: from mo.net (DialIP2-142.mvp.net [209.96.12.142])
	by mail.mvp.net (8.9.0/8.9.0) with ESMTP id XAA18109;
	Sun, 17 Oct 1999 23:12:32 -0500 (CDT)
Message-ID: <380A9C35.2C654B5F@mo.net>
Date: Sun, 17 Oct 1999 23:04:05 -0500
X-Mailer: Mozilla 4.7 [en] (WinNT; I)
X-Accept-Language: en
MIME-Version: 1.0
To: Jan Dubois <jand@activestate.com>, perl5-porters@perl.org, larry@wall.org,
        modules@perl.org
Subject: Re: [p5p] Re: (Fwd) NEW MODULE (pragma): import.pm
References: <E11c8w2-0005Ca-00@taurus.cus.cam.ac.uk> <kz3B4gzkgCHS092yn@efn.org> <7u8b9b$ac7$1@nnrp1.deja.com> <3816c610.64848837@smtprelay.t-online.de>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Approved: news@nntp.perl.org
From: mike808@mo.net (Michael King)

Jan Dubois wrote:
> >Can I have the namespace or not? [import]
> The "pragma" namespace (all modules starting with a lowercase letter) is
> already "owned" by the perl5-porters, so you cannot have it.

Sez who, O Rulerz-on-High?

> It is reserved for language extensions.

Sez who, O Rulerz-on-High?

> You'll need to get consensus approval on p5p before using it.

Sez who, O Rulerz-on-High?

> You can of course always appeal to the pumpkin holder or to Larry, 
> but that is unlikely to succeed unless you get p5p support first.

That, I don't doubt.

Although I am deferring to this apparently popular misconception / 
delusion about "ownership of the universe of lowercase namespace",
I found *NO* reference to this "ownership" or "restriction" anywhere in 
the Perl documentation.

I would like someone to point such out, if it exists. I can't find it
with 'find . -print | xargs grep -li pragma /dev/null' from my perl5 lib
directory.

There is plenty of references to something called "pragmas/pragmata" and
every reference simply states that they are modules that happen to start 
with a lowercase name. Everything I read about them in the entirety of 
the perl documentation seems to indicate that this is merely
**convention**,
and at that, a **convention** based upon **function**, and that no such 
"ownership" or "reservation" of all possible lowercase-named modules
exists.
They simply say "if it behaves like a pragmata, it will have a lower-cased
name".

It therefore, seemed appropriate that, since the module I was designing
behaved as a "pragmata", that it should therefore take on the
characteristics
of other pragmata - specifically, a lower-cased name.

This does not imply it is part of Perl, any more than a capital-named
module implies that it is *not* part of perl. If "import" doesn't appear
in the "official" list of "pragmatic modules" in perlmodlib, and you
have to download it from CPAN to get it, then I don't see how anyone 
could think it is part of Perl. If anything, I think the opposite is
true - there are plenty of proper-name-cased modules in both places, and
no distinction of origin for proper-name-cased modules, so why would
people think differently for pragmata? Especially since their function
is described, and no reservation of such exists.

I am not convinced (in part due to the arguments of some of the believers 
in the above misconception of pragma/module naming and "ownership") I 
would now want it to be part of the CORE, either, since I wrote it to 
benefit mainly people who have the same problem I have - porting gobs of 
Java to Perl as quickly as possible, written by Java programmers who have 
no idea I need to do this with their code, long after they're gone. Now, 
if p5p comes to think that this is something that should be in the CORE, 
then that's fine, too. Doesn't bother me if they don't, either.

What I do seem to be able to conclude, if I understand the p5p's consensus
of responses on this, is that there are no Perl programmers that are ever 
to be allowed to contribute/write modules that behave as pragmata other 
than those produced by p5p? It seems odd that the p5p should exclude 
module contribution solely on the basis of functioning. i.e. if it
functions
as a pragma, then you (CPAN authors, or Perl authors in general) are 
not allowed to contribute any modules that behave as such, nor solve
problems related to same via new pragmatic modules. Only non-pragmata 
modules allowed in CPAN.

If that is the clear intent of the P5P, then the Perl documentation
should clearly state so, and that we are all to understand that 
*all* lowercase-named modules are to be treated as reserved words 
under the perview of p5p, and contributions of modules that behave
as pragmata are verboten, and especially special-interest pragmata.

What does Larry think of this, IMHO, misguided, arbitrary, and 
"closed source" after-the-fact, edict?

I just don't get it, as CPAN is by definition a repository for
special-interest modules (IMHO, pragmas or not, OO or not, stand-alone or 
not, XS or not, etc. - no limitations on the problems (or solutions) people 
are using Perl to solve is the _very point_ of CPAN.)

I also think it pretty conceited for p5p to think they are the sole 
entity capable of providing all modules exhibiting pragmatic behaviour.
The whole point of a pragma is to modify (somewhat externally) internal 
perl behaviour. To claim that the body responsible for the creation and 
very definition of perl internal behaviour is also the sole keeper /
authority 
to those very extension mechanisms that allow programmers to modify and 
extend that behaviour they have defined is ludicrous. P5P doesn't
"authorize" modules with XS on CPAN, so why are pragmata on CPAN any 
different?

Michael.

In a nutshell, Perl is supposed to make the easy jobs easy without making 
the hard jobs impossible.
   --  Larry Wall, preface to _Programming Perl_.
