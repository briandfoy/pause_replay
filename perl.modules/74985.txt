Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:74985
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 23905 invoked from network); 2 Mar 2011 07:31:49 -0000
Received: from x1.develooper.com (207.171.7.70)
  by x6.develooper.com with SMTP; 2 Mar 2011 07:31:49 -0000
Received: (qmail 19698 invoked by uid 225); 2 Mar 2011 07:31:49 -0000
Delivered-To: modules@perl.org
Received: (qmail 19693 invoked by alias); 2 Mar 2011 07:31:49 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.fiz-chemie.de) (195.37.231.65)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Tue, 01 Mar 2011 23:31:47 -0800
Received: from pause.fiz-chemie.de (localhost.localdomain [127.0.0.1])
	by pause.fiz-chemie.de (8.13.8/8.13.8/Debian-3) with ESMTP id p227VfsI026503
	for <modules@perl.org>; Wed, 2 Mar 2011 08:31:41 +0100
Received: (from nobody@localhost)
	by pause.fiz-chemie.de (8.13.8/8.13.8/Submit) id p227Vf2Q026502;
	Wed, 2 Mar 2011 08:31:41 +0100
Date: Wed, 2 Mar 2011 08:31:41 +0100
Message-ID: <201103020731.p227Vf2Q026502@pause.fiz-chemie.de>
Subject: Module submission Redis::Queue
Reply-To: modules@perl.org
To: modules@perl.org
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Redis::Queue
  DSLIP:       RdpO2
  description: Simple work queue using Redis backend
  userid:      POPIEL (T. Alexander Popiel)
  chapterid:   7 (Database_Interfaces)
  communities:
    https://github.com/Redis-Queue/Redis-Queue

  similar:
    Directory::Queue, File::Queue, MQSeries::Queue

  rationale:

    There are many work queue implementations, typically named by
    appending ::Queue to the name of the back end data store.
    Redis::Queue simply follows this convention, hence my choice of
    namespace.

    My approach is unique only in that it uses Redis as the back end;
    otherwise, it follows the very typical OO queue pattern with an
    object to represent the queue, and the ability to send receive, and
    delete messages from the queue. My implementation makes significant
    efforts to be threadsafe for critical operations (largely due to
    Redis itself being atomic for many operations), and also works to
    ensure that entries are not lost when worker processes die.

    I believe that this module represents a reasonably clean
    implementation of a fundamental building block for distributed
    workflows; as such, it is worth sharing with the rest of the
    universe, and should be listed to aid in discoverability.

  enteredby:   POPIEL (T. Alexander Popiel)
  enteredon:   Wed Mar  2 07:31:41 2011 GMT

The resulting entry would be:

Redis::
::Queue           RdpO2 Simple work queue using Redis backend        POPIEL


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=d0500000_2850ecfd3139c73e&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=d0500000_2850ecfd3139c73e&SUBMIT_pause99_add_mod_insertit=1
Peek at the current permissions:
  https://pause.perl.org/pause/authenquery?pause99_peek_perms_by=me&pause99_peek_perms_query=Redis%3A%3AQueue
