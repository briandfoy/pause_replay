Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:42217
Return-Path: <gavin@openfusion.com.au>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 29437 invoked from network); 2 Aug 2005 23:08:04 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 2 Aug 2005 23:08:04 -0000
Received: (qmail 5867 invoked by uid 225); 2 Aug 2005 23:08:04 -0000
Delivered-To: modules@perl.org
Received: (qmail 5862 invoked by alias); 2 Aug 2005 23:08:03 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of gavin@openfusion.com.au designates 150.101.122.121 as permitted sender)
Received: from ppp122-121.static.internode.on.net (HELO granite.openfusion.com.au) (150.101.122.121)
    by la.mx.develooper.com (qpsmtpd/0.28) with SMTP; Tue, 02 Aug 2005 16:08:00 -0700
Received: (qmail 4534 invoked by uid 900); 2 Aug 2005 23:06:03 -0000
Date: Wed, 3 Aug 2005 09:06:03 +1000
To: modules@perl.org
Subject: Re: Module submission URI::Query
Message-ID: <20050802230603.GB4413@openfusion.com.au>
References: <200508010520.j715KYOI018477@pause.perl.org> <010820050702132072%comdog@panix.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <010820050702132072%comdog@panix.com>
User-Agent: Mutt/1.4.1i
Organisation: Open Fusion
Approved: news@nntp.perl.org
From: gavin@openfusion.com.au (Gavin Carr)

On Mon, Aug 01, 2005 at 07:02:13AM -0700, _brian_d_foy wrote:
> In article <200508010520.j715KYOI018477@pause.perl.org>, Perl Authors
> Upload Server <upload@pause.perl.org> wrote:
> 
> > The following module was proposed for inclusion in the Module List:
> > 
> >   modid:       URI::Query
> 
> I'd call this URI::CGIQueryString

But CGI is often used to contrast with environments like ModPerl, and
I'd prefer not to restrict it that way. URI::QueryString might work.
I've clearly been influenced more by URI::URL->query, which is the
equivalent of CGI->query_string.

> >   description: URI query string manipulation
> > 
> >     A convenience class providing query string manipulation i.e.
> >     stripping out parameters, adding others in, etc, instead of jumping
> >     through split-hash-join hoops.
> 
> CGI.pm does this. You can start with an object, then use param()
> and its various methods to add values and so on. You still get all
> the bells and whistles of CGI.pm.
> 
>    use CGI;
> 
>    my $query = CGI->new( { 'bar' => 'baaz' } );
> 
>    $query->param( 'foo', 'bar' );
> 
>    my $string = $query->query_string;


My module is higher-level than the CGI params stuff (as well as being 
lighter, of course). The main use case I use it for is for creating 
links based on the current page but with a small number of parameters 
changed (page navigation, sort links, etc.). With URI::Query you can do:

  my $qq = URI::Query->new($query_string_or_hash);
  
  # Previous page
  my $prev_qs = $qq->replace(start => $start - $pagesize);

  # Next page
  my $next_qs = $qq->replace(start => $start + $pagesize);

  # Revert to initial constructor state
  $qq->revert;

  # Different orderings
  my $price_qs = $qq->replace(order => 'price');
  my $availability_qs = $qq->replace(order => 'availability');


Cheers,
Gavin

