Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:48784
Return-Path: <IGuthrie@aol.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 16774 invoked from network); 11 May 2006 20:08:55 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 11 May 2006 20:08:55 -0000
Received: (qmail 14727 invoked by uid 225); 11 May 2006 20:08:55 -0000
Delivered-To: modules@perl.org
Received: (qmail 14715 invoked by alias); 11 May 2006 20:08:54 -0000
X-Spam-Status: No, hits=0.8 required=8.0
	tests=BAYES_20,DNS_FROM_RFC_ABUSE,HTML_30_40,HTML_MESSAGE,NO_REAL_NAME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of IGuthrie@aol.com designates 64.12.138.207 as permitted sender)
Received: from imo-m17.mx.aol.com (HELO imo-m17.mx.aol.com) (64.12.138.207)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 11 May 2006 13:08:52 -0700
Received: from IGuthrie@aol.com
	by imo-m17.mx.aol.com (mail_out_v38_r7.5.) id d.400.1cff4ba (39954)
	 for <modules@perl.org>; Thu, 11 May 2006 16:08:43 -0400 (EDT)
Message-ID: <400.1cff4ba.3194f3ca@aol.com>
Date: Thu, 11 May 2006 16:08:42 EDT
Subject: Re: Module submission Filesys::DfPortable
To: modules@perl.org
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="-----------------------------1147378122"
X-Mailer: 9.0 Security Edition for Windows sub 2340
X-Old-Spam-Flag: NO
Approved: news@nntp.perl.org
From: IGuthrie@aol.com

-------------------------------1147378122
Content-Type: text/plain; charset="US-ASCII"
Content-Transfer-Encoding: 7bit

In a message dated 5/11/2006 10:00:52 A.M. Mountain Daylight Time,  
brian.d.foy@gmail.com writes:

Why not  just put that in Filesys::Df ? Do we need a  non-portable
version?
I thought about that, but Filesys::Df returns some Unix specific  information 
(inode info). I guess if I added it to Filesys::Df, I could  just zero the 
inode values it returns or leave those keys undefined on  Windows. My main 
concern was breaking applications that already use the module,  so I thought 
creating it's own namespace and giving it a new interface might be  the best idea.
 
I could in theory just add it to Filesys::Df if you guys think that would  be 
better. I have always thought of them as separate entities and was  worried 
about backwards compatibility so I didn't give it much thought. I was  also 
working on the ability to pass Filesys::Df a open file handle which I don't  
think would work on Windows. But I am guessing that wouldn't be a widely used  
feature anyway, so I could scrap it.
 
So yeah I could add it to Filesys::Df. I could also  change 
Filesys::DfPortable to make its interface more like Filesys::Df and  just tell people that 
Filesys::Df is depreciated. I could then take the modules  like Filesys::Statvfs 
and Filesys::Statfs and just make a Unix filesystem call  bundle that people 
could use if they wanted Unix specific information.
 
I dunno, just throwing ideas out there. What do you guys think?
 
Cheers,
Ian

-------------------------------1147378122
Content-Type: text/html; charset="US-ASCII"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META http-equiv=3DContent-Type content=3D"text/html; charset=3DUS-ASCII">
<META content=3D"MSHTML 6.00.2900.2873" name=3DGENERATOR></HEAD>
<BODY id=3Drole_body style=3D"FONT-SIZE: 10pt; COLOR: #000000; FONT-FAMILY:=20=
Arial"=20
bottomMargin=3D7 leftMargin=3D7 topMargin=3D7 rightMargin=3D7><FONT id=3Drol=
e_document=20
face=3DArial color=3D#000000 size=3D2>
<DIV>In a message dated 5/11/2006 10:00:52 A.M. Mountain Daylight Time,=20
brian.d.foy@gmail.com writes:</DIV>
<BLOCKQUOTE=20
style=3D"PADDING-LEFT: 5px; MARGIN-LEFT: 5px; BORDER-LEFT: blue 2px solid"><=
FONT=20
  style=3D"BACKGROUND-COLOR: transparent" face=3DArial color=3D#000000 size=
=3D2>Why not=20
  just put that in Filesys::Df ? Do we need a=20
non-portable<BR>version?</FONT></BLOCKQUOTE>
<DIV>I thought about that, but Filesys::Df returns&nbsp;some Unix specific=20
information (inode info). I guess if I added it to Filesys::Df, I could=20
just&nbsp;zero the inode values it returns or leave those keys undefined on=20
Windows. My main concern was breaking applications that already use the modu=
le,=20
so I thought creating it's own namespace and giving it a new interface might=
 be=20
the best idea.</DIV>
<DIV>&nbsp;</DIV>
<DIV>I could in theory just add it to Filesys::Df if you guys think that wou=
ld=20
be better. I have always thought of them as separate entities&nbsp;and was=20
worried about backwards compatibility so I didn't give it much thought. I wa=
s=20
also working on the ability to pass Filesys::Df a open file handle which I d=
on't=20
think would work on Windows. But I am guessing that wouldn't be a widely use=
d=20
feature anyway, so I could scrap it.</DIV>
<DIV>&nbsp;</DIV>
<DIV>So yeah I could add it to Filesys::Df. I could also=20
change&nbsp;Filesys::DfPortable to make its interface more like Filesys::Df=20=
and=20
just tell people that Filesys::Df is depreciated. I could then take the modu=
les=20
like Filesys::Statvfs and Filesys::Statfs and just make a Unix filesystem ca=
ll=20
bundle that people could use if they wanted Unix specific information.</DIV>
<DIV>&nbsp;</DIV>
<DIV>I dunno, just throwing ideas out there. What do you guys think?</DIV>
<DIV>&nbsp;</DIV>
<DIV>Cheers,</DIV>
<DIV>Ian</DIV></FONT></BODY></HTML>

-------------------------------1147378122--
