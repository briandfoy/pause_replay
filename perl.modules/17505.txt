Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:17505
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 75406 invoked by uid 76); 30 Jan 2003 19:41:02 -0000
Received: from root@[212.40.160.59] (HELO pause.perl.org) (212.40.160.59) by onion.perl.org (qpsmtpd/0.20) with SMTP; 2003-01-30 19:41:02Z
Received: (from nobody@localhost)	by pause.perl.org (8.11.6/8.11.6) id h0UJeSM20590;	Thu, 30 Jan 2003 20:40:28 +0100
Date: Thu, 30 Jan 2003 20:40:28 +0100
Message-ID: <200301301940.h0UJeSM20590@pause.perl.org>
Subject: Module submission Web::Snapon
Reply-To: modules@perl.org
To: modules@perl.org, mluker@cpan.org
X-SMTPD: qpsmtpd/0.20, http://develooper.com/code/qpsmtpd/
Approved: news@nntp.perl.org
From: upload@pause.x.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Web::Snapon
  DSLIP:       bdpOl
  description: Module to make any perl code HTTP accessible
  userid:      MLUKER (Matt Luker)
  chapterid:   16 (Server_and_Daemon_Utilities)
  communities:
    web-snapon-list@redstarhackers.com

  similar:
    HTTP::Daemon

  rationale:

    Well, I am open to any suggestions on the namespace. I currently
    develop it under RSH::Web::Snapon to prevent name-class or name
    polution. If you believe the application is to specialized, I'm
    willing to keep it there (but it would require an addition of RSH to
    the top namespaces).

    Basically, I have been asked repeatedly, "Gee, is there some way to
    access the script via a web browser?" or "Is there anyway to
    interact with the script from another machine--like with a web
    browser?"

    These questions reflect two needs/ideas: using a web browser as a
    UI and the easy creation and management of remote "perl daemons".
    Now, HTTP::Daemon does almost all the hard work for you by making
    the creation of a HTTP capable daemon fairly straight forward. But
    then comes the next part--which is often repetitive--hooking in your
    code to respond to the requests.

    My module basically wraps all the HTTP::Daemon and request handling
    (even setting up the CGI environment) and provides a script for
    firing it off. The user of the module then creates a mapping by
    subclassing the mapping class--associating urls with code. So,
    hooking up a script to an HTTP daemon is a matter of writing one
    function in a subclass.

    I think this is handy--and I thought others might as well. That's
    why I'd like to put it into CPAN. If it isn't as nifty as I think, I
    am willing to just distribute it via my own website--but it wouldn't
    be nearly as cool as getting it into CPAN ;-)

  enteredby:   MLUKER (Matt Luker)
  enteredon:   Thu Jan 30 19:40:28 2003 GMT

The resulting entry would be:

Web::
::Snapon          bdpOl Module to make any perl code HTTP accessible MLUKER


Thanks for registering,
The Pause Team

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=34200000_3873671ce924e2c0&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=34200000_3873671ce924e2c0&SUBMIT_pause99_add_mod_insertit=1
