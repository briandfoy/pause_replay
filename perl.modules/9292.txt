Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:9292
Return-Path: <prlawrence@lehigh.edu>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 64992 invoked by uid 76); 13 Dec 2001 15:34:28 -0000
Received: from rain.cc.lehigh.edu (HELO rain.CC.Lehigh.EDU) (128.180.39.20)
  by onion.perl.org (qpsmtpd/0.05) with SMTP; Thu Dec 13 15:34:28 2001 -0000
Received: from lawrencework (pc-lfn0.dept.Lehigh.EDU [128.180.52.51])
	by rain.CC.Lehigh.EDU (8.12.1/8.12.1) with SMTP id fBDFY4QF032105
	for <modules@perl.org>; Thu, 13 Dec 2001 10:34:14 -0500
Message-ID: <010501c183eb$a104e3d0$3334b480@lawrencework>
To: <modules@perl.org>
Subject: registration for CPAN id
Date: Thu, 13 Dec 2001 10:34:03 -0500
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 6.00.2600.0000
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000
Approved: news@nntp.perl.org
From: prlawrence@Lehigh.EDU ("Phil R Lawrence")

Name:
    Phil R Lawrence

Email:
    prlawrence@hotmail.com

Homepage:
    www.lehigh.edu/~prl2

Preferred CPAN user id:
    PRL-

Short Desc of Planned Contribution:
    Text::PCL::Basic
        returns PCL strings for pre- and post-pending
        to your plain text files accrding to your
        passed in basic formatting parms, including
        width, lines per page, media size (letter,
        legal, com-10, etc), orientation, sides, and
        copies.
                         
    Term::Interact
        use this to get input from users via terminal
        interaction.  Uses Text::Autoformat,
        Term::Readkey.  Provides for any number of 
        regex checks on user input and any number of
        checks against return values from SQL 
        statements (ala "SELECT foo FROM validation").
    
    SQL::Snippet
        OO abstraction of any RDBMS.  Generates SQL
        statements based on simple OO syntax.
        Example:

          # let's report on our population of
          # vendors (definition of a 'vendor'
          # may include one table or many tables
          # with complicated joins -- doesn't
          # change this simple interface)
          $population_name = 'vendors';

          # we want count of this pop...
          # set SELECT clause accordingly
          $snippet->
            pop->$population_name->
              select( 'SELECT count(*)' );
              
          # let's limit our reported vendor pop
          # to those with ISO9001 certification
          $limit = 'ISO9001';

          # set limit on population (many
          # limits can be set, we are only
          # setting one in this example)
          $snippet->
            pop->$population_name->
              lim->$limit_name;
       
          # get sql for population.  Note this
          # may return a very complicated SQL 
          # statement, depending on how many 
          # tables are involved in the definition
          # of the pop and any applied limits.
          # Yet the OO interface remains simple,
          # no matter how complicated the backend 
          # gets.
          $sql = $snippet->
                   pop->$population_name->
                     query();

