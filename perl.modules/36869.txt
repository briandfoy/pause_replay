Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:36869
Return-Path: <domi@komarr.grenoble.hp.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 30594 invoked from network); 6 Dec 2004 10:30:31 -0000
Received: from x1.develooper.com (63.251.223.170)
  by lists.develooper.com with SMTP; 6 Dec 2004 10:30:31 -0000
Received: (qmail 16937 invoked by uid 225); 6 Dec 2004 10:30:30 -0000
Delivered-To: modules@perl.org
Received: (qmail 16931 invoked by alias); 6 Dec 2004 10:30:30 -0000
X-Spam-Status: No, hits=-4.9 required=8.0
	tests=BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from x6.develooper.com (HELO lists.develooper.com) (63.251.223.186)
  by la.mx.develooper.com (qpsmtpd/0.28) with SMTP; Mon, 06 Dec 2004 02:30:28 -0800
Received: (qmail 30197 invoked by uid 515); 6 Dec 2004 10:30:25 -0000
To: modules@perl.org
Cc: MARKLE@cpan.org
Subject: Re: Module submission POOF
References: <200411300224.iAU2O0vc019704@pause.perl.org>
Date: Mon, 06 Dec 2004 11:29:02 +0100
Message-ID: <kgivfbfg1ox.fsf@komarr.grenoble.hp.com>
User-Agent: Gnus/5.1007 (Gnus v5.10.7) Emacs/21.3 (gnu/linux)
Cancel-Lock: sha1:m396e1kUg6CklATUSM/FjOO4mVk=
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Posted-By: 155.208.254.138
Approved: news@nntp.perl.org
From: domi@komarr.grenoble.hp.com (Dominique Dumont)


Hello

upload@pause.perl.org (Perl Authors Upload Server) writes:
>   description: Perl Object-Oriented Framework

Well, POOF (or Object::POOF) is a very generic name and does not give
much hint on the purpose of the module. 

From reading your doc, I have the impression that POOF (let's stick
with that name for now) provides a generic DB interface. Am I wrong?

If yes, it should fit in the database_interface category (and not
Data_Type_Utilities). And the name should give a hint regarding DB (at
least have DB in its name)

>   similar:
>     ?

Is there something similar in
http://search.cpan.org/modlist/Database_Interfaces ?

>     Hi there. I've been working on and off for a few years on a generic
>     module/application framework I want to call POOF. I was impressed
>     reading about EJB's container-managed persistence and I wanted to
>     make SQL life for Perl objects a little easier to work with (and a
>     little more rigidly defined.)

Is it specific to one database type ?

>     Basically, a user setting up a web app defines a new class

Is the web interface provided by your framework or by the user ?

>     MyApp::Whatever with a constructor that makes itself as a POOF, or a
>     more specialized POOF::User, POOF::Funk (function), or POOF::App,

You should avoid cute name like 'Funk' for the sake of cuteness (been
there, done that, people smile at the name but won't use it because
they will not look for the offered functionality)

>     I would like to be able to create a second interface for an
>     application under POOF::App::NCurses (in addition to the current

I'm drifting off-topic, but your should consider Curses::UI.

>     defaut POOF::App::HTML), to provide equivalent interfaces for the
>     same POOF::Funk (function) tree. Who knows, maybe POOF::App::SOAP
>     eventually.


Could you tell us how POOF is different from DBI::* or DBD::* frameworks ?

Cheers

-- 
Dominique Dumont 
"Delivering successful solutions requires giving people what they
need, not what they want." Kurt Bittner
