Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:24423
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 15060 invoked by uid 76); 7 Nov 2003 23:45:00 -0000
Received: from x1.develooper.com (HELO x1.develooper.com) (63.251.223.170) by onion.perl.org (qpsmtpd/0.26) with SMTP; Fri, 07 Nov 2003 15:45:00 -0800
Received: (qmail 19607 invoked by uid 225); 7 Nov 2003 23:44:58 -0000
Delivered-To: modules@perl.org
Received: (qmail 19603 invoked by alias); 7 Nov 2003 23:44:58 -0000
Received: from pause.perl.org (HELO pause.perl.org) (212.40.160.59) by la.mx.develooper.com (qpsmtpd/0.27-dev) with ESMTP; Fri, 07 Nov 2003 15:44:46 -0800
Received: from pause.perl.org (localhost [127.0.0.1])	by pause.perl.org (8.12.3/8.12.3/Debian-6.6) with ESMTP id hA7NiQ5c019493;	Sat, 8 Nov 2003 00:44:26 +0100
Received: (from nobody@localhost)	by pause.perl.org (8.12.3/8.12.3/Debian-6.6) id hA7NiQNM019489;	Sat, 8 Nov 2003 00:44:26 +0100
Date: Sat, 8 Nov 2003 00:44:26 +0100
Message-ID: <200311072344.hA7NiQNM019489@pause.perl.org>
Subject: Module submission Array::Judy
Reply-To: modules@perl.org
To: modules@perl.org, bholzman@cpan.org
X-Spam-Check-By: la.mx.develooper.com
X-Spam-Status: No, hits=1.1 required=7.0 tests=CARRIAGE_RETURNS,SPAM_PHRASE_00_01 version=2.44
X-SMTPD: qpsmtpd/0.26, http://develooper.com/code/qpsmtpd/
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Array::Judy
  DSLIP:       idhOp
  description: Interface to the Judy C library
  userid:      BHOLZMAN (Benjamin Holzman)
  chapterid:    6 (Data_Type_Utilities)
  communities:
    Judy was briefly discussed on p5p several months ago.

  similar:

  rationale:

    Judy arrays are extremely fast and memory efficient at virtually
    all data sizes, beating even hashes. Essentially, they are digital
    tries with a polymorphic structure; there are multiple storage
    paradigms for each node in the tree, and each node is automatically
    upgraded or downgraded according to how many children it has. The
    JudyL data structure maps words to words/pointers. The JudySL data
    structure (built of JudyLs) maps strings to words/pointers. Clearly
    JudyL should have an array-like interface and JudySL should have a
    hash-like interface. I plan to create a tied interface, but for
    speed will also supply a light OO interface as well. There is also a
    Judy1 array (maps word to bit), which could map to an array or hash
    whose values are implicitly boolean, and extremely space efficient.

    As an aside, I have used Judy arrays in an object database, and
    have been extremely impressed with its performance. Before I used
    Judy arrays, I had a hash table implementation (hash function stolen
    from perl) and the Judy arrays blew the pants off of it!

  enteredby:   BHOLZMAN (Benjamin Holzman)
  enteredon:   Fri Nov  7 23:44:18 2003 GMT

The resulting entry would be:

Array::
::Judy            idhOp Interface to the Judy C library              BHOLZMAN


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=74500000_429fcab043f240c5&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=74500000_429fcab043f240c5&SUBMIT_pause99_add_mod_insertit=1
