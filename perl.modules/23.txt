Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:23
Return-Path: <John.Redford@fmr.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 7328 invoked from network); 14 Oct 1999 13:20:12 -0000
Received: from gw35e.fmr.com (HELO gw35i.fmr.com) (192.223.207.77)
  by tmtowtdi.perl.org with SMTP; 14 Oct 1999 13:20:12 -0000
Received: (from smtp@localhost)
	by gw35i.fmr.com (8.8.7/8.8.7) id JAA19191
	for <modules@perl.org>; Thu, 14 Oct 1999 09:19:40 -0400 (EDT)
Received: from msgbos101nts.fmr.com(137.199.100.30) by gw35i.fmr.com via smap (V2.0)
	id xma019112; Thu, 14 Oct 99 09:19:21 -0400
Received: by msgbos101nts.fmr.com with Internet Mail Service (5.5.2448.0)
	id <42AM0NBK>; Thu, 14 Oct 1999 09:19:51 -0400
Message-ID: <C139F4D49384D2118EB60008C7A4337B578488@MSGBOS675NTS.fmr.com>
To: "'John Porter'" <jdporter@min.net>
Cc: modules@perl.org
Subject: RE: NameSpace module
Date: Thu, 14 Oct 1999 09:19:47 -0400
MIME-Version: 1.0
X-Mailer: Internet Mail Service (5.5.2448.0)
Content-Type: text/plain;
	charset="iso-8859-1"
Approved: news@nntp.perl.org
From: John.Redford@fmr.com ("Redford, John")

Well, the problem I see there is that without the "object" to encapsulate
the syntax for package naming, you get more or less the same interface you
have anyway.

I don't see any real advantage to providing
	set(*{"$pkg\::$name"}, $value);
over the normal
*{"$pkg\::$name"} = $value;


		-----Original Message-----
		From:	'John Porter' [mailto:jdporter@min.net]
		Sent:	Wednesday, October 13, 1999 4:33 PM
		To:	Redford, John
		Cc:	modules@perl.org
		Subject:	Re: NameSpace module

		Redford, John wrote:
		> The NameSpace module is a "normal" Perl object-oriented
interface to package
		> namespaces. It provides a clean way to get access to one,
and then to query
		> and modify the contents of it. It hides all the
complicated syntax behind
		> methods like "set", "get", and "exists".

		Sounds useful.  I can see this having a top-level name.
		However, I wonder if it really has to be OO.  How hard
		would it be to have a non-OO interface as well?
		I think the obligation for it would be a bit stronger
		if this becomes a top-level module.

		-- 
		John Porter
