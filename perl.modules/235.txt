Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:235
Return-Path: <John.Redford@fmr.com>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 19460 invoked from network); 25 Oct 1999 14:20:57 -0000
Received: from gw35e.fmr.com (HELO gw35i.fmr.com) (192.223.207.77)
  by tmtowtdi.perl.org with SMTP; 25 Oct 1999 14:20:57 -0000
Received: (from smtp@localhost)
	by gw35i.fmr.com (8.8.7/8.8.7) id KAA16963
	for <modules@perl.org>; Mon, 25 Oct 1999 10:20:55 -0400 (EDT)
Received: from msgmmk101nts.fmr.com(172.25.150.20) by gw35i.fmr.com via smap (V2.0)
	id xma016556; Mon, 25 Oct 99 10:20:10 -0400
Received: by msgmmk101nts.fmr.com with Internet Mail Service (5.5.2448.0)
	id <40GAX9SS>; Mon, 25 Oct 1999 10:20:10 -0400
Message-ID: <C139F4D49384D2118EB60008C7A4337B016FA9F3@MSGBOS675NTS.fmr.com>
To: modules@perl.org
Subject: RE: Carp::TypeCheck module
Date: Mon, 25 Oct 1999 10:20:02 -0400
MIME-Version: 1.0
X-Mailer: Internet Mail Service (5.5.2448.0)
Content-Type: text/plain;
	charset="ISO-8859-1"
Approved: news@nntp.perl.org
From: John.Redford@fmr.com ("Redford, John")

PING.

This one is also still pending.

-----Original Message-----
From: 'John Porter' [mailto:jdporter@min.net]
Sent: Thursday, October 14, 1999 1:18 PM
To: Redford, John
Subject: Re: Carp::TypeCheck module


Redford, John wrote:
> Well.. the Hook module provides a way for users to intercept routines &
add
> arbitrary code to calls. This module does intercept calls, but it provides
> no way for users of the module to intercept the calls. I think using Hook
> would definitely be naming it for "how it does it" rather than "what it
> does".

I have to say, I'm not sure I agree with you, looking at it from
the perspective of a user.  I know -- because I have to know -- that
if I say

	$my_sub_typechecked_closure =
	typecheck(
		{
			... # description of the arguments
		},

		\&my_sub
	);

(Sorry, had to guess at the syntax...)
that some code is being interposed between a call to

	$my_sub_typechecked_closure->()

and the subsequent

	my_sub()

which happens "inside".


> I saw there being great similarity between this module and the
Carp::Assert
> module. Carp::Assert, exports 'assert', this module exports 'typecheck'.
> Similar to 'assert', the type-checking can be turned off for "production
> code". And clearly in spirit, both 'assert' and 'typecheck' are tools for
> programming in the same style .. with explicit code to verify the state of
> the program environment at the time of execution.

I suppose you're right about that; but I'm not sure I'm happy with
Carp::Assert, either.  It seems that Carp:: would become a catch-all
family for anything that throws exceptions.  Not good.

-- 
John Porter
