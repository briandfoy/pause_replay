Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:240
Return-Path: <k@hohenstaufen.in-berlin.de>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 20140 invoked from network); 25 Oct 1999 15:13:35 -0000
Received: from dubravka.in-berlin.de (HELO hohenstaufen.in-berlin.de) (0@193.175.21.65)
  by tmtowtdi.perl.org with SMTP; 25 Oct 1999 15:13:35 -0000
Received: (from k@localhost)
	by hohenstaufen.in-berlin.de (8.9.1a/8.9.1) id RAA18032;
	Mon, 25 Oct 1999 17:13:22 +0200
Sender: k@hohenstaufen.in-berlin.de
To: "Redford, John" <John.Redford@fmr.com>
Cc: modules@perl.org
Subject: Re: Carp::TypeCheck module
References: <C139F4D49384D2118EB60008C7A4337B016FA9F3@MSGBOS675NTS.fmr.com>
Date: 25 Oct 1999 17:13:22 +0200
In-Reply-To: "Redford, John"'s message of "Mon, 25 Oct 1999 10:20:02 -0400"
Message-ID: <sfcln8r79t9.fsf@hohenstaufen.in-berlin.de>
Lines: 70
User-Agent: Gnus/5.070097 (Pterodactyl Gnus v0.97) Emacs/20.3
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Approved: news@nntp.perl.org
From: andreas.koenig@anima.de ((Andreas J. Koenig))

>>>>> On Mon, 25 Oct 1999 10:20:02 -0400, "Redford, John" <John.Redford@fmr.com> said:

 > PING.
 > This one is also still pending.

I agree with your statement that

      Carp might become a catch-all for "things that complain".. which
      might not be so bad.

But I'm indifferent between TypeCheck and CheckArgs.


andreas

 > -----Original Message-----
 > From: 'John Porter' [mailto:jdporter@min.net]
 > Sent: Thursday, October 14, 1999 1:18 PM
 > To: Redford, John
 > Subject: Re: Carp::TypeCheck module


 > Redford, John wrote:
>> Well.. the Hook module provides a way for users to intercept routines &
 > add
>> arbitrary code to calls. This module does intercept calls, but it provides
>> no way for users of the module to intercept the calls. I think using Hook
>> would definitely be naming it for "how it does it" rather than "what it
>> does".

 > I have to say, I'm not sure I agree with you, looking at it from
 > the perspective of a user.  I know -- because I have to know -- that
 > if I say

 > 	$my_sub_typechecked_closure =
 > 	typecheck(
 > 		{
 > 			... # description of the arguments
 > 		},

 > 		\&my_sub
 > 	);

 > (Sorry, had to guess at the syntax...)
 > that some code is being interposed between a call to

 > 	$my_sub_typechecked_closure->()

 > and the subsequent

 > 	my_sub()

 > which happens "inside".


>> I saw there being great similarity between this module and the
 > Carp::Assert
>> module. Carp::Assert, exports 'assert', this module exports 'typecheck'.
>> Similar to 'assert', the type-checking can be turned off for "production
>> code". And clearly in spirit, both 'assert' and 'typecheck' are tools for
>> programming in the same style .. with explicit code to verify the state of
>> the program environment at the time of execution.

 > I suppose you're right about that; but I'm not sure I'm happy with
 > Carp::Assert, either.  It seems that Carp:: would become a catch-all
 > family for anything that throws exceptions.  Not good.

 > -- 
 > John Porter

