Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:2270
Return-Path: <sb@sdm.de>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 5042 invoked from network); 27 Jun 2000 06:28:53 -0000
Received: from unknown (HELO sdmmx1.sdm.de) (192.76.162.232)
  by tmtowtdi.perl.org with SMTP; 27 Jun 2000 06:28:53 -0000
Received: FROM muccpu1.muc.sdm.de BY sdmmx1.sdm.de ; Tue Jun 27 08:28:24 2000 +0100
Received: by muccpu1.muc.sdm.de (Sendmail 8.9.3+Sun)
	id IAA22893; Tue, 27 Jun 2000 08:28:17 +0200 (MET DST)
Message-ID: <200006270628.IAA22893@muccpu1.muc.sdm.de>
Subject: Re: RFC: How to name date objects module?
In-Reply-To: <p04320409b57d816af3fc@[209.192.217.51]> from Chris Nandor at "Jun
 26, 2000 06:03:00 pm"
To: Chris Nandor <pudge@pobox.com>
Date: Tue, 27 Jun 2000 08:28:17 +0200 (MET DST)
CC: Steffen Beyer <sb@sdm.de>,
        "comp.lang.perl.moderated post-via-mail-address" <mjd-clpm-submit@plover.com>,
        Perl Modules <modules@perl.org>, Jarkko Hietaniemi <jhi@iki.fi>,
        oo-datetime-design@lists.sourceforge.net,
        Roland Titze <Roland.Titze@ks.sel.alcatel.de>,
        Andrew Brown <alloneword@dial.pipex.com>,
        Tim Mueller-Seydlitz <Tim.MuellerSeydlitz@blb.de>,
        Gisle Aas <gisle@aas.no>, Jerker Nilsson <jnn@annons.dn.se>,
        Masanao Izumo <mo@goice.co.jp>, Slaven Rezic <eserte@cs.tu-berlin.de>,
        Tobias Brox <tobiasb@odin.funcom.com>,
        Matthew Persico <persicom@acedsl.com>,
        Jens Coldewey <jens_coldewey@acm.org>,
        Michael Niebler <mniebler@generali.de>,
        Charles Lane <lane@duphy4.physics.drexel.edu>,
        Frank Dabelstein <frankd@imf.au.dk>,
        Steve Tolkin <steve.tolkin@fmr.com>,
        Martin Vorlaender <martin@radiogaga.harz.de>,
        Jarkko Hietaniemi <jhi@iki.fi>, Graham Barr <gbarr@pobox.com>
Reply-To: sb@sdm.de (Steffen Beyer)
X-No-Archive: yes
X-Disabled: Return-Receipt-To: sb@sdm.de
X-W3-Page: http://www.engelschall.com/u/sb/download/
X-Mailer: ELM [version 2.4ME+ PL61 (25)]
Approved: news@nntp.perl.org
From: sb@sdm.de (Steffen Beyer)
References: <p04320409b57d816af3fc@[209.192.217.51]>

Hello Chris Nandor, in a previous mail you wrote:

> >1> I think that the suggested name for the new OO interface,
> >1> Date::Object, is a Very Bad Choice.  I severely dislike embedding
> >1> either the interface style or the implementation style to the name of
> >1> a module.
> >
> >*Why* do you think this is such a bad idea?
> 
> Because most people don't care what style is used for the interface, 
> they care about getting some task accomplished.  And those who DO 
> care about the style and not the functionality, well, they should be 
> shot.

Well, people tend to disagree. :-)

There is a whole mailing list going on right now (i.e., the last
couple of months) about creating an object oriented Date module
which should allow to treat dates like a Perl built-in data type.
(See oo-datetime-design@lists.sourceforge.net)

Therefore, being OO and using overloaded operators *DOES* make a
difference to some people, first because most of the Date modules
existing so far are functional and second, because there are so
many different Date modules right now that creating a new one
which does everything the other modules do but provides a more
consistent interface *DOES* seem like a Good Idea.

And talking about shooting people from where you stand (the US,
which has become famous worldwide lately for lots and lots of
incredibly crazy shootings) DOES sound a little makabre... :-)

> Note that "Date::Object" tells me not a jot about what the module 
> actually does for me.

Maybe you are not one of the potential users anyway? Sounds so... :-)

It is supposed to tell you that it allows you to handle points in
date/time as objects (and by inference, that it allows you to treat
date/time points as a built-in data type, i.e., using Perl's built-in
operators like <, >, ==, !=, +, - etc. for operations, instead of a
proprietary functional interface).

The point being the ease of use (normal Perl operators instead of
functional interface) and the "standard" interface (as opposed to
proprietary interfaces, which change wildly between different
Date/Time modules).

> So the name is DOUBLY bad.  It not only tells 
> me about the interface, which I don't care one whit about, but it 
> doesn't tell me what the module does, which is what I do care about.

Well, I disagree completely here, because as I explained above, the
way is the goal! I.e., an OO interface with overloaded operators is
easier to use because it's somehow more "standard" than a proprietary
functional interface.

> I also think names like Text::CSV_XS are Really Bad.  Pick a new name 
> if you have to, don't tell me how it is implemented.  I can read the 
> docs if I happen to care (which I probably won't).

BTW, one of the objectives (through a more "standard" interface) is to
make the interface more intuitive so that people like you ;-) do not
NEED to read the docs before using the module!

> >2> And unfortunately I don't see how I could switch on and off the overloading
> >2> easily on demand. Moreover, this would involve some ugly hacking and surely
> >2> also some time overhead.
> 
> Well, I don't know the implementation details, but I've never had 
> significant problem with making stuff alternately functional or OO. 
> Worst case scenario is to write it in OO and then have wrapper 
> functions that you can export.

Well, I would pretty much like to let the user decide simply by using a
module or not, and not stuff in lots of code to make it possible to switch
between two interfaces (which complement each other, BTW, there are things
more easily expressed in the functional interface sometimes).

I'm glad you don't find that difficult to implement :-), but that's not
the point entirely!

It's a matter of "Keep it simple" and "Let the user decide what he wants",
in the good old tradition of Unix spirit, as opposed to "I'll do everything
for you but unfortunately, this is buggy and some things are alas impossible"
like the crap from M$.

> >2> That way people can opt for more comfort and more speed penalty or less
> >2> comfort and fastest possible speed.
> 
> That assumes facts not in evidence, that the OO interface equates to 
> more comfort.

Standard operators vs. proprietary interface - I think the facts speak
for themselves...

> >4> Therefore I still need a good name for the OO frontend module.
> 
> I think that possibly one does not exist.  Now, Date::Calc::Simple or 
> Date::Calc::Easy might be better ... but it might also be misleading, 
> if the only difference is that it is OOP.

Again, that's not really the point. In this case, the "standard" interface
is. Which is OO + overloaded operators. So how do you suggest to name that?

> Maybe there is not a need for this new module?  Just a thought.  Good luck,

I already hear the scream of the couple of people in my mind who explicitly
asked me for this module! :-) (They did!)

Regards,
-- 
    Steffen Beyer <sb@engelschall.com>
    http://www.engelschall.com/u/sb/whoami/ (Who am I)
    http://www.engelschall.com/u/sb/gallery/ (Fotos Brasil, USA, ...)
    http://www.engelschall.com/u/sb/download/ (Free Perl and C Software)
