Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:13629
Return-Path: <danny.vandepol@pandora.be>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 11603 invoked by uid 76); 6 Sep 2002 21:07:17 -0000
Received: from tartarus.telenet-ops.be (HELO tartarus.telenet-ops.be) (195.130.132.34)
  by onion.perl.org (qpsmtpd/0.07b) with SMTP; Fri Sep  6 21:07:17 2002 -0000
Received: from localhost (localhost.localdomain [127.0.0.1])
	by tartarus.telenet-ops.be (Postfix) with SMTP id 700FFDC539
	for <modules@perl.org>; Fri,  6 Sep 2002 23:06:23 +0200 (CEST)
Received: from polle (D5765090.kabel.telenet.be [213.118.80.144])
	by tartarus.telenet-ops.be (Postfix) with SMTP id CB7CCDBCA8
	for <modules@perl.org>; Fri,  6 Sep 2002 23:06:22 +0200 (CEST)
Message-ID: <001b01c255ea$a3127800$905076d5@pandora.be>
To: <modules@perl.org>
Subject: Registration request
Date: Fri, 6 Sep 2002 23:16:16 +0200
MIME-Version: 1.0
Content-Type: multipart/alternative;
	boundary="----=_NextPart_000_0018_01C255FB.66475BA0"
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 6.00.2600.0000
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000
Approved: news@nntp.perl.org
From: danny.vandepol@pandora.be ("Danny Van de Pol")

------=_NextPart_000_0018_01C255FB.66475BA0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

Dear module maintainers,

I hereby would like to register as a module developer.

Name: Danny Van de Pol
Email: daniel.van_de_pol@alcatel.be (company) danny.vandepol@pandora.be =
(private)
Homepage: www.alcatel.be (company homepage)
Preferred user ID: D-VDPOL

My (planned) contribution(s):

I just finished writing, documenting and preparing for distribution 2 =
modules:

GPC:  This is a wrapper for the (quite popular) 'General Polygon =
Clipping' library.
This C library is written by Alan Murta (more info at =
http://www.cs.man.ac.uk/aig/staff/alan/software/)
The library is free for non-commercial use.
As I said, it's just a wrapper which I mainly wrote (using swig) for the =
other module (see below)
 - but it can be used 'standalone'.  Those familiar with gpc (and Perl =
of course) will have little or
 no problem in using it.  I first intended to translate the soruce code =
to Perl but then I figured
that doing so would a waste of effort and a waste in terms of =
performance.

Math::Geometry_2D: A 2D geometry package with a (IMHO) fairly complete =
set of functions.
Performs a set of operations on 2D polygons - polygons being an ordered =
set (array) of=20
coordinates. I'm not a math export (although  I do have some background =
in that area) but
still I tried to use well known and efficient algorithms.  Some =
functions are trivial (e.g.
mirrorx and mirrory), others are more sofisticated (e.g. point in =
polygon).  There is pod
in the code but just as an overview a  (almost complete) list of the =
functions available
- lenght of a segment
- vector dot product
- vector cross product
- determinant of a matrix
- intersection of 2 lines
- intersection of 2 points
- check if 3 points are colinear
- perpendicular distance from a point to a line
- perpendiuclar distance from a point to a segment
- perpendicular foot of a point on a line
- check if lines are perpendicular
- (signed) triangle area
- (signed) polygon area
- polygon perimeter
- polygon centroid
- polygon cleanup (remove colinear points)
- check if polygon is concave
- check if polygon is simple (for the time being this is the
  only one with a nearly brute force algorithm)
- check if point in polygon
- polygon bounding box
- polgyon minimal area enclosing rectangle
- polygon convex hull
- set of points convex hull
- polygon difference, union, xor and intersection using gpc
- conversion to and from gpc data structures
- polygon move
- polygon scale (centered)
- polygon mirror (x,y and arbitrary axis)
- polygon rotate (centered)
....

I tried to follow the rules in terms of name space pollution (no =
exports),
including pod documentation ... =20
Think there's a good chance there are other people in the world that
could benefit from my work.

Looking forward for your reply
Best regards,

Danny Van de Pol

PCB tools and methodolgy - design data management
Broadband Networking Division
Alcatel Telecom - Antwerp
Belgium

------=_NextPart_000_0018_01C255FB.66475BA0
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Diso-8859-1">
<META content=3D"MSHTML 6.00.2719.2200" name=3DGENERATOR>
<STYLE></STYLE>
</HEAD>
<BODY bgColor=3D#ffffff>
<DIV><FONT face=3DArial size=3D2>Dear module maintainers,</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>I hereby would like to register as a =
module=20
developer.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>Name: Danny Van de Pol</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>Email:&nbsp;<A=20
href=3D"mailto:daniel.van_de_pol@alcatel.be">daniel.van_de_pol@alcatel.be=
</A>=20
(company) <A=20
href=3D"mailto:danny.vandepol@pandora.be">danny.vandepol@pandora.be</A>=20
(private)</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>Homepage: <A=20
href=3D"http://www.alcatel.be">www.alcatel.be</A> (company =
homepage)</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>Preferred user ID: D-VDPOL</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>My (planned) =
contribution(s):</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>I just finished writing, documenting =
and preparing=20
for distribution 2 modules:</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>GPC:&nbsp; This is a wrapper for the =
(quite=20
popular) 'General Polygon Clipping' library.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>This C library is written by Alan Murta =
(more info=20
at <A=20
href=3D"http://www.cs.man.ac.uk/aig/staff/alan/software/">http://www.cs.m=
an.ac.uk/aig/staff/alan/software/</A>)</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>The library is free for non-commercial=20
use.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>As I said, it's just a wrapper which I =
mainly wrote=20
(using&nbsp;swig)&nbsp;for the other module (see below)</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>&nbsp;- but it can </FONT><FONT =
face=3DArial=20
size=3D2>be used 'standalone'.&nbsp; Those familiar with gpc (and Perl =
of course)=20
will have little or</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>&nbsp;no problem </FONT><FONT =
face=3DArial size=3D2>in=20
using it.&nbsp; I first intended to translate the soruce code to Perl =
but then I=20
figured</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>that&nbsp;doing so&nbsp;would =
</FONT><FONT=20
face=3DArial size=3D2>a waste of effort and a waste in terms of=20
performance.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>Math::Geometry_2D: A 2D geometry =
package with a=20
(IMHO) fairly complete set of functions.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>Performs a set of operations on 2D =
polygons -=20
polygons being an ordered&nbsp;set (array) of </FONT></DIV>
<DIV><FONT face=3DArial size=3D2>coordinates.&nbsp;I'm not a math export =

(although&nbsp; I do have some background in that area) but</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>still I tried to use well known and =
efficient=20
algorithms.&nbsp; Some functions are trivial (e.g.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>mirrorx and mirrory), others are more =
sofisticated=20
(e.g. point in polygon).&nbsp;&nbsp;There is pod</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>in the code but just as an overview =
a&nbsp; (almost=20
complete) list of the functions available</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- lenght of a segment</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- vector dot product</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- vector cross product</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- determinant of a matrix</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- intersection of 2 lines</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- intersection of 2 points</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- check if 3 points are =
colinear</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- perpendicular distance from a point =
to a=20
line</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- perpendiuclar distance from a point =
to a=20
segment</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- perpendicular foot of a point on a=20
line</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- check if lines are =
perpendicular</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- (signed) triangle area</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- (signed) polygon area</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- polygon perimeter</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- polygon centroid</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- polygon cleanup (remove colinear=20
points)</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- check if polygon is =
concave</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- check if polygon is simple (for the =
time being=20
this is the</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>&nbsp;&nbsp;only one with a nearly =
brute=20
force</FONT><FONT face=3DArial size=3D2>&nbsp;algorithm)</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- check if point in =
polygon</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- polygon bounding box</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- polgyon minimal area enclosing=20
rectangle</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- polygon convex hull</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- set of points convex =
hull</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- polygon difference, union, xor and =
intersection=20
using gpc</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- conversion to and from gpc data=20
structures</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- polygon move</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>-&nbsp;polygon&nbsp;scale =
(centered)</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- polygon mirror (x,y and arbitrary=20
axis)</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>- polygon rotate =
(centered)</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>...</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>I tried to follow the rules in terms of =
name space=20
pollution (no exports),</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>including pod documentation ...&nbsp; =
</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>Think there's a good chance there are =
other people=20
in the world that</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>could benefit from my =
work.</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>Looking forward for your =
reply</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>Best regards,</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>Danny Van de Pol</FONT></DIV>
<DIV><FONT face=3DArial size=3D2></FONT>&nbsp;</DIV>
<DIV><FONT face=3DArial size=3D2>PCB tools and methodolgy - design data=20
management</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>Broadband Networking =
Division</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>Alcatel Telecom - Antwerp</FONT></DIV>
<DIV><FONT face=3DArial size=3D2>Belgium</FONT></DIV></BODY></HTML>

------=_NextPart_000_0018_01C255FB.66475BA0--


