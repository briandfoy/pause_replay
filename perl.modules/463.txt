Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:463
Return-Path: <jdporter@min.net>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 24112 invoked from network); 4 Nov 1999 14:42:01 -0000
Received: from min.net (jdporter@208.222.210.19)
  by tmtowtdi.perl.org with SMTP; 4 Nov 1999 14:42:01 -0000
Received: (from jdporter@localhost)
	by min.net (8.9.3/8.9.3) id JAA04670;
	Thu, 4 Nov 1999 09:42:00 -0500 (EST)
Date: Thu, 4 Nov 1999 09:41:59 -0500
To: modules@perl.org
Cc: Michael G Schwern <schwern@pobox.com>
Subject: Re: Tie::Cache::LRU
Message-ID: <19991104094159.A3043@min.net>
References: <sfciu3nv4y1.fsf@hohenstaufen.in-berlin.de> <19991102144605.C23528@min.net> <19991103004139.K18518@ig.co.uk> <sfcso2nlwl7.fsf@hohenstaufen.in-berlin.de> <19991103163330.A5253@toldyouso.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Mailer: Mutt 0.95.1us
In-Reply-To: <19991103163330.A5253@toldyouso.com>; from Michael G Schwern on Wed, Nov 03, 1999 at 04:33:30PM -0500
Approved: news@nntp.perl.org
From: jdporter@min.net (John Porter)

Michael G Schwern wrote:
> 
> Would it not make more sense to promote names like
> "Tie::Hash::Defaults" and "Tie::Hash::Secure"?  It makes it easier to
> list modules in a logical fashion and reigns in board categories of
> modules such as "Tie::" The situation will only worsen as time goes
> on.

Suffice it to say that I second the motion.



> 	Tie::Cache::Base may still appear, Tie::Cache::LRU would be
> made a subclass and Tie::Cache::LRU::File could be written as
> addiitonal subclass.  All should logically appear under the
> Tie::Cache:: heading in the module list, or do you expect me to write
> Tie::CacheLRUFile instead so it can appear on the module list?

It occurs to me that the essential problem is that :: has two
different meanings.  The first :: in Tie::Cache::LRU is semantically
different from the second, because you could s/Tie::Cache/TieCache/
(or even s/Tie::Cache/Fubar/) without changing the meaning the code. 
In this case :: is simply a namespace "path separator".  The second
and subsequent occurrences of :: indicate things that live in that
namespace, including is-a relationships between things.

It is only the first meaning that is subject to the policy of
Two Levels, Max.  In your case, you seem to have developed a
framework of classes which should all live together under some
common name.  The name for the framework could be Tie::Cache,
or you could give it some distinctive top-level name.

-- 
John Porter

