Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:802
Return-Path: <Roland.Huss@consol.de>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 15271 invoked from network); 2 Jan 2000 15:04:29 -0000
Received: from gate.consol.de (194.221.87.10)
  by tmtowtdi.perl.org with SMTP; 2 Jan 2000 15:04:29 -0000
X-Envelope-Sender-Is: Roland.Huss@consol.de (at relayer gate.consol.de)
Received: from msgsrv.bb.consol.de (root@msgsrv.bb.consol.de [10.250.0.100])
	by gate.consol.de (8.9.3/8.9.1) with ESMTP id QAA23004
	for <modules@perl.org>; Sun, 2 Jan 2000 16:04:24 +0100 (CET)
Received: from vscanner.bb.consol.de (root@vscanner.bb.consol.de [10.250.0.120])
	by msgsrv.bb.consol.de (8.8.8/8.8.8) with ESMTP id QAA23059
	for <modules@perl.org>; Sun, 2 Jan 2000 16:04:27 +0100
Received: from gauss.int.consol.de (gauss.int.consol.de [10.0.1.2])
	by vscanner.bb.consol.de (8.9.3/8.9.3) with ESMTP id QAA22785
	for <modules@perl.org>; Sun, 2 Jan 2000 16:04:00 +0100
Received: from planck.int.consol.de (roland@planck.int.consol.de [10.0.1.125])
	by gauss.int.consol.de (8.9.3/8.9.3) with ESMTP id QAA03227
	for <modules@perl.org>; Sun, 2 Jan 2000 16:04:02 +0100 (MET)
Received: (from roland@localhost)
	by planck.int.consol.de (8.8.8/8.8.8) id QAA00927;
	Sun, 2 Jan 2000 16:04:01 +0100
Date: Sun, 2 Jan 2000 16:04:01 +0100
X-Amavis-approved: Yes
Message-ID: <200001021504.QAA00927@planck.int.consol.de>
X-Authentication-Warning: planck.int.consol.de: roland set sender to roland@planck.int.consol.de using -f
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
To: modules@perl.org
Subject: Scheduler::Cron -- Module name ok ?
X-Mailer: VM 6.33 under Emacs 20.4.1
Approved: news@nntp.perl.org
From: Roland.Huss@consol.de (Roland Huss)

Hello,

thanx for asigning an userid to me. As I mentioned in a previous mail,
I  would like  to contribue  a cron-like  scheduler for  Perl  subs. I
already  packaged up  the stuff  ready for  upload, howeve  before I'm
going to  upload the thing,  I want to  get sure that the  chosen name
"Schedule::Cron"  (which  I think  fits  best)  conforms  to the  CPAN
namespace hierachy.

Please send  me a  short confirmation (yes  or no),  if I can  use the
name:

Schedule:: 
::Cron              adpO  Cron-like scheduler for Perl subroutines

Also, I'm a  bit unclear about the categorization of  the module. As I
see, the  other Schedule::* modules appear either  under "4) Operating
System Interfaces, Hardware Drivers" or "23) Miscellaneous Modules". I
think neither of the two  categories fits well to this package. Though
up to now, it probably only runs under UNIX I intend to turn it into a
platform  independent  scheduler.  Hence  probably "20)  Control  Flow
Utilities (callbacks and exceptions etc)" would be the better guess.

cu...

							...roland huss
						             consol.de

Heres the README file to get an idea of what I'm talking about:
======================================================================
			    Schedule::Cron
			    ==============

This module provides  a simple but complete cron  like scheduler.  I.e
this modules can be  used for periodically executing Perl subroutines.
The  dates  and  parameters  for  the subroutines  to  be  called  are
specified with a format known as crontab entry (see manpage crontab(5)
or documentation of Schedule::Cron).

The   philosophy  behind   Schedule::Cron  is   to   call  subroutines
periodically from  within one single  Perl program instead  of letting
cron  trigger several  (possibly different)  Perl  scripts. Everything
under  one  roof.  Furthermore  Schedule::Cron  provides mechanism  to
create crontab entries dynamically, which isn't that easy with cron.

Schedule::Cron  knows  about  all   extensions  (well,  at  least  all
extensions I'm aware of, i.e those  of the so called "Vixie" cron) for
crontab entries like ranges  including 'steps', specification of month
and days of the week by name or coexistence of lists and ranges in the
same field. And  even a bit more (like lists  and ranges with symbolic
names).

This module is rather effective concerning system load.  It calculates
the execution  dates in advance and  will sleep until  those dates are
reached (and  wont wake  up every minute  to check for  execution like
cron).   However, it  relies on  the accuracy  of your  sleep() system
call.

EXAMPLES
--------

 * Minimalistic:

      use Schedule::Cron;

      my $dispatcher = sub { print "Time to start...\n"};
      my $cron = new Schedule::Cron($dispatcher);	 

      $cron->add_entry("0 7 * * *");
      $cron->run;             # Runs forever...

 * A bit more complex:

      use Schedule::Cron;

      my $cron = new Schedule::Cron(  sub { print "@_","\n" },
                                      file  => "check_links.sched",
                                      eval  => 1);

      sub check_links { 
        my $args = shift;
        print "URL:   ",$args->{url},"\n";
        print "Depth: ",$args->{depth},"\n";
      } 

      $cron->add_entry("0-40/5,55 3,22 * Jan-Nov Fri",
                       { sub  => \&check_links,
                         args => [ { url   => "http://www.consol.de", 
                                     depth => 2 } ],
                         eval => 0 });
      # ... add more ....
      $cron->run(detach=>1,pid_file=>"/var/run/checker.pid");
      # ... continue ...

 * simple cron replacement:
   
      use Schedule::Cron;
      my $cron = new Schedule::Cron(sub { system(shift) },
                                    file => "/var/spool/crontab.perl");
      $cron->run();
      
PREREQUISITES
-------------

In order  to install and use  this package you will  need Perl version
5.005  or better.   Furthermore  you need  the module  Time::ParseDate
(contained in the Time-modules-xx.xxxxx) available on CPAN.

You need a fork()-aware Perl for dispatching the cron jobs. (Honestly,
I don't yet know, whether the  Win32 Port provides this system call. I
dare that this is the case). This might change in the future.

OS-DEPENDENCIES
---------------

Schedule::Cron was tested on a Redhat Linux-Box, but it should work on
any UNIX  Box (still  to be  tested). In depends  on some  UNIX system
calls for starting jobs and detaching itself to the background:

  * It uses fork() for starting jobs
  * For  detaching it  uses either  setsid (POSIX)  or the  ioctl call
    TIOCNOTTY

So at  the moment, it probably  won't run on any  'foreign' ports like
the Win32- or MacOs-Port.

These restrictions might be relaxed in the future.

INSTALLATION
------------

As usual:

   perl Makefile.PL
   make
   make test
   make install

See the  documentation for  Schedule::Cron for a  detailed description
and further usage examples.

REPORTING BUGS
--------------

This module  is still in alpha  stage, so I expect  probably some bugs
showing  up. I.e.  the  calculation of  the next  execution time  of a
specific  crontab  entry  might  fail in  some  obscure  circumstances
(though I did what I could to test it thoroughly).

If  you  meet  a bug  (say  hello  to  it  ;-),  please report  it  to
roland@consol.de with  a subject like  "Schedule::Cron Bug-Report". In
addition of a  problem description, please add a  short description of
you OS, your  Perl version and the version  of Time::ParseDate you are
using. If some of the provided tests fail, include the output of 'make
test TEST_VERBOSE=1' as well.

If you suspect,  that the date calculation of  the next execution time
is buggy, please  use the following interactive command  to generate a
bug report.

   perl -MSchedule::Cron -e 'bug Schedule::Cron'

You will be asked for a  reference time (default: the current time), a
crontab  date  pattern  (with  five  columns) and  the  expected  next
execution date  (relative to  the reference time).   The dates  can be
specified in  a format understood by  'parsedate' from Time::ParseDate
(like 'now  + 5  days').  Please include  the output of  this command.

COPYRIGHT
---------

Copyright 1999,2000 Roland Huss.

This library is  free software; you can redistribute  it and/or modify
it under the same terms as Perl itself.


Enjoy it...
							    ...roland



