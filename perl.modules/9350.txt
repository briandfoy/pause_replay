Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:9350
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 21786 invoked by uid 76); 18 Dec 2001 02:54:23 -0000
Received: from root@dubravka.kbx.de (HELO pause.perl.org) (212.40.160.59)
  by onion.perl.org (qpsmtpd/0.05) with SMTP; Tue Dec 18 02:54:23 2001 -0000
Received: (from nobody@localhost)
	by pause.perl.org (8.9.3/8.9.3) id DAA17659;
	Tue, 18 Dec 2001 03:54:18 +0100
Date: Tue, 18 Dec 2001 03:54:18 +0100
Message-ID: <200112180254.DAA17659@pause.perl.org>
Reply-To: modules@perl.org
Subject: Module submission Sub::Context
To: modules@perl.org, chromatic@cpan.org
Approved: news@nntp.perl.org
From: upload@p11.speed-link.de ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Sub::Context
  DSLIP:       bdppp
  description: Context-sensitive subroutine dispatch
  userid:      CHROMATIC (chromatic)
  chapterid:    3 (Development_Support)
  communities:
    http://perlmonks.org/index.pl?node_id=132261

  similar:
    Want, Class::Multimethods

  rationale:

    Sub::Context makes it easier to create or to modify subroutines
    that have different behavior in different contexts. It's slightly
    more than a wrapper around wantarray(). My aim is to explore a
    different idea for function dispatch -- instead of parametric
    polymorphism, why not context-sensitive polymorphism?

    Class::Multimethods doesn't currently support this, though Damian's
    expressed interest in seeing the progress of this module. Want.pm
    exposes other types of contexts, and the plan is to integrate
    optional support in Sub::Context.

  enteredby:   CHROMATIC (chromatic)
  enteredon:   Tue Dec 18 02:54:18 2001 GMT

The resulting entry would be:

Sub::
::Context         bdppp Context-sensitive subroutine dispatch        CHROMATIC


Thanks for registering,
The Pause Team

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=19200000_317ed6332b14973d&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=19200000_317ed6332b14973d&SUBMIT_pause99_add_mod_insertit=1
