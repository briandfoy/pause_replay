Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:84223
Return-Path: <apache@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 21038 invoked from network); 18 Jan 2013 22:42:36 -0000
Received: from x1.develooper.com (207.171.7.70)
  by x6.develooper.com with SMTP; 18 Jan 2013 22:42:36 -0000
Received: (qmail 26329 invoked by uid 225); 18 Jan 2013 22:42:36 -0000
Delivered-To: modules@perl.org
Received: (qmail 26325 invoked by alias); 18 Jan 2013 22:42:36 -0000
X-Spam-Status: No, hits=-2.9 required=8.0
	tests=ALL_TRUSTED,BAYES_00
X-Spam-Check-By: la.mx.develooper.com
Received: from pause2.develooper.com (HELO pause.perl.org) (207.171.7.119)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Fri, 18 Jan 2013 14:42:33 -0800
Received: by pause.perl.org (Postfix, from userid 48)
	id D24BB1FF9B; Fri, 18 Jan 2013 22:42:29 +0000 (UTC)
Subject: Module submission DBI::Query
Reply-To: modules@perl.org
To: modules@perl.org,gryphon@cpan.org
Message-ID: <20130118224229.D24BB1FF9B@pause.perl.org>
Date: Fri, 18 Jan 2013 22:42:29 +0000 (UTC)
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       DBI::Query
  DSLIP:       bdpOp
  description: Simplified abstracted chained DBI subclass
  userid:      GRYPHON (Gryphon Shafer)
  chapterid:   7 (Database_Interfaces)
  communities:

  similar:
    DBI DBI::Simple

  rationale:

    DBI::Query is a pure subclass of DBI that permits the use of
    simplified, abstracted, chained database querying. The idea being
    that you can use an interface similar to jQuery but drop into the
    DBI superclass's methods at any time. There are methods like get()
    that let you specify queries in SQL::Abstract-like ways and sql()
    that let you specify queries in SQL. In both cases, DBI::Query
    auto-builds in the other half. DBI::Query also provides an interface
    to the data returned from the query, allowing for simplified,
    abstracted, chained data interaction.

    $dbh->sql('SELECT stuff FROM things WHERE value >
    ?')->run(42)->each( sub { ... } );

    my $sth = $dbh->get( 'things', ['stuff'], { 'value' => 42 }
    )->run(); my $stuff = $sth->fetchrow_array();

    my $db = $dbh->sql('SELECT id, stuff FROM things');
    $db->run(42)->next()->cell('stuff')->value(1138)->save_by('id');

    Allison Randal is helping me with the interface, and chromatic is
    writing test coverage. It's being used in a production system at the
    moment, but is probably better to be listed as "beta" for the time
    being while we improve test coverage and error reporting.

  enteredby:   GRYPHON (Gryphon Shafer)
  enteredon:   Fri Jan 18 22:42:29 2013 GMT

The resulting entry would be:

DBI::
::Query           bdpOp Simplified abstracted chained DBI subclass   GRYPHON


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=56900000_f5c24243157e22c9&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=56900000_f5c24243157e22c9&SUBMIT_pause99_add_mod_insertit=1
Peek at the current permissions:
  https://pause.perl.org/pause/authenquery?pause99_peek_perms_by=me&pause99_peek_perms_query=DBI%3A%3AQuery
