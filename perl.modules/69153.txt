Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:69153
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 31705 invoked from network); 30 Dec 2009 00:20:29 -0000
Received: from x1.develooper.com (207.171.7.70)
  by x6.develooper.com with SMTP; 30 Dec 2009 00:20:29 -0000
Received: (qmail 5404 invoked by uid 225); 30 Dec 2009 00:20:29 -0000
Delivered-To: modules@perl.org
Received: (qmail 5348 invoked by alias); 30 Dec 2009 00:20:28 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=
X-Spam-Check-By: la.mx.develooper.com
Received: from pause.fiz-chemie.de (HELO pause.perl.org) (195.149.117.110)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Tue, 29 Dec 2009 16:20:27 -0800
Received: from pause.fiz-chemie.de (localhost.localdomain [127.0.0.1])
	by pause.perl.org (8.13.8/8.13.8/Debian-3) with ESMTP id nBU0KKqD014069
	for <modules@perl.org>; Wed, 30 Dec 2009 01:20:20 +0100
Received: (from nobody@localhost)
	by pause.fiz-chemie.de (8.13.8/8.13.8/Submit) id nBU0KJN1014067;
	Wed, 30 Dec 2009 01:20:19 +0100
Date: Wed, 30 Dec 2009 01:20:19 +0100
Message-ID: <200912300020.nBU0KJN1014067@pause.fiz-chemie.de>
Subject: Module submission ISP::RADIUS
Reply-To: modules@perl.org
To: modules@perl.org
Approved: news@nntp.perl.org
From: upload@pause.perl.org ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       ISP::RADIUS
  DSLIP:       ampOp
  description: Accounting and DB management for FreeRADIUS
  userid:      STEVEB (Steve Bertrand)
  chapterid:   23 (Miscellaneous_Modules)
  communities:
    Mailing list, initially

  similar:

  rationale:

    Namespace choice:

    I have written numerous modules that are quite specific to the
    day-to-day operation within the Internet Service Provider industry.

    Another project that I plan on uploading to the CPAN in the near
    future contains numerous modules that are (currently) under my
    internal ISP:: namespace, which contains an entire ISP-type
    client/accounting/notes/ledger management system.

    My rationale for a new top-level namespace is to provide a location
    that is generally industry specific in hopes to spur new ideas from
    the service provider crowd, bundle together industry-related
    software all-the-while making it available to others outside of the
    industry who may find it useful.

    Module Rationale:

    FreeRADIUS is (and has been) bundled with a few 'accounting'
    aggregation and management scripts. To be useful to me, I had to
    severely hack them in several different ways.

    My module (and related scripts) are strict/warnings compliant, have
    (pretty much) complete documentation, tests, and essentially allow
    the user to do more with the provided scripts.

    The overall purpose is for aggregating the user RADIUS
    time/bandwidth used so that it can be searched by day or month. It
    also archives the fast-growing accounting database table in order to
    keep it manageable. Many ISPs are, or will be doing all of their
    billing based on bandwidth consumption. This module tries to aid in
    the monthly billing data collection.

    The return values of the `get` type methods are formatted in such a
    way that they can be passed into most Template systems on the market
    (CPAN, as it were) directly, if they support a TMPL_LOOP style
    iterator.

    The interface is OO, and although in alpha, I do use it in
    production. The module API is designed so that all methods require
    hashref name-based params, so new parameters can be easily added
    without breaking existing installations.

    Core configuration items come from a config file, and some options
    can be overridden at runtime. Although designed with MySQL in mind,
    it successfully operates with SQLite. MySQL replication is possible
    via the config file (so long as the DB repl is set up properly
    beforehand), and the master can be disabled for writes (for eg
    maintenance) while reads are still possible via the slaves (again,
    via the config).

    Tests have their own pre-populated sqlite3 dataset, and the
    installer knows to compile and use this test dataset if one runs the
    test files individually, or within a 'make test'.

    Feedback/criticism welcome, steve@ibctech.ca

    Steve

  enteredby:   STEVEB (Steve Bertrand)
  enteredon:   Wed Dec 30 00:20:18 2009 GMT

The resulting entry would be:

ISP::
::RADIUS          ampOp Accounting and DB management for FreeRADIUS  STEVEB


Thanks for registering,
-- 
The PAUSE

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=b5400000_89fce2cbcc0eacb0&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=b5400000_89fce2cbcc0eacb0&SUBMIT_pause99_add_mod_insertit=1
Peek at the current permissions:
  https://pause.perl.org/pause/authenquery?pause99_peek_perms_by=me&pause99_peek_perms_query=ISP%3A%3ARADIUS
