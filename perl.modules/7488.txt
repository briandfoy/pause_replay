Newsgroups: perl.modules
Path: nntp.perl.org
Xref: nntp.perl.org perl.modules:7488
Return-Path: <nobody@pause.perl.org>
Mailing-List: contact modules-help@perl.org; run by ezmlm
Delivered-To: mailing list modules@perl.org
Received: (qmail 87535 invoked from network); 10 Sep 2001 19:24:16 -0000
Received: from dubravka.kbx.de (HELO pause.perl.org) (root@212.40.160.59)
  by onion.valueclick.com with SMTP; 10 Sep 2001 19:24:16 -0000
Received: (from nobody@localhost)
	by pause.perl.org (8.9.3/8.9.3) id VAA21565;
	Mon, 10 Sep 2001 21:24:14 +0200
Date: Mon, 10 Sep 2001 21:24:14 +0200
Message-ID: <200109101924.VAA21565@pause.perl.org>
Reply-To: modules@perl.org
Subject: Module submission Data::Encrypted
To: modules@perl.org, amackey@cpan.org
X-Spam-Rating: onion.valueclick.com 1.6.2 0/1000/N
Approved: news@nntp.perl.org
From: upload@p11.speed-link.de ("Perl Authors Upload Server")


The following module was proposed for inclusion in the Module List:

  modid:       Data::Encrypted
  DSLIP:       bdphp
  description: Conveniently store encrypted data via RSA
  userid:      AMACKEY (Aaron J. Mackey)
  chapterid:   14 (Security_and_Encryption)
  communities:
    Discussed previously on c.l.p.m. and modules@perl.org

  similar:
    Tie::SecureHash

  rationale:

    Introduction: [ from the documentation ]

    Often when dealing with external resources (database engines, ftp,
    telnet, websites, etc), your Perl script must supply a password, or
    other sensitive data, to the other system. This requires you to
    either continually prompt the user for the data, or to store the
    information (in plaintext) within your script. You'd rather not have
    to remember the connection details to all your different resources,
    so you'd like to store the data somewhere. And if you share your
    script with anyone (as any good open-source developer would), you'd
    rather not have your password or other sensitive information
    floating around.

    Data::Encrypted attempts to fill this small void with a simple, yet
    functional solution to this common predicament. It works by
    prompting you (via Term::ReadPassword) once for each required value,
    but only does so the first time you run your script; thereafter, the
    data is stored encrypted in a secondary file. Subsequent executions
    of your script use the encrypted data directly, if possible;
    otherwise it again prompts for the data. Currently, Data::Encrypted
    achieves encryption via an RSA public-key cryptosystem implemented
    by Crypt::RSA, using (by default) your own SSH1 public and private
    keys.

    Rationale: Data::Encrypted uses the RSA public key encryption
    scheme that is already in place for many users. It is meant to
    provide the convenience of prompt-less password usage without
    plaintext storage. As such, it differs from Tie::SecureHash and any
    other CBC::Crypt module (in which a passphrase is included in
    plaintext within the source code).

    Thank you,

    -Aaron Mackey (AMACKEY)

  enteredby:   AMACKEY (Aaron J. Mackey)
  enteredon:   Mon Sep 10 19:24:14 2001 GMT

The resulting entry would be:

Data::
::Encrypted       bdphp Conveniently store encrypted data via RSA    AMACKEY


Thanks for registering,
The Pause Team

PS: The following links are only valid for module list maintainers:

Registration form with editing capabilities:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=4f000000_20aa4a3d34d0c22a&SUBMIT_pause99_add_mod_preview=1
Immediate (one click) registration:
  https://pause.perl.org/pause/authenquery?ACTION=add_mod&USERID=4f000000_20aa4a3d34d0c22a&SUBMIT_pause99_add_mod_insertit=1
